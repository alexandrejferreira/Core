#!/bin/sh

#
# MikoPBX - free phone system for small business
# Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#


# Function to display the help message
display_help() {
    echo "Usage: $0 <subcommand> [options]"
    echo
    echo "Subcommands:"
    echo "  services <action>   Manage PBX services"
    echo "    - stop-all         Stop all PBX services"
    echo "    - start-all        Start all PBX services"
    echo "    - restart-all      Restart all PBX services"
    echo "  service <name>      Kill a specific PBX service"
    echo "  debug <name> <ip>   Debug a specific script"
    echo "  xdebug <action> <ip>   Debug whole system"
    echo "    - enable-cli        Start CLI scripts debug session"
    echo "    - enable-www        Start WEB scripts debug session"
    echo "    - enable-agi        Start Asterisk scripts debug session"
    echo "  cron <action>       Manage cron"
    echo "    - stop             Stop cron"
    echo "    - restart          Restart cron"
    echo "    - start            Start cron"
    echo "    - show             Show the status of cron"
    echo
    echo "Examples:"
    echo "  $0 services start-all"
    echo "  $0 service php-worker"
    echo "  $0 debug WorkerApiCommands 192.168.1.2"
    echo "  $0 debug WorkerApiCommands docker.for.mac.localhost"
    echo "  $0 cron show"
    echo "  $0 xdebug enable-www docker.for.mac.localhost"
    echo "  $0 xdebug enable-agi 192.168.1.2"
    echo
}

# Check if help is requested or no subcommand provided
if [ "$1" = "help" ] || [ -z "$1" ]; then
    display_help
    exit 0
fi

# First command line argument is treated as a subcommand
subcmd=$1;

# Get the name of the safe script from the cron jobs
safeScript=$(crontab -l | cut -d ' ' -f8 | grep Safe);

# Case switch for the subcommand
case "${subcmd}" in
services)
   # Second command line argument is treated as an action
   action=$2;
   # Case switch for the action when subcommand is services
   case "${action}" in
   stop-all)
      # Get process IDs (PIDs) of PHP Worker services
      pids=$(ps | grep php | grep Worker | awk '{print $1}');

      # If PIDs exist, kill the processes
      if [ -n "${pids}" ]; then
        echo 'Killing all PBX services.';
        kill ${pids};
      else
        echo 'PBX services not started.';
      fi
      ;;
   start-all)
     # If safe script exists, start it
     if [ -f "$safeScript" ]; then
       /usr/bin/php -f "$safeScript" start
     else
        echo 'Safe script not found.';
     fi
     ;;
   restart-all)
     # If safe script exists, restart it
     if [ -f "$safeScript" ]; then
       /usr/bin/php -f "$safeScript" restart
     else
        echo 'Safe script not found.';
     fi
     ;;
  esac
  ;;
service)
  # Get PIDs of specific service passed as second argument
  pids=$(ps | grep "$2" | grep -v grep | grep -v "$0" | awk '{print $1}');

  # If PIDs exist, kill the service
  if [ -n "${pids}" ]; then
    echo "Killing PBX service ${2}.";
    echo "${pids}" | xargs kill
  else
    echo "PBX service ${2} not started.";
  fi
  ;;
debug)
  # Prepare for debugging specific script passed as second argument
  pbxConsole="$0";
  scriptName="$2";
  ipDebugger="$3";

  # Find the file to debug
  pathToFile=$(find /usr/www/src/ -name "${scriptName}.php")
  if [ ! -f "$pathToFile" ]; then
    echo "File ${scriptName}.php not found.";
    exit 2;
  fi

  # Stop cron and specific service
  "${pbxConsole}" cron stop;
  "${pbxConsole}" service "${scriptName}" stop;

  # Configure xdebug environment variable for PHP
  # Adjusted for Xdebug 3
  export XDEBUG_CONFIG="client_host=${ipDebugger} client_port=9003"
  export XDEBUG_MODE="debug"
  export XDEBUG_SESSION=1

  # Enable xdebug in PHP if it's not enabled
  if [ ! -f /etc/php.d/15-xdebug.ini ]; then
    echo "Creating Xdebug configuration file..."
    cat <<EOL > /etc/php.d/15-xdebug.ini
zend_extension=xdebug.so
xdebug.mode=debug
xdebug.start_with_request=yes
xdebug.client_host=${ipDebugger}
xdebug.client_port=9003
EOL
  else
    echo "Updating Xdebug client_host to ${ipDebugger}..."
    sed -i "s/^xdebug\.client_host=.*/xdebug.client_host=${ipDebugger}/" /etc/php.d/15-xdebug.ini
  fi

  # Start the PHP script with xdebug enabled
  php -dxdebug.mode=debug -dxdebug.start_with_request=yes -f "$pathToFile" start;
  ;;

xdebug)
    # Handle actions related to xdebug
    pbxConsole="$0";
    action=$2;
    ipDebugger="$3";
    case "${action}" in
      enable-cli)
        echo "Enabling Xdebug for CLI..."
        if [ -f /etc/php.d/15-xdebug.ini ]; then
          echo "Updating Xdebug client_host to ${ipDebugger}..."
          sed -i "s/^xdebug\.client_host=.*/xdebug.client_host=${ipDebugger}/" /etc/php.d/15-xdebug.ini
        else
          echo "Creating Xdebug configuration file..."
          cat <<EOL > /etc/php.d/15-xdebug.ini
zend_extension=xdebug.so
xdebug.mode=debug
xdebug.start_with_request=yes
xdebug.client_host=${ipDebugger}
xdebug.client_port=9003
EOL
        fi
        echo "Done"
        ;;
      enable-www)
        echo "Enabling Xdebug for WWW..."
        if [ -f /etc/php.d/15-xdebug.ini ]; then
          echo "Updating Xdebug client_host to ${ipDebugger}..."
          sed -i "s/^xdebug\.client_host=.*/xdebug.client_host=${ipDebugger}/" /etc/php.d/15-xdebug.ini
        else
          echo "Creating Xdebug configuration file..."
          cat <<EOL > /etc/php.d/15-xdebug.ini
zend_extension=xdebug.so
xdebug.mode=debug
xdebug.start_with_request=yes
xdebug.client_host=${ipDebugger}
xdebug.client_port=9003
EOL
        fi
        echo "Restarting php-fpm..."
        killall php-fpm
        sleep 5;
        php-fpm -c /etc/php.ini
        echo "Done"
        ;;
      enable-agi)
        echo "Enabling Xdebug for AGI..."
        echo "Restarting the Asterisk daemon..."
        killall safe_asterisk
        killall asterisk
        "${pbxConsole}" xdebug enable-cli ${ipDebugger}
        nohup safe_asterisk -f > /dev/null 2>&1 &
        echo "Done"
        ;;
    esac
    ;;
cron)
  # Handle actions related to cron
  action=$2;
  case "${action}" in
    stop)
      # If cron is running, kill it
      ps | grep -v grep | grep crond > /dev/null;
      result=$?;
      if [ "$result" = "0" ]; then
        echo 'Killing cron.';
        killall crond;
      else
        echo 'Cron not started.';
      fi
      ;;
    restart)
       # Stop cron and then start it
      "${pbxConsole}" cron stop;
      echo 'Starting cron.';
      /usr/sbin/crond -L /dev/null -l 8
      ;;
    start)
      # If cron is not running, start it
      ps | grep -v grep | grep crond > /dev/null;
      result=$?;
      if [ "$result" = "1" ]; then
        echo 'Starting cron.';
        /usr/sbin/crond -L /dev/null -l 8
      else
        echo 'Cron already started.';
      fi
      ;;
    show)
      # Show the status of cron
      ps | head -n 1;
      ps | grep crond | grep -v grep;
      ;;
  esac
  ;;
esac