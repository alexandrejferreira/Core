"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, globalTranslate, SemanticLocalization, Form, PbxApi, clockWorker */
var timeSettings = {
  $number: $('#extension'),
  $formObj: $('#time-settings-form'),
  validateRules: {
    CurrentDateTime: {
      depends: 'PBXManualTimeSettings',
      identifier: 'ManualDateTime',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.ts_ValidateDateTime
      }]
    }
  },
  initialize: function initialize() {
    $('#PBXTimezone').dropdown({
      fullTextSearch: true
    });
    $('.checkbox').checkbox({
      onChange: function onChange() {
        timeSettings.toggleDisabledFieldClass();
      }
    });
    timeSettings.initializeForm();
    timeSettings.toggleDisabledFieldClass();
  },
  toggleDisabledFieldClass: function toggleDisabledFieldClass() {
    if (timeSettings.$formObj.form('get value', 'PBXManualTimeSettings') === 'on') {
      $('#SetDateTimeBlock').removeClass('disabled');
      $('#SetNtpServerBlock').addClass('disabled');
    } else {
      $('#SetNtpServerBlock').removeClass('disabled');
      $('#SetDateTimeBlock').addClass('disabled');
      clockWorker.restartWorker();
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = timeSettings.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {
    if (timeSettings.$formObj.form('get value', 'PBXManualTimeSettings') === 'on') {
      var manualDate = timeSettings.$formObj.form('get value', 'ManualDateTime');
      var timestamp = Date.parse("".concat(manualDate)) / 1000;
      var userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      PbxApi.UpdateDateTime({
        timestamp: timestamp,
        userTimeZone: userTimeZone
      });
    }
  },
  initializeForm: function initializeForm() {
    Form.$formObj = timeSettings.$formObj;
    Form.url = "".concat(globalRootUrl, "time-settings/save");
    Form.validateRules = timeSettings.validateRules;
    Form.cbBeforeSendForm = timeSettings.cbBeforeSendForm;
    Form.cbAfterSendForm = timeSettings.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  timeSettings.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UaW1lU2V0dGluZ3MvdGltZS1zZXR0aW5ncy1tb2RpZnkuanMiXSwibmFtZXMiOlsidGltZVNldHRpbmdzIiwiJG51bWJlciIsIiQiLCIkZm9ybU9iaiIsInZhbGlkYXRlUnVsZXMiLCJDdXJyZW50RGF0ZVRpbWUiLCJkZXBlbmRzIiwiaWRlbnRpZmllciIsInJ1bGVzIiwidHlwZSIsInByb21wdCIsImdsb2JhbFRyYW5zbGF0ZSIsInRzX1ZhbGlkYXRlRGF0ZVRpbWUiLCJpbml0aWFsaXplIiwiZHJvcGRvd24iLCJmdWxsVGV4dFNlYXJjaCIsImNoZWNrYm94Iiwib25DaGFuZ2UiLCJ0b2dnbGVEaXNhYmxlZEZpZWxkQ2xhc3MiLCJpbml0aWFsaXplRm9ybSIsImZvcm0iLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiY2xvY2tXb3JrZXIiLCJyZXN0YXJ0V29ya2VyIiwiY2JCZWZvcmVTZW5kRm9ybSIsInNldHRpbmdzIiwicmVzdWx0IiwiZGF0YSIsImNiQWZ0ZXJTZW5kRm9ybSIsIm1hbnVhbERhdGUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwicGFyc2UiLCJ1c2VyVGltZVpvbmUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJ0aW1lWm9uZSIsIlBieEFwaSIsIlVwZGF0ZURhdGVUaW1lIiwiRm9ybSIsInVybCIsImdsb2JhbFJvb3RVcmwiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFFQSxJQUFNQSxZQUFZLEdBQUc7QUFDcEJDLEVBQUFBLE9BQU8sRUFBRUMsQ0FBQyxDQUFDLFlBQUQsQ0FEVTtBQUVwQkMsRUFBQUEsUUFBUSxFQUFFRCxDQUFDLENBQUMscUJBQUQsQ0FGUztBQUdwQkUsRUFBQUEsYUFBYSxFQUFFO0FB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QixZQUFZLENBQUM2QixlQUFwQztBQUNBWSxJQUFBQSxJQUFJLENBQUM1QixVQUFMO0FBQ0E7QUExRG1CLENBQXJCO0FBNkRBWCxDQUFDLENBQUMwQyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3ZCN0MsRUFBQUEsWUFBWSxDQUFDYSxVQUFiO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIzIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBnbG9iYWxSb290VXJsLCBnbG9iYWxUcmFuc2xhdGUsIFNlbWFudGljTG9jYWxpemF0aW9uLCBGb3JtLCBQYnhBcGksIGNsb2NrV29ya2VyICovXG5cbmNvbnN0IHRpbWVTZXR0aW5ncyA9IHtcblx0JG51bWJlcjogJCgnI2V4dGVuc2lvbicpLFxuXHQkZm9ybU9iajogJCgnI3RpbWUtc2V0dGluZ3MtZm9ybScpLFxuXHR2YWxpZGF0ZVJ1bGVzOiB7XG5cdFx0Q3VycmVudERhdGVUaW1lOiB7XG5cdFx0XHRkZXBlbmRzOiAnUEJYTWFudWFsVGltZVNldHRpbmdzJyxcblx0XHRcdGlkZW50aWZpZXI6ICdNYW51YWxEYXRlVGltZScsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2VtcHR5Jyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS50c19WYWxpZGF0ZURhdGVUaW1lLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHR9LFxuXHRpbml0aWFsaXplKCkge1xuXHRcdCQoJyNQQlhUaW1lem9uZScpLmRyb3Bkb3duKHtcblx0XHRcdGZ1bGxUZXh0U2VhcmNoOiB0cnVlLFxuXHRcdH0pO1xuXG5cdFx0JCgnLmNoZWNrYm94JykuY2hlY2tib3goe1xuXHRcdFx0b25DaGFuZ2UoKSB7XG5cdFx0XHRcdHRpbWVTZXR0aW5ncy50b2dnbGVEaXNhYmxlZEZpZWxkQ2xhc3MoKTtcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0dGltZVNldHRpbmdzLmluaXRpYWxpemVGb3JtKCk7XG5cdFx0dGltZVNldHRpbmdzLnRvZ2dsZURpc2FibGVkRmllbGRDbGFzcygpO1xuXHR9LFxuXHR0b2dnbGVEaXNhYmxlZEZpZWxkQ2xhc3MoKSB7XG5cdFx0aWYgKHRpbWVTZXR0aW5ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnUEJYTWFudWFsVGltZVNldHRpbmdzJykgPT09ICdvbicpIHtcblx0XHRcdCQoJyNTZXREYXRlVGltZUJsb2NrJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHQkKCcjU2V0TnRwU2VydmVyQmxvY2snKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JCgnI1NldE50cFNlcnZlckJsb2NrJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHQkKCcjU2V0RGF0ZVRpbWVCbG9jaycpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXHRcdFx0Y2xvY2tXb3JrZXIucmVzdGFydFdvcmtlcigpO1xuXHRcdH1cblx0fSxcblx0Y2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuXHRcdHJlc3VsdC5kYXRhID0gdGltZVNldHRpbmdzLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZXMnKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXHRjYkFmdGVyU2VuZEZvcm0oKSB7XG5cdFx0aWYgKHRpbWVTZXR0aW5ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnUEJYTWFudWFsVGltZVNldHRpbmdzJykgPT09ICdvbicpIHtcblx0XHRcdGNvbnN0IG1hbnVhbERhdGUgPSB0aW1lU2V0dGluZ3MuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlJywgJ01hbnVhbERhdGVUaW1lJyk7XG5cdFx0XHRjb25zdCB0aW1lc3RhbXAgPSBEYXRlLnBhcnNlKGAke21hbnVhbERhdGV9YCkvMTAwMDtcblx0XHRcdGNvbnN0IHVzZXJUaW1lWm9uZSA9IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZTtcblx0XHRcdFBieEFwaS5VcGRhdGVEYXRlVGltZSh7dGltZXN0YW1wLCB1c2VyVGltZVpvbmV9KTtcblx0XHR9XG5cdH0sXG5cdGluaXRpYWxpemVGb3JtKCkge1xuXHRcdEZvcm0uJGZvcm1PYmogPSB0aW1lU2V0dGluZ3MuJGZvcm1PYmo7XG5cdFx0Rm9ybS51cmwgPSBgJHtnbG9iYWxSb290VXJsfXRpbWUtc2V0dGluZ3Mvc2F2ZWA7XG5cdFx0Rm9ybS52YWxpZGF0ZVJ1bGVzID0gdGltZVNldHRpbmdzLnZhbGlkYXRlUnVsZXM7XG5cdFx0Rm9ybS5jYkJlZm9yZVNlbmRGb3JtID0gdGltZVNldHRpbmdzLmNiQmVmb3JlU2VuZEZvcm07XG5cdFx0Rm9ybS5jYkFmdGVyU2VuZEZvcm0gPSB0aW1lU2V0dGluZ3MuY2JBZnRlclNlbmRGb3JtO1xuXHRcdEZvcm0uaW5pdGlhbGl6ZSgpO1xuXHR9LFxufTtcblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHR0aW1lU2V0dGluZ3MuaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=