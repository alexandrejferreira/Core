"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global ace, PbxApi, updateLogViewWorker, Ace, UserMessage */

/**
 * Represents the system diagnostic logs object.
 *
 * @module systemDiagnosticLogs
 */
var systemDiagnosticLogs = {
  /**
   * jQuery object for the "Show Last Log" button.
   * @type {jQuery}
   */
  $showBtn: $('#show-last-log'),

  /**
   * jQuery object for the "Download File" button.
   * @type {jQuery}
   */
  $downloadBtn: $('#download-file'),

  /**
   * jQuery object for the "Show Last Log (Auto)" button.
   * @type {jQuery}
   */
  $showAutoBtn: $('#show-last-log-auto'),

  /**
   * jQuery object for the "Erase current file content" button.
   * @type {jQuery}
   */
  $eraseBtn: $('#erase-file'),

  /**
   * jQuery object for the log content.
   * @type {jQuery}
   */
  $logContent: $('#log-content-readonly'),

  /**
   * The viewer for displaying the log content.
   * @type {Ace}
   */
  viewer: '',

  /**
   * jQuery object for the file select dropdown.
   * @type {jQuery}
   */
  $fileSelectDropDown: $('#system-diagnostic-form .filenames-select'),

  /**
   * Array of log items.
   * @type {Array}
   */
  logsItems: [],

  /**
   * Default log item.
   * @type {Object}
   */
  defaultLogItem: null,

  /**
   * jQuery object for the dimmer.
   * @type {jQuery}
   */
  $dimmer: $('#get-logs-dimmer'),

  /**
   * jQuery object for the form.
   * @type {jQuery}
   */
  $formObj: $('#system-diagnostic-form'),

  /**
   * jQuery object for the filename.
   * @type {jQuery}
   */
  $fileName: $('#system-diagnostic-form .filename'),

  /**
   * Initializes the system diagnostic logs.
   */
  initialize: function initialize() {
    var aceHeight = window.innerHeight - 250; // Set the minimum height of the log container

    systemDiagnosticLogs.$dimmer.closest('div').css('min-height', "".concat(aceHeight, "px")); // Initialize the dropdown menu for log files

    systemDiagnosticLogs.$fileSelectDropDown.dropdown({
      values: systemDiagnosticLogs.logsItems,
      onChange: systemDiagnosticLogs.cbOnChangeFile,
      ignoreCase: true,
      fullTextSearch: true,
      forceSelection: false
    }); // Initialize the ACE editor for log content

    systemDiagnosticLogs.initializeAce(); // Fetch the list of log files

    PbxApi.SyslogGetLogsList(systemDiagnosticLogs.cbFormatDropdownResults); // Event listener for "Show Log" button click

    systemDiagnosticLogs.$showBtn.on('click', function (e) {
      e.preventDefault();
      systemDiagnosticLogs.updateLogFromServer();
    }); // Event listener for "Download Log" button click

    systemDiagnosticLogs.$downloadBtn.on('click', function (e) {
      e.preventDefault();
      var data = systemDiagnosticLogs.$formObj.form('get values');
      PbxApi.SyslogDownloadLogFile(data.filename, systemDiagnosticLogs.cbDownloadFile);
    }); // Event listener for "Auto Refresh" button click

    systemDiagnosticLogs.$showAutoBtn.on('click', function (e) {
      e.preventDefault();
      var $reloadIcon = systemDiagnosticLogs.$showAutoBtn.find('i.refresh');

      if ($reloadIcon.hasClass('loading')) {
        $reloadIcon.removeClass('loading');
        updateLogViewWorker.stop();
      } else {
        $reloadIcon.addClass('loading');
        updateLogViewWorker.initialize();
      }
    }); // Event listener for the "Erase file" button click

    systemDiagnosticLogs.$eraseBtn.on('click', function (e) {
      e.preventDefault();
      systemDiagnosticLogs.eraseCurrentFileContent();
    }); // Event listener for Enter keypress on input fields

    $('input').keyup(function (event) {
      if (event.keyCode === 13) {
        systemDiagnosticLogs.updateLogFromServer();
      }
    }); // Event listener for Fullscreen button click

    $('#fullscreen-toggle').on('click', systemDiagnosticLogs.toggleFullScreen); // Listening for the fullscreen change event

    document.addEventListener('fullscreenchange', systemDiagnosticLogs.adjustLogHeight); // Initial height calculation

    systemDiagnosticLogs.adjustLogHeight();
  },

  /**
   * Toggles the full-screen mode of the 'system-logs-segment' element.
   * If the element is not in full-screen mode, it requests full-screen mode.
   * If the element is already in full-screen mode, it exits full-screen mode.
   * Logs an error message to the console if there is an issue enabling full-screen mode.
   *
   * @return {void}
   */
  toggleFullScreen: function toggleFullScreen() {
    var logContainer = document.getElementById('system-logs-segment');

    if (!document.fullscreenElement) {
      logContainer.requestFullscreen()["catch"](function (err) {
        console.error("Error attempting to enable full-screen mode: ".concat(err.message));
      });
    } else {
      document.exitFullscreen();
    }
  },

  /**
   * Function to adjust the height of the logs depending on the screen mode.
   */
  adjustLogHeight: function adjustLogHeight() {
    setTimeout(function () {
      var aceHeight = window.innerHeight - systemDiagnosticLogs.$logContent.offset().top - 25;

      if (document.fullscreenElement) {
        // If fullscreen mode is active
        aceHeight = window.innerHeight - 80;
      } // Recalculate the size of the ACE editor


      $('.log-content-readonly').css('min-height', "".concat(aceHeight, "px"));
      systemDiagnosticLogs.viewer.resize();
    }, 300);
  },

  /**
   * Initializes the ACE editor for log viewing.
   */
  initializeAce: function initializeAce() {
    systemDiagnosticLogs.viewer = ace.edit('log-content-readonly'); // Check if the Julia mode is available

    var julia = ace.require('ace/mode/julia');

    if (julia !== undefined) {
      // Set the mode to Julia if available
      var IniMode = julia.Mode;
      systemDiagnosticLogs.viewer.session.setMode(new IniMode());
    } // Set the theme and options for the ACE editor


    systemDiagnosticLogs.viewer.setTheme('ace/theme/monokai');
    systemDiagnosticLogs.viewer.renderer.setShowGutter(false);
    systemDiagnosticLogs.viewer.setOptions({
      showLineNumbers: false,
      showPrintMargin: false,
      readOnly: true
    });
  },

  /**
   * Callback function to format the dropdown menu structure based on the response.
   * @param {Object} response - The response data.
   */
  cbFormatDropdownResults: function cbFormatDropdownResults(response) {
    if (response === false) {
      return;
    } // Check if there is a default value set for the filename input field


    var defVal = '';
    var fileName = systemDiagnosticLogs.$formObj.form('get value', 'filename');

    if (systemDiagnosticLogs.logsItems.length === 0 && fileName !== '') {
      defVal = fileName.trim();
    }

    systemDiagnosticLogs.logsItems = [];
    var files = response.files; // Iterate through each file and create the dropdown menu options

    $.each(files, function (index, item) {
      if (defVal !== '') {
        item["default"] = defVal === item.path;
      } // Create an option object for each file


      systemDiagnosticLogs.logsItems.push({
        name: "".concat(index, " (").concat(item.size, ")"),
        value: item.path,
        selected: item["default"]
      });
    }); // Update the dropdown menu values with the newly formatted options

    systemDiagnosticLogs.$fileSelectDropDown.dropdown('change values', systemDiagnosticLogs.logsItems);
  },

  /**
   * Callback after changing the log file in the select dropdown.
   * @param {string} value - The selected value.
   */
  cbOnChangeFile: function cbOnChangeFile(value) {
    if (value.length === 0) {
      return;
    }

    systemDiagnosticLogs.$formObj.form('set value', 'filename', value);
    systemDiagnosticLogs.updateLogFromServer();
  },

  /**
   * Fetches the log file content from the server.
   */
  updateLogFromServer: function updateLogFromServer() {
    var params = systemDiagnosticLogs.$formObj.form('get values');
    PbxApi.SyslogGetLogFromFile(params, systemDiagnosticLogs.cbUpdateLogText);
  },

  /**
   * Updates the log view.
   * @param {Object} data - The log data.
   */
  cbUpdateLogText: function cbUpdateLogText(data) {
    systemDiagnosticLogs.viewer.getSession().setValue(data.content);
    var row = systemDiagnosticLogs.viewer.session.getLength() - 1;
    var column = systemDiagnosticLogs.viewer.session.getLine(row).length; // or simply Infinity

    systemDiagnosticLogs.viewer.gotoLine(row + 1, column);
    systemDiagnosticLogs.$dimmer.removeClass('active');
  },

  /**
   * Callback after clicking the "Download File" button.
   * @param {Object} response - The response data.
   */
  cbDownloadFile: function cbDownloadFile(response) {
    if (response !== false) {
      window.location = response.filename;
    }
  },

  /**
   * Callback after clicking the "Erase File" button.
   */
  eraseCurrentFileContent: function eraseCurrentFileContent() {
    var fileName = systemDiagnosticLogs.$formObj.form('get value', 'filename');

    if (fileName.length > 0) {
      PbxApi.SyslogEraseFile(fileName, systemDiagnosticLogs.cbAfterFileErased);
    }
  },

  /**
   * Callback after clicking the "Erase File" button and calling REST API command
   * @param {Object} response - The response data.
   */
  cbAfterFileErased: function cbAfterFileErased(response) {
    if (response.result === false && response.messages !== undefined) {
      UserMessage.showMultiString(response.messages);
    } else {
      systemDiagnosticLogs.updateLogFromServer();
    }
  }
}; // When the document is ready, initialize the show system logs tab

$(document).ready(function () {
  systemDiagnosticLogs.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TeXN0ZW1EaWFnbm9zdGljL3N5c3RlbS1kaWFnbm9zdGljLWluZGV4LXNob3dsb2dzLmpzIl0sIm5hbWVzIjpbInN5c3RlbURpYWdub3N0aWNMb2dzIiwiJHNob3dCdG4iLCIkIiwiJGRvd25sb2FkQnRuIiwiJHNob3dBdXRvQnRuIiwiJGVyYXNlQnRuIiwiJGxvZ0NvbnRlbnQiLCJ2aWV3ZXIiLCIkZmlsZVNlbGVjdERyb3BEb3duIiwibG9nc0l0ZW1zIiwiZGVmYXVsdExvZ0l0ZW0iLCIkZGltbWVyIiwiJGZvcm1PYmoiLCIkZmlsZU5hbWUiLCJpbml0aWFsaXplIiwiYWNlSGVpZ2h0Iiwid2luZG93IiwiaW5uZXJIZWlnaHQiLCJjbG9zZXN0IiwiY3NzIiwiZHJvcGRvd24iLCJ2YWx1ZXMiLCJvbkNoYW5nZSIsImNiT25DaGFuZ2VGaWxlIiwiaWdub3JlQ2FzZSIsImZ1bGxUZXh0U2VhcmNoIiwiZm9yY2VTZWxlY3Rpb24iLCJpbml0aWFsaXplQWNlIiwiUGJ4QXBpIiwiU3lzbG9nR2V0TG9nc0xpc3QiLCJjYkZvcm1hdERyb3Bkb3duUmVzdWx0cyIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwidXBkYXRlTG9nRnJvbVNlcnZlciIsImRhdGEiLCJmb3JtIiwiU3lzbG9nRG93bmxvYWRMb2dGaWxlIiwiZmlsZW5hbWUiLCJjYkRvd25sb2FkRmlsZSIsIiRyZWxvYWRJY29uIiwiZmluZCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ1cGRhdGVMb2dWaWV3V29ya2VyIiwic3RvcCIsImFkZENsYXNzIiwiZXJhc2VDdXJyZW50RmlsZUNvbnRlbnQiLCJrZXl1cCIsImV2ZW50Iiwia2V5Q29kZSIsInRvZ2dsZUZ1bGxTY3JlZW4iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGp1c3RMb2dIZWlnaHQiLCJsb2dDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImZ1bGxzY3JlZW5FbGVtZW50IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJtZXNzYWdlIiwiZXhpdEZ1bGxzY3JlZW4iLCJzZXRUaW1lb3V0Iiwib2Zmc2V0IiwidG9wIiwicmVzaXplIiwiYWNlIiwiZWRpdCIsImp1bGlhIiwicmVxdWlyZSIsInVuZGVmaW5lZCIsIkluaU1vZGUiLCJNb2RlIiwic2Vzc2lvbiIsInNldE1vZGUiLCJzZXRUaGVtZSIsInJlbmRlcmVyIiwic2V0U2hvd0d1dHRlciIsInNldE9wdGlvbnMiLCJzaG93TGluZU51bWJlcnMiLCJzaG93UHJpbnRNYXJnaW4iLCJyZWFkT25seSIsInJlc3BvbnNlIiwiZGVmVmFsIiwiZmlsZU5hbWUiLCJsZW5ndGgiLCJ0cmltIiwiZmlsZXMiLCJlYWNoIiwiaW5kZXgiLCJpdGVtIiwicGF0aCIsInB1c2giLCJuYW1lIiwic2l6ZSIsInZhbHVlIiwic2VsZWN0ZWQiLCJwYXJhbXMiLCJTeXNsb2dHZXRMb2dGcm9tRmlsZSIsImNiVXBkYXRlTG9nVGV4dCIsImdldFNlc3Npb24iLCJzZXRWYWx1ZSIsImNvbnRlbnQiLCJyb3ciLCJnZXRMZW5ndGgiLCJjb2x1bW4iLCJnZXRMaW5lIiwiZ290b0xpbmUiLCJsb2NhdGlvbiIsIlN5c2xvZ0VyYXNlRmlsZSIsImNiQWZ0ZXJGaWxlRXJhc2VkIiwicmVzdWx0IiwibWVzc2FnZXMiLCJVc2VyTWVzc2FnZSIsInNob3dNdWx0aVN0cmluZyIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLG9CQUFvQixHQUFHO0FBQ3pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLFFBQVEsRUFBRUMsQ0FBQyxDQUFDLGdCQUFELENBTGM7O0FBT3pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLFlBQVksRUFBRUQsQ0FBQyxDQUFDLGdCQUFELENBWFU7O0FBYXpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lFLEVBQUFBLFlBQVksRUFBRUYsQ0FBQyxDQUFDLHFCQUFELENBakJVOztBQW1CekI7QUFDSjtBQUNBO0FBQ0E7QUFDSUcsRUFBQUEsU0FBUyxFQUFFSCxDQUFDLENBQUMsYUFBRCxDQXZCYTs7QUF5QnpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lJLEVBQUFBLFdBQVcsRUFBRUosQ0FBQyxDQUFDLHVCQUFELENBN0JXOztBQStCekI7QUFDSjtBQUNBO0FBQ0E7QUFDSUssRUFBQUEsTUFBTSxFQUFFLEVBbkNpQjs7QUFxQ3pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLG1CQUFtQixFQUFFTixDQUFDLENBQUMsMkNBQUQsQ0F6Q0c7O0FBMkN6QjtBQUNKO0FBQ0E7QUFDQTtBQUNJTyxFQUFBQSxTQUFTLEVBQUUsRUEvQ2M7O0FBaUR6QjtBQUNKO0FBQ0E7QUFDQTtBQUNJQyxFQUFBQSxjQUFjLEVBQUUsSUFyRFM7O0FBdUR6QjtBQUNKO0FBQ0E7QUFDQTtBQUNJQyxFQUFBQSxPQUFPLEVBQUVULENBQUMsQ0FBQyxrQkFBRCxDQTNEZTs7QUE2RHpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lVLEVBQUFBLFFBQVEsRUFBRVYsQ0FBQyxDQUFDLHlCQUFELENBakVjOztBQW1FekI7QUFDSjtBQUNBO0FBQ0E7QUFDSVcsRUFBQUEsU0FBUyxFQUFFWCxDQUFDLENBQUMsbUNBQUQsQ0F2RWE7O0FBeUV6QjtBQUNKO0FBQ0E7QUFDSVksRUFBQUEsVUE1RXlCLHdCQTRFWjtBQUNULFFBQU1DLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxXQUFQLEdBQXFCLEdBQXZDLENBRFMsQ0FHVDs7QUFDQWpCLElBQUFBLG9CQUFvQixDQUFDVyxPQUFyQixDQUE2Qk8sT0FBN0IsQ0FBcUMsS0FBckMsRUFBNENDLEdBQTVDLENBQWdELFlBQWhELFlBQWlFSixTQUFqRSxTQUpTLENBTVQ7O0FBQ0FmLElBQUFBLG9CQUFvQixDQUFDUSxtQkFBckIsQ0FBeUNZLFFBQXpDLENBQWtEO0FBQzFDQyxNQUFBQSxNQUFNLEVBQUVyQixvQkFBb0IsQ0FBQ1MsU0FEYTtBQUUxQ2EsTUFBQUEsUUFBUSxFQUFFdEIsb0JBQW9CLENBQUN1QixjQUZXO0FBRzFDQyxNQUFBQSxVQUFVLEVBQUUsSUFIOEI7QUFJMUNDLE1BQUFBLGNBQWMsRUFBRSxJQUowQjtBQUsxQ0MsTUFBQUEsY0FBYyxFQUFFO0FBTDBCLEtBQWxELEVBUFMsQ0FlVDs7QUFDQTFCLElBQUFBLG9CQUFvQixDQUFDMkIsYUFBckIsR0FoQlMsQ0FrQlQ7O0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0MsaUJBQVAsQ0FBeUI3QixvQkFBb0IsQ0FBQzhCLHVCQUE5QyxFQW5CUyxDQXFCVDs7QUFDQTlCLElBQUFBLG9CQUFvQixDQUFDQyxRQUFyQixDQUE4QjhCLEVBQTlCLENBQWlDLE9BQWpDLEVBQTBDLFVBQUNDLENBQUQsRUFBTztBQUM3Q0EsTUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0FqQyxNQUFBQSxvQkFBb0IsQ0FBQ2tDLG1CQUFyQjtBQUNILEtBSEQsRUF0QlMsQ0EyQlQ7O0FBQ0FsQyxJQUFBQSxvQkFBb0IsQ0FBQ0csWUFBckIsQ0FBa0M0QixFQUFsQyxDQUFxQyxPQUFyQyxFQUE4QyxVQUFDQyxDQUFELEVBQU87QUFDakRBLE1BQUFBLENBQUMsQ0FBQ0MsY0FBRjtBQUNBLFVBQU1FLElBQUksR0FBR25DLG9CQUFvQixDQUFDWSxRQUFyQixDQUE4QndCLElBQTlCLENBQW1DLFlBQW5DLENBQWI7QUFDQVIsTUFBQUEsTUFBTSxDQUFDUyxxQkFBUCxDQUE2QkYsSUFBSSxDQUFDRyxRQUFsQyxFQUE0Q3RDLG9CQUFvQixDQUFDdUMsY0FBakU7QUFDSCxLQUpELEVBNUJTLENBa0NUOztBQUNBdkMsSUFBQUEsb0JBQW9CLENBQUNJLFlBQXJCLENBQWtDMkIsRUFBbEMsQ0FBcUMsT0FBckMsRUFBOEMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pEQSxNQUFBQSxDQUFDLENBQUNDLGNBQUY7QUFDQSxVQUFNTyxXQUFXLEdBQUd4QyxvQkFBb0IsQ0FBQ0ksWUFBckIsQ0FBa0NxQyxJQUFsQyxDQUF1QyxXQUF2QyxDQUFwQjs7QUFDQSxVQUFJRCxXQUFXLENBQUNFLFFBQVosQ0FBcUIsU0FBckIsQ0FBSixFQUFxQztBQUNqQ0YsUUFBQUEsV0FBVyxDQUFDRyxXQUFaLENBQXdCLFNBQXhCO0FBQ0FDLFFBQUFBLG1CQUFtQixDQUFDQyxJQUFwQjtBQUNILE9BSEQsTUFHTztBQUNITCxRQUFBQSxXQUFXLENBQUNNLFFBQVosQ0FBcUIsU0FBckI7QUFDQUYsUUFBQUEsbUJBQW1CLENBQUM5QixVQUFwQjtBQUNIO0FBQ0osS0FWRCxFQW5DUyxDQStDVDs7QUFDQWQsSUFBQUEsb0JBQW9CLENBQUNLLFNBQXJCLENBQStCMEIsRUFBL0IsQ0FBa0MsT0FBbEMsRUFBMkMsVUFBQ0MsQ0FBRCxFQUFPO0FBQzlDQSxNQUFBQSxDQUFDLENBQUNDLGNBQUY7QUFDQWpDLE1BQUFBLG9CQUFvQixDQUFDK0MsdUJBQXJCO0FBQ0gsS0FIRCxFQWhEUyxDQXFEVDs7QUFDQTdDLElBQUFBLENBQUMsQ0FBQyxPQUFELENBQUQsQ0FBVzhDLEtBQVgsQ0FBaUIsVUFBQ0MsS0FBRCxFQUFXO0FBQ3hCLFVBQUlBLEtBQUssQ0FBQ0MsT0FBTixLQUFrQixFQUF0QixFQUEwQjtBQUN0QmxELFFBQUFBLG9CQUFvQixDQUFDa0MsbUJBQXJCO0FBQ0g7QUFDSixLQUpELEVBdERTLENBNERUOztBQUNBaEMsSUFBQUEsQ0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0I2QixFQUF4QixDQUEyQixPQUEzQixFQUFvQy9CLG9CQUFvQixDQUFDbUQsZ0JBQXpELEVBN0RTLENBK0RUOztBQUNBQyxJQUFBQSxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4Q3JELG9CQUFvQixDQUFDc0QsZUFBbkUsRUFoRVMsQ0FrRVQ7O0FBQ0F0RCxJQUFBQSxvQkFBb0IsQ0FBQ3NELGVBQXJCO0FBQ0gsR0FoSndCOztBQWtKekI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJSCxFQUFBQSxnQkExSnlCLDhCQTBKTjtBQUNmLFFBQU1JLFlBQVksR0FBR0gsUUFBUSxDQUFDSSxjQUFULENBQXdCLHFCQUF4QixDQUFyQjs7QUFFQSxRQUFJLENBQUNKLFFBQVEsQ0FBQ0ssaUJBQWQsRUFBaUM7QUFDN0JGLE1BQUFBLFlBQVksQ0FBQ0csaUJBQWIsWUFBdUMsVUFBQ0MsR0FBRCxFQUFTO0FBQzVDQyxRQUFBQSxPQUFPLENBQUNDLEtBQVIsd0RBQThERixHQUFHLENBQUNHLE9BQWxFO0FBQ0gsT0FGRDtBQUdILEtBSkQsTUFJTztBQUNIVixNQUFBQSxRQUFRLENBQUNXLGNBQVQ7QUFDSDtBQUNKLEdBcEt3Qjs7QUFzS3pCO0FBQ0o7QUFDQTtBQUNJVCxFQUFBQSxlQXpLeUIsNkJBeUtQO0FBQ2RVLElBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2IsVUFBSWpELFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxXQUFQLEdBQXFCakIsb0JBQW9CLENBQUNNLFdBQXJCLENBQWlDMkQsTUFBakMsR0FBMENDLEdBQS9ELEdBQXFFLEVBQXJGOztBQUNBLFVBQUlkLFFBQVEsQ0FBQ0ssaUJBQWIsRUFBZ0M7QUFDNUI7QUFDQTFDLFFBQUFBLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxXQUFQLEdBQXFCLEVBQWpDO0FBQ0gsT0FMWSxDQU1iOzs7QUFDQWYsTUFBQUEsQ0FBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkJpQixHQUEzQixDQUErQixZQUEvQixZQUFpREosU0FBakQ7QUFDQWYsTUFBQUEsb0JBQW9CLENBQUNPLE1BQXJCLENBQTRCNEQsTUFBNUI7QUFDSCxLQVRTLEVBU1AsR0FUTyxDQUFWO0FBVUgsR0FwTHdCOztBQXFMekI7QUFDSjtBQUNBO0FBQ0l4QyxFQUFBQSxhQXhMeUIsMkJBd0xUO0FBQ1ozQixJQUFBQSxvQkFBb0IsQ0FBQ08sTUFBckIsR0FBOEI2RCxHQUFHLENBQUNDLElBQUosQ0FBUyxzQkFBVCxDQUE5QixDQURZLENBR1o7O0FBQ0EsUUFBTUMsS0FBSyxHQUFHRixHQUFHLENBQUNHLE9BQUosQ0FBWSxnQkFBWixDQUFkOztBQUNBLFFBQUlELEtBQUssS0FBS0UsU0FBZCxFQUF5QjtBQUNyQjtBQUNBLFVBQU1DLE9BQU8sR0FBR0gsS0FBSyxDQUFDSSxJQUF0QjtBQUNBMUUsTUFBQUEsb0JBQW9CLENBQUNPLE1BQXJCLENBQTRCb0UsT0FBNUIsQ0FBb0NDLE9BQXBDLENBQTRDLElBQUlILE9BQUosRUFBNUM7QUFDSCxLQVRXLENBV1o7OztBQUNBekUsSUFBQUEsb0JBQW9CLENBQUNPLE1BQXJCLENBQTRCc0UsUUFBNUIsQ0FBcUMsbUJBQXJDO0FBQ0E3RSxJQUFBQSxvQkFBb0IsQ0FBQ08sTUFBckIsQ0FBNEJ1RSxRQUE1QixDQUFxQ0MsYUFBckMsQ0FBbUQsS0FBbkQ7QUFDQS9FLElBQUFBLG9CQUFvQixDQUFDTyxNQUFyQixDQUE0QnlFLFVBQTVCLENBQXVDO0FBQ25DQyxNQUFBQSxlQUFlLEVBQUUsS0FEa0I7QUFFbkNDLE1BQUFBLGVBQWUsRUFBRSxLQUZrQjtBQUduQ0MsTUFBQUEsUUFBUSxFQUFFO0FBSHlCLEtBQXZDO0FBTUgsR0E1TXdCOztBQThNekI7QUFDSjtBQUNBO0FBQ0E7QUFDSXJELEVBQUFBLHVCQWxOeUIsbUNBa05Ec0QsUUFsTkMsRUFrTlM7QUFDOUIsUUFBSUEsUUFBUSxLQUFLLEtBQWpCLEVBQXdCO0FBQ3BCO0FBQ0gsS0FINkIsQ0FJOUI7OztBQUNBLFFBQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBTUMsUUFBUSxHQUFHdEYsb0JBQW9CLENBQUNZLFFBQXJCLENBQThCd0IsSUFBOUIsQ0FBbUMsV0FBbkMsRUFBZ0QsVUFBaEQsQ0FBakI7O0FBQ0EsUUFBSXBDLG9CQUFvQixDQUFDUyxTQUFyQixDQUErQjhFLE1BQS9CLEtBQTBDLENBQTFDLElBQStDRCxRQUFRLEtBQUssRUFBaEUsRUFBb0U7QUFDaEVELE1BQUFBLE1BQU0sR0FBR0MsUUFBUSxDQUFDRSxJQUFULEVBQVQ7QUFDSDs7QUFFRHhGLElBQUFBLG9CQUFvQixDQUFDUyxTQUFyQixHQUFpQyxFQUFqQztBQUNBLFFBQU1nRixLQUFLLEdBQUdMLFFBQVEsQ0FBQ0ssS0FBdkIsQ0FaOEIsQ0FjOUI7O0FBQ0F2RixJQUFBQSxDQUFDLENBQUN3RixJQUFGLENBQU9ELEtBQVAsRUFBYyxVQUFDRSxLQUFELEVBQVFDLElBQVIsRUFBaUI7QUFFM0IsVUFBSVAsTUFBTSxLQUFLLEVBQWYsRUFBbUI7QUFDZk8sUUFBQUEsSUFBSSxXQUFKLEdBQWdCUCxNQUFNLEtBQUtPLElBQUksQ0FBQ0MsSUFBaEM7QUFDSCxPQUowQixDQUszQjs7O0FBQ0E3RixNQUFBQSxvQkFBb0IsQ0FBQ1MsU0FBckIsQ0FBK0JxRixJQUEvQixDQUFvQztBQUNoQ0MsUUFBQUEsSUFBSSxZQUFLSixLQUFMLGVBQWVDLElBQUksQ0FBQ0ksSUFBcEIsTUFENEI7QUFFaENDLFFBQUFBLEtBQUssRUFBRUwsSUFBSSxDQUFDQyxJQUZvQjtBQUdoQ0ssUUFBQUEsUUFBUSxFQUFFTixJQUFJO0FBSGtCLE9BQXBDO0FBS0gsS0FYRCxFQWY4QixDQTRCOUI7O0FBQ0E1RixJQUFBQSxvQkFBb0IsQ0FBQ1EsbUJBQXJCLENBQXlDWSxRQUF6QyxDQUFrRCxlQUFsRCxFQUFtRXBCLG9CQUFvQixDQUFDUyxTQUF4RjtBQUNILEdBaFB3Qjs7QUFrUHpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0ljLEVBQUFBLGNBdFB5QiwwQkFzUFYwRSxLQXRQVSxFQXNQSDtBQUNsQixRQUFJQSxLQUFLLENBQUNWLE1BQU4sS0FBaUIsQ0FBckIsRUFBd0I7QUFDcEI7QUFDSDs7QUFDRHZGLElBQUFBLG9CQUFvQixDQUFDWSxRQUFyQixDQUE4QndCLElBQTlCLENBQW1DLFdBQW5DLEVBQWdELFVBQWhELEVBQTRENkQsS0FBNUQ7QUFDQWpHLElBQUFBLG9CQUFvQixDQUFDa0MsbUJBQXJCO0FBQ0gsR0E1UHdCOztBQThQekI7QUFDSjtBQUNBO0FBQ0lBLEVBQUFBLG1CQWpReUIsaUNBaVFIO0FBQ2xCLFFBQU1pRSxNQUFNLEdBQUduRyxvQkFBb0IsQ0FBQ1ksUUFBckIsQ0FBOEJ3QixJQUE5QixDQUFtQyxZQUFuQyxDQUFmO0FBQ0FSLElBQUFBLE1BQU0sQ0FBQ3dFLG9CQUFQLENBQTRCRCxNQUE1QixFQUFvQ25HLG9CQUFvQixDQUFDcUcsZUFBekQ7QUFDSCxHQXBRd0I7O0FBc1F6QjtBQUNKO0FBQ0E7QUFDQTtBQUNJQSxFQUFBQSxlQTFReUIsMkJBMFFUbEUsSUExUVMsRUEwUUg7QUFDbEJuQyxJQUFBQSxvQkFBb0IsQ0FBQ08sTUFBckIsQ0FBNEIrRixVQUE1QixHQUF5Q0MsUUFBekMsQ0FBa0RwRSxJQUFJLENBQUNxRSxPQUF2RDtBQUNBLFFBQU1DLEdBQUcsR0FBR3pHLG9CQUFvQixDQUFDTyxNQUFyQixDQUE0Qm9FLE9BQTVCLENBQW9DK0IsU0FBcEMsS0FBa0QsQ0FBOUQ7QUFDQSxRQUFNQyxNQUFNLEdBQUczRyxvQkFBb0IsQ0FBQ08sTUFBckIsQ0FBNEJvRSxPQUE1QixDQUFvQ2lDLE9BQXBDLENBQTRDSCxHQUE1QyxFQUFpRGxCLE1BQWhFLENBSGtCLENBR3NEOztBQUN4RXZGLElBQUFBLG9CQUFvQixDQUFDTyxNQUFyQixDQUE0QnNHLFFBQTVCLENBQXFDSixHQUFHLEdBQUcsQ0FBM0MsRUFBOENFLE1BQTlDO0FBQ0EzRyxJQUFBQSxvQkFBb0IsQ0FBQ1csT0FBckIsQ0FBNkJnQyxXQUE3QixDQUF5QyxRQUF6QztBQUNILEdBaFJ3Qjs7QUFrUnpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lKLEVBQUFBLGNBdFJ5QiwwQkFzUlY2QyxRQXRSVSxFQXNSQTtBQUNyQixRQUFJQSxRQUFRLEtBQUssS0FBakIsRUFBd0I7QUFDcEJwRSxNQUFBQSxNQUFNLENBQUM4RixRQUFQLEdBQWtCMUIsUUFBUSxDQUFDOUMsUUFBM0I7QUFDSDtBQUNKLEdBMVJ3Qjs7QUE0UnpCO0FBQ0o7QUFDQTtBQUNJUyxFQUFBQSx1QkEvUnlCLHFDQStSQTtBQUNyQixRQUFNdUMsUUFBUSxHQUFHdEYsb0JBQW9CLENBQUNZLFFBQXJCLENBQThCd0IsSUFBOUIsQ0FBbUMsV0FBbkMsRUFBZ0QsVUFBaEQsQ0FBakI7O0FBQ0EsUUFBSWtELFFBQVEsQ0FBQ0MsTUFBVCxHQUFnQixDQUFwQixFQUFzQjtBQUNsQjNELE1BQUFBLE1BQU0sQ0FBQ21GLGVBQVAsQ0FBdUJ6QixRQUF2QixFQUFpQ3RGLG9CQUFvQixDQUFDZ0gsaUJBQXREO0FBQ0g7QUFDSixHQXBTd0I7O0FBc1N6QjtBQUNKO0FBQ0E7QUFDQTtBQUNJQSxFQUFBQSxpQkExU3lCLDZCQTBTUDVCLFFBMVNPLEVBMFNFO0FBQ3ZCLFFBQUlBLFFBQVEsQ0FBQzZCLE1BQVQsS0FBa0IsS0FBbEIsSUFBMkI3QixRQUFRLENBQUM4QixRQUFULEtBQXNCMUMsU0FBckQsRUFBZ0U7QUFDNUQyQyxNQUFBQSxXQUFXLENBQUNDLGVBQVosQ0FBNEJoQyxRQUFRLENBQUM4QixRQUFyQztBQUNILEtBRkQsTUFFTztBQUNIbEgsTUFBQUEsb0JBQW9CLENBQUNrQyxtQkFBckI7QUFDSDtBQUNKO0FBaFR3QixDQUE3QixDLENBbVRBOztBQUNBaEMsQ0FBQyxDQUFDa0QsUUFBRCxDQUFELENBQVlpRSxLQUFaLENBQWtCLFlBQU07QUFDcEJySCxFQUFBQSxvQkFBb0IsQ0FBQ2MsVUFBckI7QUFDSCxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCDCqSAyMDE3LTIwMjMgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbi8qIGdsb2JhbCBhY2UsIFBieEFwaSwgdXBkYXRlTG9nVmlld1dvcmtlciwgQWNlLCBVc2VyTWVzc2FnZSAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHN5c3RlbSBkaWFnbm9zdGljIGxvZ3Mgb2JqZWN0LlxuICpcbiAqIEBtb2R1bGUgc3lzdGVtRGlhZ25vc3RpY0xvZ3NcbiAqL1xuY29uc3Qgc3lzdGVtRGlhZ25vc3RpY0xvZ3MgPSB7XG4gICAgLyoqXG4gICAgICogalF1ZXJ5IG9iamVjdCBmb3IgdGhlIFwiU2hvdyBMYXN0IExvZ1wiIGJ1dHRvbi5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRzaG93QnRuOiAkKCcjc2hvdy1sYXN0LWxvZycpLFxuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IG9iamVjdCBmb3IgdGhlIFwiRG93bmxvYWQgRmlsZVwiIGJ1dHRvbi5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRkb3dubG9hZEJ0bjogJCgnI2Rvd25sb2FkLWZpbGUnKSxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBcIlNob3cgTGFzdCBMb2cgKEF1dG8pXCIgYnV0dG9uLlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgJHNob3dBdXRvQnRuOiAkKCcjc2hvdy1sYXN0LWxvZy1hdXRvJyksXG5cbiAgICAvKipcbiAgICAgKiBqUXVlcnkgb2JqZWN0IGZvciB0aGUgXCJFcmFzZSBjdXJyZW50IGZpbGUgY29udGVudFwiIGJ1dHRvbi5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRlcmFzZUJ0bjogJCgnI2VyYXNlLWZpbGUnKSxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBsb2cgY29udGVudC5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRsb2dDb250ZW50OiAkKCcjbG9nLWNvbnRlbnQtcmVhZG9ubHknKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB2aWV3ZXIgZm9yIGRpc3BsYXlpbmcgdGhlIGxvZyBjb250ZW50LlxuICAgICAqIEB0eXBlIHtBY2V9XG4gICAgICovXG4gICAgdmlld2VyOiAnJyxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBmaWxlIHNlbGVjdCBkcm9wZG93bi5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRmaWxlU2VsZWN0RHJvcERvd246ICQoJyNzeXN0ZW0tZGlhZ25vc3RpYy1mb3JtIC5maWxlbmFtZXMtc2VsZWN0JyksXG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBsb2cgaXRlbXMuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIGxvZ3NJdGVtczogW10sXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGxvZyBpdGVtLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgZGVmYXVsdExvZ0l0ZW06IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZGltbWVyLlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgJGRpbW1lcjogJCgnI2dldC1sb2dzLWRpbW1lcicpLFxuXG4gICAgLyoqXG4gICAgICogalF1ZXJ5IG9iamVjdCBmb3IgdGhlIGZvcm0uXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkZm9ybU9iajogJCgnI3N5c3RlbS1kaWFnbm9zdGljLWZvcm0nKSxcblxuICAgIC8qKlxuICAgICAqIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBmaWxlbmFtZS5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRmaWxlTmFtZTogJCgnI3N5c3RlbS1kaWFnbm9zdGljLWZvcm0gLmZpbGVuYW1lJyksXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgc3lzdGVtIGRpYWdub3N0aWMgbG9ncy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBhY2VIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAyNTA7XG5cbiAgICAgICAgLy8gU2V0IHRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGUgbG9nIGNvbnRhaW5lclxuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kZGltbWVyLmNsb3Nlc3QoJ2RpdicpLmNzcygnbWluLWhlaWdodCcsIGAke2FjZUhlaWdodH1weGApO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGRyb3Bkb3duIG1lbnUgZm9yIGxvZyBmaWxlc1xuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kZmlsZVNlbGVjdERyb3BEb3duLmRyb3Bkb3duKHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHN5c3RlbURpYWdub3N0aWNMb2dzLmxvZ3NJdGVtcyxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogc3lzdGVtRGlhZ25vc3RpY0xvZ3MuY2JPbkNoYW5nZUZpbGUsXG4gICAgICAgICAgICAgICAgaWdub3JlQ2FzZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmdWxsVGV4dFNlYXJjaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmb3JjZVNlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIEFDRSBlZGl0b3IgZm9yIGxvZyBjb250ZW50XG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLmluaXRpYWxpemVBY2UoKTtcblxuICAgICAgICAvLyBGZXRjaCB0aGUgbGlzdCBvZiBsb2cgZmlsZXNcbiAgICAgICAgUGJ4QXBpLlN5c2xvZ0dldExvZ3NMaXN0KHN5c3RlbURpYWdub3N0aWNMb2dzLmNiRm9ybWF0RHJvcGRvd25SZXN1bHRzKTtcblxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lciBmb3IgXCJTaG93IExvZ1wiIGJ1dHRvbiBjbGlja1xuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kc2hvd0J0bi5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3MudXBkYXRlTG9nRnJvbVNlcnZlcigpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lciBmb3IgXCJEb3dubG9hZCBMb2dcIiBidXR0b24gY2xpY2tcbiAgICAgICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3MuJGRvd25sb2FkQnRuLm9uKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gc3lzdGVtRGlhZ25vc3RpY0xvZ3MuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuICAgICAgICAgICAgUGJ4QXBpLlN5c2xvZ0Rvd25sb2FkTG9nRmlsZShkYXRhLmZpbGVuYW1lLCBzeXN0ZW1EaWFnbm9zdGljTG9ncy5jYkRvd25sb2FkRmlsZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEV2ZW50IGxpc3RlbmVyIGZvciBcIkF1dG8gUmVmcmVzaFwiIGJ1dHRvbiBjbGlja1xuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kc2hvd0F1dG9CdG4ub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICRyZWxvYWRJY29uID0gc3lzdGVtRGlhZ25vc3RpY0xvZ3MuJHNob3dBdXRvQnRuLmZpbmQoJ2kucmVmcmVzaCcpO1xuICAgICAgICAgICAgaWYgKCRyZWxvYWRJY29uLmhhc0NsYXNzKCdsb2FkaW5nJykpIHtcbiAgICAgICAgICAgICAgICAkcmVsb2FkSWNvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUxvZ1ZpZXdXb3JrZXIuc3RvcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkcmVsb2FkSWNvbi5hZGRDbGFzcygnbG9hZGluZycpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUxvZ1ZpZXdXb3JrZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lciBmb3IgdGhlIFwiRXJhc2UgZmlsZVwiIGJ1dHRvbiBjbGlja1xuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kZXJhc2VCdG4ub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLmVyYXNlQ3VycmVudEZpbGVDb250ZW50KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEV2ZW50IGxpc3RlbmVyIGZvciBFbnRlciBrZXlwcmVzcyBvbiBpbnB1dCBmaWVsZHNcbiAgICAgICAgJCgnaW5wdXQnKS5rZXl1cCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLnVwZGF0ZUxvZ0Zyb21TZXJ2ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXIgZm9yIEZ1bGxzY3JlZW4gYnV0dG9uIGNsaWNrXG4gICAgICAgICQoJyNmdWxsc2NyZWVuLXRvZ2dsZScpLm9uKCdjbGljaycsIHN5c3RlbURpYWdub3N0aWNMb2dzLnRvZ2dsZUZ1bGxTY3JlZW4pO1xuXG4gICAgICAgIC8vIExpc3RlbmluZyBmb3IgdGhlIGZ1bGxzY3JlZW4gY2hhbmdlIGV2ZW50XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBzeXN0ZW1EaWFnbm9zdGljTG9ncy5hZGp1c3RMb2dIZWlnaHQpO1xuXG4gICAgICAgIC8vIEluaXRpYWwgaGVpZ2h0IGNhbGN1bGF0aW9uXG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLmFkanVzdExvZ0hlaWdodCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBmdWxsLXNjcmVlbiBtb2RlIG9mIHRoZSAnc3lzdGVtLWxvZ3Mtc2VnbWVudCcgZWxlbWVudC5cbiAgICAgKiBJZiB0aGUgZWxlbWVudCBpcyBub3QgaW4gZnVsbC1zY3JlZW4gbW9kZSwgaXQgcmVxdWVzdHMgZnVsbC1zY3JlZW4gbW9kZS5cbiAgICAgKiBJZiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGluIGZ1bGwtc2NyZWVuIG1vZGUsIGl0IGV4aXRzIGZ1bGwtc2NyZWVuIG1vZGUuXG4gICAgICogTG9ncyBhbiBlcnJvciBtZXNzYWdlIHRvIHRoZSBjb25zb2xlIGlmIHRoZXJlIGlzIGFuIGlzc3VlIGVuYWJsaW5nIGZ1bGwtc2NyZWVuIG1vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHRvZ2dsZUZ1bGxTY3JlZW4oKSB7XG4gICAgICAgIGNvbnN0IGxvZ0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzeXN0ZW0tbG9ncy1zZWdtZW50Jyk7XG5cbiAgICAgICAgaWYgKCFkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCkge1xuICAgICAgICAgICAgbG9nQ29udGFpbmVyLnJlcXVlc3RGdWxsc2NyZWVuKCkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGF0dGVtcHRpbmcgdG8gZW5hYmxlIGZ1bGwtc2NyZWVuIG1vZGU6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gYWRqdXN0IHRoZSBoZWlnaHQgb2YgdGhlIGxvZ3MgZGVwZW5kaW5nIG9uIHRoZSBzY3JlZW4gbW9kZS5cbiAgICAgKi9cbiAgICBhZGp1c3RMb2dIZWlnaHQoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGFjZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHN5c3RlbURpYWdub3N0aWNMb2dzLiRsb2dDb250ZW50Lm9mZnNldCgpLnRvcCAtIDI1O1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgZnVsbHNjcmVlbiBtb2RlIGlzIGFjdGl2ZVxuICAgICAgICAgICAgICAgIGFjZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgdGhlIHNpemUgb2YgdGhlIEFDRSBlZGl0b3JcbiAgICAgICAgICAgICQoJy5sb2ctY29udGVudC1yZWFkb25seScpLmNzcygnbWluLWhlaWdodCcsICBgJHthY2VIZWlnaHR9cHhgKTtcbiAgICAgICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLnZpZXdlci5yZXNpemUoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBBQ0UgZWRpdG9yIGZvciBsb2cgdmlld2luZy5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplQWNlKCkge1xuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy52aWV3ZXIgPSBhY2UuZWRpdCgnbG9nLWNvbnRlbnQtcmVhZG9ubHknKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgSnVsaWEgbW9kZSBpcyBhdmFpbGFibGVcbiAgICAgICAgY29uc3QganVsaWEgPSBhY2UucmVxdWlyZSgnYWNlL21vZGUvanVsaWEnKTtcbiAgICAgICAgaWYgKGp1bGlhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFNldCB0aGUgbW9kZSB0byBKdWxpYSBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGNvbnN0IEluaU1vZGUgPSBqdWxpYS5Nb2RlO1xuICAgICAgICAgICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3Mudmlld2VyLnNlc3Npb24uc2V0TW9kZShuZXcgSW5pTW9kZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgdGhlbWUgYW5kIG9wdGlvbnMgZm9yIHRoZSBBQ0UgZWRpdG9yXG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLnZpZXdlci5zZXRUaGVtZSgnYWNlL3RoZW1lL21vbm9rYWknKTtcbiAgICAgICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3Mudmlld2VyLnJlbmRlcmVyLnNldFNob3dHdXR0ZXIoZmFsc2UpO1xuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy52aWV3ZXIuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICBzaG93TGluZU51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgc2hvd1ByaW50TWFyZ2luOiBmYWxzZSxcbiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0byBmb3JtYXQgdGhlIGRyb3Bkb3duIG1lbnUgc3RydWN0dXJlIGJhc2VkIG9uIHRoZSByZXNwb25zZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2UgZGF0YS5cbiAgICAgKi9cbiAgICBjYkZvcm1hdERyb3Bkb3duUmVzdWx0cyhyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBkZWZhdWx0IHZhbHVlIHNldCBmb3IgdGhlIGZpbGVuYW1lIGlucHV0IGZpZWxkXG4gICAgICAgIGxldCBkZWZWYWwgPSAnJztcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnZmlsZW5hbWUnKTtcbiAgICAgICAgaWYgKHN5c3RlbURpYWdub3N0aWNMb2dzLmxvZ3NJdGVtcy5sZW5ndGggPT09IDAgJiYgZmlsZU5hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICBkZWZWYWwgPSBmaWxlTmFtZS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy5sb2dzSXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgZmlsZXMgPSByZXNwb25zZS5maWxlcztcblxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBmaWxlIGFuZCBjcmVhdGUgdGhlIGRyb3Bkb3duIG1lbnUgb3B0aW9uc1xuICAgICAgICAkLmVhY2goZmlsZXMsIChpbmRleCwgaXRlbSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoZGVmVmFsICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGl0ZW0uZGVmYXVsdCA9IChkZWZWYWwgPT09IGl0ZW0ucGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDcmVhdGUgYW4gb3B0aW9uIG9iamVjdCBmb3IgZWFjaCBmaWxlXG4gICAgICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy5sb2dzSXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogYCR7aW5kZXh9ICgke2l0ZW0uc2l6ZX0pYCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5wYXRoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBpdGVtLmRlZmF1bHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGRyb3Bkb3duIG1lbnUgdmFsdWVzIHdpdGggdGhlIG5ld2x5IGZvcm1hdHRlZCBvcHRpb25zXG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLiRmaWxlU2VsZWN0RHJvcERvd24uZHJvcGRvd24oJ2NoYW5nZSB2YWx1ZXMnLCBzeXN0ZW1EaWFnbm9zdGljTG9ncy5sb2dzSXRlbXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBhZnRlciBjaGFuZ2luZyB0aGUgbG9nIGZpbGUgaW4gdGhlIHNlbGVjdCBkcm9wZG93bi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAgICovXG4gICAgY2JPbkNoYW5nZUZpbGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLiRmb3JtT2JqLmZvcm0oJ3NldCB2YWx1ZScsICdmaWxlbmFtZScsIHZhbHVlKTtcbiAgICAgICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3MudXBkYXRlTG9nRnJvbVNlcnZlcigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBsb2cgZmlsZSBjb250ZW50IGZyb20gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICB1cGRhdGVMb2dGcm9tU2VydmVyKCkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWVzJyk7XG4gICAgICAgIFBieEFwaS5TeXNsb2dHZXRMb2dGcm9tRmlsZShwYXJhbXMsIHN5c3RlbURpYWdub3N0aWNMb2dzLmNiVXBkYXRlTG9nVGV4dCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvZyB2aWV3LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIGxvZyBkYXRhLlxuICAgICAqL1xuICAgIGNiVXBkYXRlTG9nVGV4dChkYXRhKSB7XG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLnZpZXdlci5nZXRTZXNzaW9uKCkuc2V0VmFsdWUoZGF0YS5jb250ZW50KTtcbiAgICAgICAgY29uc3Qgcm93ID0gc3lzdGVtRGlhZ25vc3RpY0xvZ3Mudmlld2VyLnNlc3Npb24uZ2V0TGVuZ3RoKCkgLSAxO1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBzeXN0ZW1EaWFnbm9zdGljTG9ncy52aWV3ZXIuc2Vzc2lvbi5nZXRMaW5lKHJvdykubGVuZ3RoOyAvLyBvciBzaW1wbHkgSW5maW5pdHlcbiAgICAgICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3Mudmlld2VyLmdvdG9MaW5lKHJvdyArIDEsIGNvbHVtbik7XG4gICAgICAgIHN5c3RlbURpYWdub3N0aWNMb2dzLiRkaW1tZXIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBhZnRlciBjbGlja2luZyB0aGUgXCJEb3dubG9hZCBGaWxlXCIgYnV0dG9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSAtIFRoZSByZXNwb25zZSBkYXRhLlxuICAgICAqL1xuICAgIGNiRG93bmxvYWRGaWxlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHJlc3BvbnNlLmZpbGVuYW1lO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGFmdGVyIGNsaWNraW5nIHRoZSBcIkVyYXNlIEZpbGVcIiBidXR0b24uXG4gICAgICovXG4gICAgZXJhc2VDdXJyZW50RmlsZUNvbnRlbnQoKXtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBzeXN0ZW1EaWFnbm9zdGljTG9ncy4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnZmlsZW5hbWUnKTtcbiAgICAgICAgaWYgKGZpbGVOYW1lLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIFBieEFwaS5TeXNsb2dFcmFzZUZpbGUoZmlsZU5hbWUsIHN5c3RlbURpYWdub3N0aWNMb2dzLmNiQWZ0ZXJGaWxlRXJhc2VkKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGFmdGVyIGNsaWNraW5nIHRoZSBcIkVyYXNlIEZpbGVcIiBidXR0b24gYW5kIGNhbGxpbmcgUkVTVCBBUEkgY29tbWFuZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSAtIFRoZSByZXNwb25zZSBkYXRhLlxuICAgICAqL1xuICAgIGNiQWZ0ZXJGaWxlRXJhc2VkKHJlc3BvbnNlKXtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdD09PWZhbHNlICYmIHJlc3BvbnNlLm1lc3NhZ2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhyZXNwb25zZS5tZXNzYWdlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzeXN0ZW1EaWFnbm9zdGljTG9ncy51cGRhdGVMb2dGcm9tU2VydmVyKCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcblxuLy8gV2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHksIGluaXRpYWxpemUgdGhlIHNob3cgc3lzdGVtIGxvZ3MgdGFiXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICAgc3lzdGVtRGlhZ25vc3RpY0xvZ3MuaW5pdGlhbGl6ZSgpO1xufSk7Il19