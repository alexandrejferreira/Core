"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global sessionStorage, PbxApi */
var archivePackingCheckWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  filename: '',
  $progress: $('#capture-log-dimmer span.progress'),
  initialize: function initialize(filename) {
    archivePackingCheckWorker.filename = filename;
    archivePackingCheckWorker.restartWorker(filename);
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(archivePackingCheckWorker.timeoutHandle);
    archivePackingCheckWorker.worker();
  },
  worker: function worker() {
    PbxApi.SyslogDownloadLogsArchive(archivePackingCheckWorker.filename, archivePackingCheckWorker.cbAfterResponse);
    archivePackingCheckWorker.timeoutHandle = window.setTimeout(archivePackingCheckWorker.worker, archivePackingCheckWorker.timeOut);
  },
  cbAfterResponse: function cbAfterResponse(response) {
    if (archivePackingCheckWorker.errorCounts > 50) {
      UserMessage.showMultiString(globalTranslate.sd_DownloadPcapFileError);
      systemDiagnosticCapture.$stopBtn.removeClass('disabled loading').addClass('disabled');
      systemDiagnosticCapture.$startBtn.removeClass('disabled loading');
      window.clearTimeout(archivePackingCheckWorker.timeoutHandle);
    }

    if (response === undefined || Object.keys(response).length === 0) {
      archivePackingCheckWorker.errorCounts += 1;
      return;
    }

    if (response.status === 'READY') {
      systemDiagnosticCapture.$stopBtn.removeClass('disabled loading').addClass('disabled');
      systemDiagnosticCapture.$startBtn.removeClass('disabled loading');
      systemDiagnosticCapture.$downloadBtn.removeClass('disabled loading');
      window.location = response.filename;
      window.clearTimeout(archivePackingCheckWorker.timeoutHandle);
      systemDiagnosticCapture.$dimmer.removeClass('active');
    } else if (response.status === 'PREPARING') {
      archivePackingCheckWorker.errorCounts = 0;
      archivePackingCheckWorker.$progress.text("".concat(response.progress, "%"));
    } else {
      archivePackingCheckWorker.errorCounts += 1;
    }
  }
};
var systemDiagnosticCapture = {
  $startBtn: $('#start-capture-button'),
  $downloadBtn: $('#download-logs-button'),
  $stopBtn: $('#stop-capture-button'),
  $showBtn: $('#show-last-log'),
  $dimmer: $('#capture-log-dimmer'),
  initialize: function initialize() {
    var segmentHeight = window.innerHeight - 300;
    $(window).load(function () {
      systemDiagnosticCapture.$dimmer.closest('div').css('min-height', "".concat(segmentHeight, "px"));
    });

    if (sessionStorage.getItem('PCAPCaptureStatus') === 'started') {
      systemDiagnosticCapture.$startBtn.addClass('disabled loading');
      systemDiagnosticCapture.$stopBtn.removeClass('disabled');
    } else {
      systemDiagnosticCapture.$startBtn.removeClass('disabled loading');
      systemDiagnosticCapture.$stopBtn.addClass('disabled');
    }

    systemDiagnosticCapture.$startBtn.on('click', function (e) {
      e.preventDefault();
      systemDiagnosticCapture.$startBtn.addClass('disabled loading');
      systemDiagnosticCapture.$stopBtn.removeClass('disabled');
      PbxApi.SyslogStartLogsCapture(systemDiagnosticCapture.cbAfterStartCapture);
    });
    systemDiagnosticCapture.$stopBtn.on('click', function (e) {
      e.preventDefault();
      systemDiagnosticCapture.$startBtn.removeClass('loading');
      systemDiagnosticCapture.$stopBtn.addClass('loading');
      systemDiagnosticCapture.$dimmer.addClass('active');
      PbxApi.SyslogStopLogsCapture(systemDiagnosticCapture.cbAfterStopCapture);
    });
    systemDiagnosticCapture.$downloadBtn.on('click', function (e) {
      e.preventDefault();
      systemDiagnosticCapture.$downloadBtn.addClass('disabled loading');
      systemDiagnosticCapture.$dimmer.addClass('active');
      PbxApi.SyslogPrepareLog(systemDiagnosticCapture.cbAfterDownloadCapture);
    });
  },

  /**
   *  Callback after push start logs collect button
   * @param response
   */
  cbAfterStartCapture: function cbAfterStartCapture(response) {
    if (response !== false) {
      sessionStorage.setItem('PCAPCaptureStatus', 'started');
      setTimeout(function () {
        sessionStorage.setItem('PCAPCaptureStatus', 'stopped');
      }, 300000);
    }
  },

  /**
   *  Callback after push start logs collect button
   * @param response
   */
  cbAfterDownloadCapture: function cbAfterDownloadCapture(response) {
    if (response !== false) {
      archivePackingCheckWorker.initialize(response.filename);
    }
  },

  /**
   * Callback after push stop logs collect button
   * @param response
   */
  cbAfterStopCapture: function cbAfterStopCapture(response) {
    if (response !== false) {
      archivePackingCheckWorker.initialize(response.filename);
    }
  }
};
$(document).ready(function () {
  systemDiagnosticCapture.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TeXN0ZW1EaWFnbm9zdGljL3N5c3RlbS1kaWFnbm9zdGljLWluZGV4LWxvZ2NhcHR1cmUuanMiXSwibmFtZXMiOlsiYXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlciIsInRpbWVPdXQiLCJ0aW1lT3V0SGFuZGxlIiwiZXJyb3JDb3VudHMiLCJmaWxlbmFtZSIsIiRwcm9ncmVzcyIsIiQiLCJpbml0aWFsaXplIiwicmVzdGFydFdvcmtlciIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJ3b3JrZXIiLCJQYnhBcGkiLCJTeXNsb2dEb3dubG9hZExvZ3NBcmNoaXZlIiwiY2JBZnRlclJlc3BvbnNlIiwic2V0VGltZW91dCIsInJlc3BvbnNlIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJnbG9iYWxUcmFuc2xhdGUiLCJzZF9Eb3dubG9hZFBjYXBGaWxlRXJyb3IiLCJzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZSIsIiRzdG9wQnRuIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsIiRzdGFydEJ0biIsInVuZGVmaW5lZCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJzdGF0dXMiLCIkZG93bmxvYWRCdG4iLCJsb2NhdGlvbiIsIiRkaW1tZXIiLCJ0ZXh0IiwicHJvZ3Jlc3MiLCIkc2hvd0J0biIsInNlZ21lbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImxvYWQiLCJjbG9zZXN0IiwiY3NzIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJTeXNsb2dTdGFydExvZ3NDYXB0dXJlIiwiY2JBZnRlclN0YXJ0Q2FwdHVyZSIsIlN5c2xvZ1N0b3BMb2dzQ2FwdHVyZSIsImNiQWZ0ZXJTdG9wQ2FwdHVyZSIsIlN5c2xvZ1ByZXBhcmVMb2ciLCJjYkFmdGVyRG93bmxvYWRDYXB0dXJlIiwic2V0SXRlbSIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7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LGdCQUFQLENBQXdCOUIsdUJBQXVCLENBQUMrQixzQkFBaEQ7QUFDQSxLQUxEO0FBTUEsR0F0QzhCOztBQXVDL0I7QUFDRDtBQUNBO0FBQ0E7QUFDQ0osRUFBQUEsbUJBM0MrQiwrQkEyQ1hoQyxRQTNDVyxFQTJDRjtBQUM1QixRQUFJQSxRQUFRLEtBQUcsS0FBZixFQUFzQjtBQUNyQjBCLE1BQUFBLGNBQWMsQ0FBQ1csT0FBZixDQUF1QixtQkFBdkIsRUFBNEMsU0FBNUM7QUFDQXRDLE1BQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2hCMkIsUUFBQUEsY0FBYyxDQUFDVyxPQUFmLENBQXVCLG1CQUF2QixFQUE0QyxTQUE1QztBQUNBLE9BRlMsRUFFUCxNQUZPLENBQVY7QUFHQTtBQUNELEdBbEQ4Qjs7QUFtRC9CO0FBQ0Q7QUFDQTtBQUNBO0FBQ0NELEVBQUFBLHNCQXZEK0Isa0NBdURScEMsUUF2RFEsRUF1REM7QUFDL0IsUUFBSUEsUUFBUSxLQUFHLEtBQWYsRUFBcUI7QUFDcEJqQixNQUFBQSx5QkFBeUIsQ0FBQ08sVUFBMUIsQ0FBcUNVLFFBQVEsQ0FBQ2IsUUFBOUM7QUFDQTtBQUNELEdBM0Q4Qjs7QUE0RC9CO0FBQ0Q7QUFDQTtBQUNBO0FBQ0MrQyxFQUFBQSxrQkFoRStCLDhCQWdFWmxDLFFBaEVZLEVBZ0VIO0FBQzNCLFFBQUlBLFFBQVEsS0FBRyxLQUFmLEVBQXFCO0FBQ3BCakIsTUFBQUEseUJBQXlCLENBQUNPLFVBQTFCLENBQXFDVSxRQUFRLENBQUNiLFFBQTlDO0FBQ0E7QUFDRDtBQXBFOEIsQ0FBaEM7QUF1RUFFLENBQUMsQ0FBQ2lELFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDdkJsQyxFQUFBQSx1QkFBdUIsQ0FBQ2YsVUFBeEI7QUFDQSxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCDCqSAyMDE3LTIwMjMgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbi8qIGdsb2JhbCBzZXNzaW9uU3RvcmFnZSwgUGJ4QXBpICovXG5cbmNvbnN0IGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIgPSB7XG5cdHRpbWVPdXQ6IDMwMDAsXG5cdHRpbWVPdXRIYW5kbGU6ICcnLFxuXHRlcnJvckNvdW50czogMCxcblx0ZmlsZW5hbWU6ICcnLFxuXHQkcHJvZ3Jlc3M6ICQoJyNjYXB0dXJlLWxvZy1kaW1tZXIgc3Bhbi5wcm9ncmVzcycpLFxuXHRpbml0aWFsaXplKGZpbGVuYW1lKSB7XG5cdFx0YXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlci5maWxlbmFtZSA9IGZpbGVuYW1lO1xuXHRcdGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIucmVzdGFydFdvcmtlcihmaWxlbmFtZSk7XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChhcmNoaXZlUGFja2luZ0NoZWNrV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIud29ya2VyKCk7XG5cdH0sXG5cdHdvcmtlcigpIHtcblx0XHRQYnhBcGkuU3lzbG9nRG93bmxvYWRMb2dzQXJjaGl2ZShhcmNoaXZlUGFja2luZ0NoZWNrV29ya2VyLmZpbGVuYW1lLCBhcmNoaXZlUGFja2luZ0NoZWNrV29ya2VyLmNiQWZ0ZXJSZXNwb25zZSk7XG5cdFx0YXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoXG5cdFx0XHRhcmNoaXZlUGFja2luZ0NoZWNrV29ya2VyLndvcmtlcixcblx0XHRcdGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIudGltZU91dCxcblx0XHQpO1xuXHR9LFxuXHRjYkFmdGVyUmVzcG9uc2UocmVzcG9uc2UpIHtcblx0XHRpZiAoYXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyA+IDUwKSB7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoZ2xvYmFsVHJhbnNsYXRlLnNkX0Rvd25sb2FkUGNhcEZpbGVFcnJvcik7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RvcEJ0blxuXHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkIGxvYWRpbmcnKVxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RhcnRCdG4ucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkIGxvYWRpbmcnKTtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoYXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHR9XG5cdFx0aWYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0YXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyArPSAxO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnUkVBRFknKSB7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RvcEJ0blxuXHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkIGxvYWRpbmcnKVxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RhcnRCdG4ucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkIGxvYWRpbmcnKTtcblx0XHRcdHN5c3RlbURpYWdub3N0aWNDYXB0dXJlLiRkb3dubG9hZEJ0bi5yZW1vdmVDbGFzcygnZGlzYWJsZWQgbG9hZGluZycpO1xuXHRcdFx0d2luZG93LmxvY2F0aW9uID0gcmVzcG9uc2UuZmlsZW5hbWU7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kZGltbWVyLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gJ1BSRVBBUklORycpIHtcblx0XHRcdGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPSAwO1xuXHRcdFx0YXJjaGl2ZVBhY2tpbmdDaGVja1dvcmtlci4kcHJvZ3Jlc3MudGV4dChgJHtyZXNwb25zZS5wcm9ncmVzc30lYCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFyY2hpdmVQYWNraW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgKz0gMTtcblx0XHR9XG5cdH0sXG59O1xuXG5jb25zdCBzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZSA9IHtcblx0JHN0YXJ0QnRuOiAkKCcjc3RhcnQtY2FwdHVyZS1idXR0b24nKSxcblx0JGRvd25sb2FkQnRuOiAkKCcjZG93bmxvYWQtbG9ncy1idXR0b24nKSxcblx0JHN0b3BCdG46ICQoJyNzdG9wLWNhcHR1cmUtYnV0dG9uJyksXG5cdCRzaG93QnRuOiAkKCcjc2hvdy1sYXN0LWxvZycpLFxuXHQkZGltbWVyOiAgJCgnI2NhcHR1cmUtbG9nLWRpbW1lcicpLFxuXHRpbml0aWFsaXplKCkge1xuXHRcdGNvbnN0IHNlZ21lbnRIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQtMzAwO1xuXHRcdCQod2luZG93KS5sb2FkKGZ1bmN0aW9uKCkge1xuXHRcdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJGRpbW1lci5jbG9zZXN0KCdkaXYnKS5jc3MoJ21pbi1oZWlnaHQnLCBgJHtzZWdtZW50SGVpZ2h0fXB4YCk7XG5cdFx0fSk7XG5cdFx0aWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ1BDQVBDYXB0dXJlU3RhdHVzJykgPT09ICdzdGFydGVkJykge1xuXHRcdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJHN0YXJ0QnRuLmFkZENsYXNzKCdkaXNhYmxlZCBsb2FkaW5nJyk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RvcEJ0bi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJHN0YXJ0QnRuLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCBsb2FkaW5nJyk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RvcEJ0bi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHR9XG5cdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJHN0YXJ0QnRuLm9uKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kc3RhcnRCdG4uYWRkQ2xhc3MoJ2Rpc2FibGVkIGxvYWRpbmcnKTtcblx0XHRcdHN5c3RlbURpYWdub3N0aWNDYXB0dXJlLiRzdG9wQnRuLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuXHRcdFx0UGJ4QXBpLlN5c2xvZ1N0YXJ0TG9nc0NhcHR1cmUoc3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuY2JBZnRlclN0YXJ0Q2FwdHVyZSk7XG5cdFx0fSk7XG5cdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJHN0b3BCdG4ub24oJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHN5c3RlbURpYWdub3N0aWNDYXB0dXJlLiRzdGFydEJ0bi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJHN0b3BCdG4uYWRkQ2xhc3MoJ2xvYWRpbmcnKTtcblx0XHRcdHN5c3RlbURpYWdub3N0aWNDYXB0dXJlLiRkaW1tZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0UGJ4QXBpLlN5c2xvZ1N0b3BMb2dzQ2FwdHVyZShzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS5jYkFmdGVyU3RvcENhcHR1cmUpO1xuXG5cdFx0fSk7XG5cdFx0c3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuJGRvd25sb2FkQnRuLm9uKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS4kZG93bmxvYWRCdG4uYWRkQ2xhc3MoJ2Rpc2FibGVkIGxvYWRpbmcnKTtcblx0XHRcdHN5c3RlbURpYWdub3N0aWNDYXB0dXJlLiRkaW1tZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0UGJ4QXBpLlN5c2xvZ1ByZXBhcmVMb2coc3lzdGVtRGlhZ25vc3RpY0NhcHR1cmUuY2JBZnRlckRvd25sb2FkQ2FwdHVyZSk7XG5cdFx0fSk7XG5cdH0sXG5cdC8qKlxuXHQgKiAgQ2FsbGJhY2sgYWZ0ZXIgcHVzaCBzdGFydCBsb2dzIGNvbGxlY3QgYnV0dG9uXG5cdCAqIEBwYXJhbSByZXNwb25zZVxuXHQgKi9cblx0Y2JBZnRlclN0YXJ0Q2FwdHVyZShyZXNwb25zZSl7XG5cdFx0aWYgKHJlc3BvbnNlIT09ZmFsc2UpIHtcblx0XHRcdHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ1BDQVBDYXB0dXJlU3RhdHVzJywgJ3N0YXJ0ZWQnKTtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdQQ0FQQ2FwdHVyZVN0YXR1cycsICdzdG9wcGVkJyk7XG5cdFx0XHR9LCAzMDAwMDApO1xuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqICBDYWxsYmFjayBhZnRlciBwdXNoIHN0YXJ0IGxvZ3MgY29sbGVjdCBidXR0b25cblx0ICogQHBhcmFtIHJlc3BvbnNlXG5cdCAqL1xuXHRjYkFmdGVyRG93bmxvYWRDYXB0dXJlKHJlc3BvbnNlKXtcblx0XHRpZiAocmVzcG9uc2UhPT1mYWxzZSl7XG5cdFx0XHRhcmNoaXZlUGFja2luZ0NoZWNrV29ya2VyLmluaXRpYWxpemUocmVzcG9uc2UuZmlsZW5hbWUpO1xuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIENhbGxiYWNrIGFmdGVyIHB1c2ggc3RvcCBsb2dzIGNvbGxlY3QgYnV0dG9uXG5cdCAqIEBwYXJhbSByZXNwb25zZVxuXHQgKi9cblx0Y2JBZnRlclN0b3BDYXB0dXJlKHJlc3BvbnNlKXtcblx0XHRpZiAocmVzcG9uc2UhPT1mYWxzZSl7XG5cdFx0XHRhcmNoaXZlUGFja2luZ0NoZWNrV29ya2VyLmluaXRpYWxpemUocmVzcG9uc2UuZmlsZW5hbWUpO1xuXHRcdH1cblx0fVxufTtcblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHRzeXN0ZW1EaWFnbm9zdGljQ2FwdHVyZS5pbml0aWFsaXplKCk7XG59KTtcblxuIl19