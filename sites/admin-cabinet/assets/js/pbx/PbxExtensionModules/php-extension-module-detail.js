"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2024 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, PbxApi, globalTranslate */

/**
 * Represents the extension module popup.
 * @class extensionModuleDetail
 * @memberof module:PbxExtensionModules
 */
var extensionModuleDetail = {
  /**
   * jQuery object for the module detail form.
   * @type {jQuery}
   */
  $moduleDetailPopup: $('#module-details-template'),

  /**
   * jQuery object for the table rows which activate the popup.
   * @type {jQuery}
   */
  $popupActivator: $('tr.module-row'),

  /**
   * Initialize extensionModuleDetail
   */
  initialize: function initialize() {
    extensionModuleDetail.$popupActivator.on('click', function (event) {
      var params = {};
      params.uniqid = $(event).closest('tr').attr('id');
      PbxApi.ModulesGetModuleInfo(params, extensionModuleDetail.cbAfterGetModuleDetails);
    });
  },
  initializeSlider: function initializeSlider($popup) {
    $popup.find('.right').on('click', function () {
      $popup.find('.slide').siblings('.active:not(:last-of-type)').removeClass('active').next().addClass('active');
    });
    $popup.find('.left').on('click', function () {
      $popup.find('..slide').siblings('.active:not(:first-of-type)').removeClass('active').prev().addClass('active');
    });
  },
  cbOnShowTheDetailPopup: function cbOnShowTheDetailPopup(event) {
    // Initialize images slider
    $newPopup = $(event).closest('.module-details-modal-form');
    extensionModuleDetail.initializeSlider($newPopup); // Initialize tab menu

    $newPopup.find('.module-details-menu .item').tab();
  },
  cbAfterGetModuleDetails: function cbAfterGetModuleDetails(result, response) {
    if (result) {
      var repoData = response.data; // Module detail popup form

      var _$newPopup = extensionModuleDetail.$moduleDetailPopup.clone(true);

      _$newPopup.attr('id', repoData.uniqid); // Module name


      _$newPopup.find('.module-name').text(repoData.name); // Module logo


      _$newPopup.find('.module-logo').src(repoData.logotype); // Module uniqid


      _$newPopup.find('.module-id').text(repoData.uniqid); // Install last release button


      _$newPopup.find('.main-install-button').attr('data-uniqid', repoData.uniqid); // Total count of installations


      _$newPopup.find('.module-count-installed').html(repoData.downloads); // Last release version


      _$newPopup.find('.module-latest-release').text(repoData.releases[0].version); // Developer


      var developerView = extensionModuleDetail.prepareDeveloperView(repoData);

      _$newPopup.find('.module-publisher').html(developerView); // Commercial


      var commercialView = extensionModuleDetail.prepareCommercialView(repoData.commercial);

      _$newPopup.find('.module-commercial').html(commercialView); // Release size


      var sizeText = extensionModuleDetail.convertBytesToReadableFormat(repoData.releases[0].size);

      _$newPopup.find('.module-latest-release-size').text(sizeText); // Screenshots


      var screenshotsView = extensionModuleDetail.prepareScreenshotsView(repoData.screenshots);

      _$newPopup.find('.module-screenshots').html(screenshotsView); // Description


      var descriptionView = extensionModuleDetail.prepareDescriptionView(repoData);

      _$newPopup.find('.module-description').html(descriptionView); // Changelog


      var changelogView = extensionModuleDetail.prepareChangeLogView(repoData);

      _$newPopup.find('.module-changelog').html(changelogView); // Show the popup


      _$newPopup.popup({
        show: true,
        position: 'top center',
        closable: true,
        onShow: extensionModuleDetail.cbOnShowTheDetailPopup
      });
    }
  },
  convertBytesToReadableFormat: function convertBytesToReadableFormat(bytes) {
    var megabytes = bytes / (1024 * 1024);
    var roundedMegabytes = megabytes.toFixed(2);
    return "".concat(roundedMegabytes, " Mb");
  },
  prepareCommercialView: function prepareCommercialView(commercial) {
    if (commercial === '1') {
      return '<i class="ui donate icon"></i> ' + globalTranslate.ext_CommercialModule;
    }

    return '<i class="puzzle piece icon"></i> ' + globalTranslate.ext_FreeModule;
  },
  prepareScreenshotsView: function prepareScreenshotsView(screenshots) {
    var html = '<div class="ui container">\n' + '            <div class="ui text container slides">\n' + '                <i class="big left angle icon"></i>\n' + '                <i class="big right angle icon"></i>';
    $.each(screenshots, function (index, screenshot) {
      if (index > 0) {
        html += "<div class=\"slide\"><img src=\"".concat(screenshot.url, "\" alt=\"").concat(screenshot.name, "\"></div>");
      } else {
        html += "<div class=\"slide active\"><img src=\"".concat(screenshot.url, "\" alt=\"").concat(screenshot.name, "\"></div>");
      }
    });
    html += '</div></div>';
    return html;
  },
  prepareDescriptionView: function prepareDescriptionView(repoData) {
    var html = "<div class=\"ui header\">".concat(repoData.name, "</div>");
    html += "<p>".concat(repoData.description, "</p>");
    html += "<div class=\"ui header\">".concat(globalTranslate.ext_UsefulLinks, "</div>");
    html += '<ul class="ui list">';
    html += "<li class=\"item\"><a href=\"".concat(repoData.promo_link, "\" target=\"_blank\">").concat(globalTranslate.ext_ExternalDescription, "</a></li>");
    html += '</ul>';
    return html;
  },
  prepareDeveloperView: function prepareDeveloperView(repoData) {
    var html = '';
    html += "".concat(repoData.developer);
    return html;
  },
  prepareChangeLogView: function prepareChangeLogView(repoData) {
    var html = '';
    $.each(repoData.releases, function (index, release) {
      var sizeText = extensionModuleDetail.convertBytesToReadableFormat(release.size);
      html += "<div class=\"ui header\">".concat(release.version, "</div>");
      html += "<p>".concat(release.changelog, "</p>");
      html += "<a href=\"#\" class=\"ui labeled basic button download\"\n               data-uniqid = \"".concat(repoData.uniqid, "\"\n               data-id =\"").concat(release.releaseID, "\">\n                <i class=\"icon download blue\"></i>\n                ").concat(globalTranslate.ext_InstallModule, " (").concat(sizeText, ")\n            </a>");
    });
    return html;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,