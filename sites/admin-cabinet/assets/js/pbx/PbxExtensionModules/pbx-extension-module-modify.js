"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, Form, globalTranslate */

/**
 * Process common module settings
 *
 */
var pbxExtensionModuleModify = {
  $formObj: $('#pbx-extension-modify-form'),
  $backButton: $('#back-to-list-button'),
  $dropdown: $('#menu-group'),
  validateRules: {
    name: {
      identifier: 'caption',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.ext_ValidateCaptionEmpty
      }]
    }
  },
  initialize: function initialize() {
    $('#menu-group').dropdown();
    pbxExtensionModuleModify.initializeForm();
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = pbxExtensionModuleModify.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {
    window.location = window.location.href;
  },
  initializeForm: function initializeForm() {
    Form.$formObj = pbxExtensionModuleModify.$formObj;
    Form.url = "".concat(globalRootUrl, "pbx-extension-modules/saveModuleSettings");
    Form.validateRules = pbxExtensionModuleModify.validateRules;
    Form.cbBeforeSendForm = pbxExtensionModuleModify.cbBeforeSendForm;
    Form.cbAfterSendForm = pbxExtensionModuleModify.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  pbxExtensionModuleModify.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLW1vZGlmeS5qcyJdLCJuYW1lcyI6WyJwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkiLCIkZm9ybU9iaiIsIiQiLCIkYmFja0J1dHRvbiIsIiRkcm9wZG93biIsInZhbGlkYXRlUnVsZXMiLCJuYW1lIiwiaWRlbnRpZmllciIsInJ1bGVzIiwidHlwZSIsInByb21wdCIsImdsb2JhbFRyYW5zbGF0ZSIsImV4dF9WYWxpZGF0ZUNhcHRpb25FbXB0eSIsImluaXRpYWxpemUiLCJkcm9wZG93biIsImluaXRpYWxpemVGb3JtIiwiY2JCZWZvcmVTZW5kRm9ybSIsInNldHRpbmdzIiwicmVzdWx0IiwiZGF0YSIsImZvcm0iLCJjYkFmdGVyU2VuZEZvcm0iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJGb3JtIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLHdCQUF3QixHQUFHO0FBQ2hDQyxFQUFBQSxRQUFRLEVBQUVDLENBQUMsQ0FBQyw0QkFBRCxDQURxQjtBQUVoQ0MsRUFBQUEsV0FBVyxFQUFFRCxDQUFDLENBQUMsc0JBQUQsQ0FGa0I7QUFHaENFLEVBQUFBLFNBQVMsRUFBRUYsQ0FBQyxDQUFDLGFBQUQsQ0FIb0I7QUFJaENHLEVBQUFBLGFBQWEsRUFBRTtBQUNkQyxJQUFBQSxJQUFJLEVBQUU7QUFDTEMsTUFBQUEsVUFBVSxFQUFFLFNBRFA7QUFFTEMsTUFBQUEsS0FBSyxFQUFFLENBQ047QUFDQ0MsUUFBQUEsSUFBSSxFQUFFLE9BRFA7QUFFQ0MsUUFBQUEsTUFBTSxFQUFFQyxlQUFlLENBQUNDO0FBRnpCLE9BRE07QUFGRjtBQURRLEdBSmlCO0FBZWhDQyxFQUFBQSxVQWZnQyx3QkFlbkI7QUFDWlgsSUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQlksUUFBakI7QUFDQWQsSUFBQUEsd0JBQXdCLENBQUNlLGNBQXpCO0FBQ0EsR0FsQitCO0FBbUJoQ0MsRUFBQUEsZ0JBbkJnQyw0QkFtQmZDLFFBbkJlLEVBbUJMO0FBQzFCLFFBQU1DLE1BQU0sR0FBR0QsUUFBZjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY25CLHdCQUF3QixDQUFDQyxRQUF6QixDQUFrQ21CLElBQWxDLENBQXVDLFlBQXZDLENBQWQ7QUFDQSxXQUFPRixNQUFQO0FBQ0EsR0F2QitCO0FBd0JoQ0csRUFBQUEsZUF4QmdDLDZCQXdCZDtBQUNqQkMsSUFBQUEsTUFBTSxDQUFDQyxRQUFQLEdBQWtCRCxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLElBQWxDO0FBQ0EsR0ExQitCO0FBMkJoQ1QsRUFBQUEsY0EzQmdDLDRCQTJCZjtBQUNoQlUsSUFBQUEsSUFBSSxDQUFDeEIsUUFBTCxHQUFnQkQsd0JBQXdCLENBQUNDLFFBQXpDO0FBQ0F3QixJQUFBQSxJQUFJLENBQUNDLEdBQUwsYUFBY0MsYUFBZDtBQUNBRixJQUFBQSxJQUFJLENBQUNwQixhQUFMLEdBQXFCTCx3QkFBd0IsQ0FBQ0ssYUFBOUM7QUFDQW9CLElBQUFBLElBQUksQ0FBQ1QsZ0JBQUwsR0FBd0JoQix3QkFBd0IsQ0FBQ2dCLGdCQUFqRDtBQUNBUyxJQUFBQSxJQUFJLENBQUNKLGVBQUwsR0FBdUJyQix3QkFBd0IsQ0FBQ3FCLGVBQWhEO0FBQ0FJLElBQUFBLElBQUksQ0FBQ1osVUFBTDtBQUNBO0FBbEMrQixDQUFqQztBQXNDQVgsQ0FBQyxDQUFDMEIsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QjdCLEVBQUFBLHdCQUF3QixDQUFDYSxVQUF6QjtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgRm9ybSwgZ2xvYmFsVHJhbnNsYXRlICovXG5cbi8qKlxuICogUHJvY2VzcyBjb21tb24gbW9kdWxlIHNldHRpbmdzXG4gKlxuICovXG5jb25zdCBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkgPSB7XG5cdCRmb3JtT2JqOiAkKCcjcGJ4LWV4dGVuc2lvbi1tb2RpZnktZm9ybScpLFxuXHQkYmFja0J1dHRvbjogJCgnI2JhY2stdG8tbGlzdC1idXR0b24nKSxcblx0JGRyb3Bkb3duOiAkKCcjbWVudS1ncm91cCcpLFxuXHR2YWxpZGF0ZVJ1bGVzOiB7XG5cdFx0bmFtZToge1xuXHRcdFx0aWRlbnRpZmllcjogJ2NhcHRpb24nLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdlbXB0eScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZXh0X1ZhbGlkYXRlQ2FwdGlvbkVtcHR5LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHR9LFxuXHRpbml0aWFsaXplKCkge1xuXHRcdCQoJyNtZW51LWdyb3VwJykuZHJvcGRvd24oKTtcblx0XHRwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuaW5pdGlhbGl6ZUZvcm0oKTtcblx0fSxcblx0Y2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuXHRcdHJlc3VsdC5kYXRhID0gcGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5LiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZXMnKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXHRjYkFmdGVyU2VuZEZvcm0oKSB7XG5cdFx0d2luZG93LmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cdH0sXG5cdGluaXRpYWxpemVGb3JtKCkge1xuXHRcdEZvcm0uJGZvcm1PYmogPSBwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuJGZvcm1PYmo7XG5cdFx0Rm9ybS51cmwgPSBgJHtnbG9iYWxSb290VXJsfXBieC1leHRlbnNpb24tbW9kdWxlcy9zYXZlTW9kdWxlU2V0dGluZ3NgO1xuXHRcdEZvcm0udmFsaWRhdGVSdWxlcyA9IHBieEV4dGVuc2lvbk1vZHVsZU1vZGlmeS52YWxpZGF0ZVJ1bGVzO1xuXHRcdEZvcm0uY2JCZWZvcmVTZW5kRm9ybSA9IHBieEV4dGVuc2lvbk1vZHVsZU1vZGlmeS5jYkJlZm9yZVNlbmRGb3JtO1xuXHRcdEZvcm0uY2JBZnRlclNlbmRGb3JtID0gcGJ4RXh0ZW5zaW9uTW9kdWxlTW9kaWZ5LmNiQWZ0ZXJTZW5kRm9ybTtcblx0XHRGb3JtLmluaXRpYWxpemUoKTtcblx0fSxcbn07XG5cblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHRwYnhFeHRlbnNpb25Nb2R1bGVNb2RpZnkuaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=