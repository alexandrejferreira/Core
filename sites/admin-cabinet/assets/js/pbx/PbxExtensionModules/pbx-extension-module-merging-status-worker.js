"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, globalTranslate, UserMessage, installStatusLoopWorker */

/**
 * Worker object for monitoring the merging process of uploaded file parts.
 *
 * @module mergingCheckWorker
 */
var mergingCheckWorker = {
  /**
   * Time in milliseconds before fetching new status request.
   * @type {number}
   */
  timeOut: 3000,

  /**
   * The id of the timer function for the status worker.
   * @type {number}
   */
  timeOutHandle: 0,
  errorCounts: 0,

  /**
   * The progress bar label element.
   * @type {jQuery}
   */
  $progressBarLabel: $('#upload-progress-bar-label'),
  fileID: null,
  filePath: '',

  /**
   * Initializes the merging check worker.
   * @param {string} fileID - The ID of the uploaded file.
   * @param {string} filePath - The path of the uploaded file.
   */
  initialize: function initialize(fileID, filePath) {
    mergingCheckWorker.fileID = fileID;
    mergingCheckWorker.filePath = filePath;
    mergingCheckWorker.restartWorker(fileID);
  },

  /**
   * Restarts the merging check worker.
   */
  restartWorker: function restartWorker() {
    window.clearTimeout(mergingCheckWorker.timeoutHandle);
    mergingCheckWorker.worker();
  },

  /**
   * Performs the merging check worker process.
   */
  worker: function worker() {
    PbxApi.FilesGetStatusUploadFile(mergingCheckWorker.fileID, mergingCheckWorker.cbAfterResponse);
    mergingCheckWorker.timeoutHandle = window.setTimeout(mergingCheckWorker.worker, mergingCheckWorker.timeOut);
  },

  /**
   * Callback function after receiving the merging check response.
   * @param {object} response - The response object from the merging check API.
   */
  cbAfterResponse: function cbAfterResponse(response) {
    // Check if error counts exceeded the limit
    if (mergingCheckWorker.errorCounts > 10) {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.ext_UploadError);
      UserMessage.showMultiString(response, globalTranslate.ext_UploadError);
      addNewExtension.$uploadButton.removeClass('loading');
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
    } // Check if the response is valid


    if (response === undefined || Object.keys(response).length === 0) {
      mergingCheckWorker.errorCounts += 1;
      return;
    } // Check the status of the merging process


    if (response.d_status === 'UPLOAD_COMPLETE') {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.ext_InstallationInProgress);
      PbxApi.ModulesInstallFromPackage(mergingCheckWorker.filePath, mergingCheckWorker.cbAfterModuleInstall);
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
    } else if (response.d_status !== undefined) {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.ext_UploadInProgress);
      mergingCheckWorker.errorCounts = 0;
    } else {
      mergingCheckWorker.errorCounts += 1;
    }
  },

  /**
   * Callback function after module installation.
   * @param {object} response - The response object from the module installation API.
   */
  cbAfterModuleInstall: function cbAfterModuleInstall(response) {
    if (response.result === true && response.data.filePath !== '') {
      installStatusLoopWorker.initialize(response.data.filePath, response.data.moduleWasEnabled);
    } else {
      UserMessage.showMultiString(response, globalTranslate.ext_InstallationError);
      addNewExtension.$uploadButton.removeClass('loading');
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLW1lcmdpbmctc3RhdHVzLXdvcmtlci5qcyJdLCJuYW1lcyI6WyJtZXJnaW5nQ2hlY2tXb3JrZXIiLCJ0aW1lT3V0IiwidGltZU91dEhhbmRsZSIsImVycm9yQ291bnRzIiwiJHByb2dyZXNzQmFyTGFiZWwiLCIkIiwiZmlsZUlEIiwiZmlsZVBhdGgiLCJpbml0aWFsaXplIiwicmVzdGFydFdvcmtlciIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJ3b3JrZXIiLCJQYnhBcGkiLCJGaWxlc0dldFN0YXR1c1VwbG9hZEZpbGUiLCJjYkFmdGVyUmVzcG9uc2UiLCJzZXRUaW1lb3V0IiwicmVzcG9uc2UiLCJ0ZXh0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiZXh0X1VwbG9hZEVycm9yIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJhZGROZXdFeHRlbnNpb24iLCIkdXBsb2FkQnV0dG9uIiwicmVtb3ZlQ2xhc3MiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZF9zdGF0dXMiLCJleHRfSW5zdGFsbGF0aW9uSW5Qcm9ncmVzcyIsIk1vZHVsZXNJbnN0YWxsRnJvbVBhY2thZ2UiLCJjYkFmdGVyTW9kdWxlSW5zdGFsbCIsImV4dF9VcGxvYWRJblByb2dyZXNzIiwicmVzdWx0IiwiZGF0YSIsImluc3RhbGxTdGF0dXNMb29wV29ya2VyIiwibW9kdWxlV2FzRW5hYmxlZCIsImV4dF9JbnN0YWxsYXRpb25FcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxrQkFBa0IsR0FBRztBQUV2QjtBQUNKO0FB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a0JBQWtCLENBQUNHLFdBQW5CLEdBQWlDLENBQWpDO0FBQ0gsS0FITSxNQUdBO0FBQ0hILE1BQUFBLGtCQUFrQixDQUFDRyxXQUFuQixJQUFrQyxDQUFsQztBQUNIO0FBQ0osR0F0RnNCOztBQXdGdkI7QUFDSjtBQUNBO0FBQ0E7QUFDSStCLEVBQUFBLG9CQTVGdUIsZ0NBNEZGaEIsUUE1RkUsRUE0RlE7QUFDM0IsUUFBSUEsUUFBUSxDQUFDa0IsTUFBVCxLQUFvQixJQUFwQixJQUE0QmxCLFFBQVEsQ0FBQ21CLElBQVQsQ0FBYzlCLFFBQWQsS0FBMEIsRUFBMUQsRUFBOEQ7QUFDMUQrQixNQUFBQSx1QkFBdUIsQ0FBQzlCLFVBQXhCLENBQW1DVSxRQUFRLENBQUNtQixJQUFULENBQWM5QixRQUFqRCxFQUE0RFcsUUFBUSxDQUFDbUIsSUFBVCxDQUFjRSxnQkFBMUU7QUFDSCxLQUZELE1BRU87QUFDSGpCLE1BQUFBLFdBQVcsQ0FBQ0MsZUFBWixDQUE0QkwsUUFBNUIsRUFBc0NFLGVBQWUsQ0FBQ29CLHFCQUF0RDtBQUNBaEIsTUFBQUEsZUFBZSxDQUFDQyxhQUFoQixDQUE4QkMsV0FBOUIsQ0FBMEMsU0FBMUM7QUFDSDtBQUNKO0FBbkdzQixDQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIxIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBQYnhBcGksIGdsb2JhbFRyYW5zbGF0ZSwgVXNlck1lc3NhZ2UsIGluc3RhbGxTdGF0dXNMb29wV29ya2VyICovXG5cbi8qKlxuICogV29ya2VyIG9iamVjdCBmb3IgbW9uaXRvcmluZyB0aGUgbWVyZ2luZyBwcm9jZXNzIG9mIHVwbG9hZGVkIGZpbGUgcGFydHMuXG4gKlxuICogQG1vZHVsZSBtZXJnaW5nQ2hlY2tXb3JrZXJcbiAqL1xuY29uc3QgbWVyZ2luZ0NoZWNrV29ya2VyID0ge1xuXG4gICAgLyoqXG4gICAgICogVGltZSBpbiBtaWxsaXNlY29uZHMgYmVmb3JlIGZldGNoaW5nIG5ldyBzdGF0dXMgcmVxdWVzdC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRpbWVPdXQ6IDMwMDAsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgb2YgdGhlIHRpbWVyIGZ1bmN0aW9uIGZvciB0aGUgc3RhdHVzIHdvcmtlci5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRpbWVPdXRIYW5kbGU6IDAsXG4gICAgXG4gICAgZXJyb3JDb3VudHM6IDAsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgcHJvZ3Jlc3MgYmFyIGxhYmVsIGVsZW1lbnQuXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkcHJvZ3Jlc3NCYXJMYWJlbDogJCgnI3VwbG9hZC1wcm9ncmVzcy1iYXItbGFiZWwnKSxcblxuICAgIGZpbGVJRDogbnVsbCxcbiAgICBmaWxlUGF0aDogJycsXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgbWVyZ2luZyBjaGVjayB3b3JrZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJRCAtIFRoZSBJRCBvZiB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGggLSBUaGUgcGF0aCBvZiB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKGZpbGVJRCwgZmlsZVBhdGgpIHtcbiAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLmZpbGVJRCA9IGZpbGVJRDtcbiAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci5yZXN0YXJ0V29ya2VyKGZpbGVJRCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3RhcnRzIHRoZSBtZXJnaW5nIGNoZWNrIHdvcmtlci5cbiAgICAgKi9cbiAgICByZXN0YXJ0V29ya2VyKCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KG1lcmdpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyB0aGUgbWVyZ2luZyBjaGVjayB3b3JrZXIgcHJvY2Vzcy5cbiAgICAgKi9cbiAgICB3b3JrZXIoKSB7XG4gICAgICAgIFBieEFwaS5GaWxlc0dldFN0YXR1c1VwbG9hZEZpbGUobWVyZ2luZ0NoZWNrV29ya2VyLmZpbGVJRCwgbWVyZ2luZ0NoZWNrV29ya2VyLmNiQWZ0ZXJSZXNwb25zZSk7XG4gICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgICBtZXJnaW5nQ2hlY2tXb3JrZXIud29ya2VyLFxuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLnRpbWVPdXQsXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIHJlY2VpdmluZyB0aGUgbWVyZ2luZyBjaGVjayByZXNwb25zZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2Ugb2JqZWN0IGZyb20gdGhlIG1lcmdpbmcgY2hlY2sgQVBJLlxuICAgICAqL1xuICAgIGNiQWZ0ZXJSZXNwb25zZShyZXNwb25zZSkge1xuXG4gICAgICAgIC8vIENoZWNrIGlmIGVycm9yIGNvdW50cyBleGNlZWRlZCB0aGUgbGltaXRcbiAgICAgICAgaWYgKG1lcmdpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyA+IDEwKSB7XG4gICAgICAgICAgICBtZXJnaW5nQ2hlY2tXb3JrZXIuJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUuZXh0X1VwbG9hZEVycm9yKTtcbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhyZXNwb25zZSwgZ2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRFcnJvcik7XG4gICAgICAgICAgICBhZGROZXdFeHRlbnNpb24uJHVwbG9hZEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVzcG9uc2UgaXMgdmFsaWRcbiAgICAgICAgaWYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLmVycm9yQ291bnRzICs9IDE7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayB0aGUgc3RhdHVzIG9mIHRoZSBtZXJnaW5nIHByb2Nlc3NcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRfc3RhdHVzID09PSAnVVBMT0FEX0NPTVBMRVRFJykge1xuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLmV4dF9JbnN0YWxsYXRpb25JblByb2dyZXNzKTtcbiAgICAgICAgICAgIFBieEFwaS5Nb2R1bGVzSW5zdGFsbEZyb21QYWNrYWdlKG1lcmdpbmdDaGVja1dvcmtlci5maWxlUGF0aCwgbWVyZ2luZ0NoZWNrV29ya2VyLmNiQWZ0ZXJNb2R1bGVJbnN0YWxsKTtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQobWVyZ2luZ0NoZWNrV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRfc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci4kcHJvZ3Jlc3NCYXJMYWJlbC50ZXh0KGdsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICBtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLmVycm9yQ291bnRzICs9IDE7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgbW9kdWxlIGluc3RhbGxhdGlvbi5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgLSBUaGUgcmVzcG9uc2Ugb2JqZWN0IGZyb20gdGhlIG1vZHVsZSBpbnN0YWxsYXRpb24gQVBJLlxuICAgICAqL1xuICAgIGNiQWZ0ZXJNb2R1bGVJbnN0YWxsKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQgPT09IHRydWUgJiYgcmVzcG9uc2UuZGF0YS5maWxlUGF0aCAhPT0nJykge1xuICAgICAgICAgICAgaW5zdGFsbFN0YXR1c0xvb3BXb3JrZXIuaW5pdGlhbGl6ZShyZXNwb25zZS5kYXRhLmZpbGVQYXRoLCAgcmVzcG9uc2UuZGF0YS5tb2R1bGVXYXNFbmFibGVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhyZXNwb25zZSwgZ2xvYmFsVHJhbnNsYXRlLmV4dF9JbnN0YWxsYXRpb25FcnJvcik7XG4gICAgICAgICAgICBhZGROZXdFeHRlbnNpb24uJHVwbG9hZEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuICAgICAgICB9XG4gICAgfSxcbn07Il19