"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, globalTranslate, UserMessage, installStatusLoopWorker */

/**
 * Worker object for monitoring the merging process of uploaded file parts.
 *
 * @module mergingCheckWorker
 */
var mergingCheckWorker = {
  /**
   * Time in milliseconds before fetching new status request.
   * @type {number}
   */
  timeOut: 3000,

  /**
   * The id of the timer function for the status worker.
   * @type {number}
   */
  timeOutHandle: 0,
  errorCounts: 0,

  /**
   * The progress bar label element.
   * @type {jQuery}
   */
  $progressBarLabel: $('#upload-progress-bar-label'),
  fileID: null,
  filePath: '',

  /**
   * Initializes the merging check worker.
   * @param {string} fileID - The ID of the uploaded file.
   * @param {string} filePath - The path of the uploaded file.
   */
  initialize: function initialize(fileID, filePath) {
    mergingCheckWorker.fileID = fileID;
    mergingCheckWorker.filePath = filePath;
    mergingCheckWorker.restartWorker(fileID);
  },

  /**
   * Restarts the merging check worker.
   */
  restartWorker: function restartWorker() {
    window.clearTimeout(mergingCheckWorker.timeoutHandle);
    mergingCheckWorker.worker();
  },

  /**
   * Performs the merging check worker process.
   */
  worker: function worker() {
    PbxApi.FilesGetStatusUploadFile(mergingCheckWorker.fileID, mergingCheckWorker.cbAfterResponse);
    mergingCheckWorker.timeoutHandle = window.setTimeout(mergingCheckWorker.worker, mergingCheckWorker.timeOut);
  },

  /**
   * Callback function after receiving the merging check response.
   * @param {object} response - The response object from the merging check API.
   */
  cbAfterResponse: function cbAfterResponse(response) {
    // Check if error counts exceeded the limit
    if (mergingCheckWorker.errorCounts > 10) {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.ext_UploadError);
      UserMessage.showMultiString(response, globalTranslate.ext_UploadError);
      addNewExtension.$uploadButton.removeClass('loading');
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
    } // Check if the response is valid


    if (response === undefined || Object.keys(response).length === 0) {
      mergingCheckWorker.errorCounts += 1;
      return;
    } // Check the status of the merging process


    if (response.d_status === 'UPLOAD_COMPLETE') {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.ext_InstallationInProgress);
      PbxApi.ModulesInstallModule(mergingCheckWorker.filePath, mergingCheckWorker.cbAfterModuleInstall);
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
    } else if (response.d_status !== undefined) {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.ext_UploadInProgress);
      mergingCheckWorker.errorCounts = 0;
    } else {
      mergingCheckWorker.errorCounts += 1;
    }
  },

  /**
   * Callback function after module installation.
   * @param {object} response - The response object from the module installation API.
   */
  cbAfterModuleInstall: function cbAfterModuleInstall(response) {
    if (response.result === true) {
      installStatusLoopWorker.initialize(response.data.filePath);
    } else {
      UserMessage.showMultiString(response, globalTranslate.ext_InstallationError);
      addNewExtension.$uploadButton.removeClass('loading');
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLW1lcmdpbmctc3RhdHVzLXdvcmtlci5qcyJdLCJuYW1lcyI6WyJtZXJnaW5nQ2hlY2tXb3JrZXIiLCJ0aW1lT3V0IiwidGltZU91dEhhbmRsZSIsImVycm9yQ291bnRzIiwiJHByb2dyZXNzQmFyTGFiZWwiLCIkIiwiZmlsZUlEIiwiZmlsZVBhdGgiLCJpbml0aWFsaXplIiwicmVzdGFydFdvcmtlciIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJ3b3JrZXIiLCJQYnhBcGkiLCJGaWxlc0dldFN0YXR1c1VwbG9hZEZpbGUiLCJjYkFmdGVyUmVzcG9uc2UiLCJzZXRUaW1lb3V0IiwicmVzcG9uc2UiLCJ0ZXh0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiZXh0X1VwbG9hZEVycm9yIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJhZGROZXdFeHRlbnNpb24iLCIkdXBsb2FkQnV0dG9uIiwicmVtb3ZlQ2xhc3MiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZF9zdGF0dXMiLCJleHRfSW5zdGFsbGF0aW9uSW5Qcm9ncmVzcyIsIk1vZHVsZXNJbnN0YWxsTW9kdWxlIiwiY2JBZnRlck1vZHVsZUluc3RhbGwiLCJleHRfVXBsb2FkSW5Qcm9ncmVzcyIsInJlc3VsdCIsImluc3RhbGxTdGF0dXNMb29wV29ya2VyIiwiZGF0YSIsImV4dF9JbnN0YWxsYXRpb25FcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxrQkFBa0IsR0FBRztBQUV2QjtBQUNKO0FBQ0E7QUFDQTtBQUNJQyxFQUFBQSxPQUFP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LENBQWpDO0FBQ0gsS0FITSxNQUdBO0FBQ0hILE1BQUFBLGtCQUFrQixDQUFDRyxXQUFuQixJQUFrQyxDQUFsQztBQUNIO0FBQ0osR0F0RnNCOztBQXdGdkI7QUFDSjtBQUNBO0FBQ0E7QUFDSStCLEVBQUFBLG9CQTVGdUIsZ0NBNEZGaEIsUUE1RkUsRUE0RlE7QUFDM0IsUUFBSUEsUUFBUSxDQUFDa0IsTUFBVCxLQUFvQixJQUF4QixFQUE4QjtBQUMxQkMsTUFBQUEsdUJBQXVCLENBQUM3QixVQUF4QixDQUFtQ1UsUUFBUSxDQUFDb0IsSUFBVCxDQUFjL0IsUUFBakQ7QUFDSCxLQUZELE1BRU87QUFDSGUsTUFBQUEsV0FBVyxDQUFDQyxlQUFaLENBQTRCTCxRQUE1QixFQUFzQ0UsZUFBZSxDQUFDbUIscUJBQXREO0FBQ0FmLE1BQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJDLFdBQTlCLENBQTBDLFNBQTFDO0FBQ0g7QUFDSjtBQW5Hc0IsQ0FBM0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMSBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgUGJ4QXBpLCBnbG9iYWxUcmFuc2xhdGUsIFVzZXJNZXNzYWdlLCBpbnN0YWxsU3RhdHVzTG9vcFdvcmtlciAqL1xuXG4vKipcbiAqIFdvcmtlciBvYmplY3QgZm9yIG1vbml0b3JpbmcgdGhlIG1lcmdpbmcgcHJvY2VzcyBvZiB1cGxvYWRlZCBmaWxlIHBhcnRzLlxuICpcbiAqIEBtb2R1bGUgbWVyZ2luZ0NoZWNrV29ya2VyXG4gKi9cbmNvbnN0IG1lcmdpbmdDaGVja1dvcmtlciA9IHtcblxuICAgIC8qKlxuICAgICAqIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSBmZXRjaGluZyBuZXcgc3RhdHVzIHJlcXVlc3QuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aW1lT3V0OiAzMDAwLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGlkIG9mIHRoZSB0aW1lciBmdW5jdGlvbiBmb3IgdGhlIHN0YXR1cyB3b3JrZXIuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aW1lT3V0SGFuZGxlOiAwLFxuICAgIFxuICAgIGVycm9yQ291bnRzOiAwLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHByb2dyZXNzIGJhciBsYWJlbCBlbGVtZW50LlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgJHByb2dyZXNzQmFyTGFiZWw6ICQoJyN1cGxvYWQtcHJvZ3Jlc3MtYmFyLWxhYmVsJyksXG5cbiAgICBmaWxlSUQ6IG51bGwsXG4gICAgZmlsZVBhdGg6ICcnLFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIG1lcmdpbmcgY2hlY2sgd29ya2VyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSUQgLSBUaGUgSUQgb2YgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIC0gVGhlIHBhdGggb2YgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZShmaWxlSUQsIGZpbGVQYXRoKSB7XG4gICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci5maWxlSUQgPSBmaWxlSUQ7XG4gICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci5maWxlUGF0aCA9IGZpbGVQYXRoO1xuICAgICAgICBtZXJnaW5nQ2hlY2tXb3JrZXIucmVzdGFydFdvcmtlcihmaWxlSUQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXN0YXJ0cyB0aGUgbWVyZ2luZyBjaGVjayB3b3JrZXIuXG4gICAgICovXG4gICAgcmVzdGFydFdvcmtlcigpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG4gICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci53b3JrZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIG1lcmdpbmcgY2hlY2sgd29ya2VyIHByb2Nlc3MuXG4gICAgICovXG4gICAgd29ya2VyKCkge1xuICAgICAgICBQYnhBcGkuRmlsZXNHZXRTdGF0dXNVcGxvYWRGaWxlKG1lcmdpbmdDaGVja1dvcmtlci5maWxlSUQsIG1lcmdpbmdDaGVja1dvcmtlci5jYkFmdGVyUmVzcG9uc2UpO1xuICAgICAgICBtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcixcbiAgICAgICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci50aW1lT3V0LFxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiBhZnRlciByZWNlaXZpbmcgdGhlIG1lcmdpbmcgY2hlY2sgcmVzcG9uc2UuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdCBmcm9tIHRoZSBtZXJnaW5nIGNoZWNrIEFQSS5cbiAgICAgKi9cbiAgICBjYkFmdGVyUmVzcG9uc2UocmVzcG9uc2UpIHtcblxuICAgICAgICAvLyBDaGVjayBpZiBlcnJvciBjb3VudHMgZXhjZWVkZWQgdGhlIGxpbWl0XG4gICAgICAgIGlmIChtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiAxMCkge1xuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRFcnJvcik7XG4gICAgICAgICAgICBVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcocmVzcG9uc2UsIGdsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkRXJyb3IpO1xuICAgICAgICAgICAgYWRkTmV3RXh0ZW5zaW9uLiR1cGxvYWRCdXR0b24ucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnKTtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQobWVyZ2luZ0NoZWNrV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlc3BvbnNlIGlzIHZhbGlkXG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gdW5kZWZpbmVkIHx8IE9iamVjdC5rZXlzKHJlc3BvbnNlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyArPSAxO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgbWVyZ2luZyBwcm9jZXNzXG4gICAgICAgIGlmIChyZXNwb25zZS5kX3N0YXR1cyA9PT0gJ1VQTE9BRF9DT01QTEVURScpIHtcbiAgICAgICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci4kcHJvZ3Jlc3NCYXJMYWJlbC50ZXh0KGdsb2JhbFRyYW5zbGF0ZS5leHRfSW5zdGFsbGF0aW9uSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICBQYnhBcGkuTW9kdWxlc0luc3RhbGxNb2R1bGUobWVyZ2luZ0NoZWNrV29ya2VyLmZpbGVQYXRoLCBtZXJnaW5nQ2hlY2tXb3JrZXIuY2JBZnRlck1vZHVsZUluc3RhbGwpO1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZF9zdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWVyZ2luZ0NoZWNrV29ya2VyLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRJblByb2dyZXNzKTtcbiAgICAgICAgICAgIG1lcmdpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgKz0gMTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiBhZnRlciBtb2R1bGUgaW5zdGFsbGF0aW9uLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSAtIFRoZSByZXNwb25zZSBvYmplY3QgZnJvbSB0aGUgbW9kdWxlIGluc3RhbGxhdGlvbiBBUEkuXG4gICAgICovXG4gICAgY2JBZnRlck1vZHVsZUluc3RhbGwocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaW5zdGFsbFN0YXR1c0xvb3BXb3JrZXIuaW5pdGlhbGl6ZShyZXNwb25zZS5kYXRhLmZpbGVQYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhyZXNwb25zZSwgZ2xvYmFsVHJhbnNsYXRlLmV4dF9JbnN0YWxsYXRpb25FcnJvcik7XG4gICAgICAgICAgICBhZGROZXdFeHRlbnNpb24uJHVwbG9hZEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuICAgICAgICB9XG4gICAgfSxcbn07Il19