"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global UserMessage, globalTranslate, PbxApi, upgradeStatusLoopWorker */

/**
 * Process push to button install new module from ZIP file
 *
 * @type {{checkStatusFileMerging(*=): void, uploadInProgress: boolean, initialize(): void, $uploadButton: (*|jQuery|HTMLElement), $progressBar: (*|jQuery|HTMLElement), $progressBarLabel: (*|jQuery), cbResumableUploadFile(*, *): void}}
 */
var addNewExtension = {
  $uploadButton: $('#add-new-button'),
  $progressBar: $('#upload-progress-bar'),
  $progressBarLabel: $('#upload-progress-bar').find('.label'),
  uploadInProgress: false,
  initialize: function initialize() {
    addNewExtension.$progressBar.hide();
    PbxApi.SystemUploadFileAttachToBtn('add-new-button', ['zip'], addNewExtension.cbResumableUploadFile);
  },

  /**
   * Upload file by chunks
   * @param action
   * @param params
   */
  cbResumableUploadFile: function cbResumableUploadFile(action, params) {
    switch (action) {
      case 'fileSuccess':
        addNewExtension.checkStatusFileMerging(params.response);
        break;

      case 'uploadStart':
        addNewExtension.uploadInProgress = true;
        addNewExtension.$uploadButton.addClass('loading');
        addNewExtension.$progressBar.show();
        addNewExtension.$progressBarLabel.text(globalTranslate.ext_UploadInProgress);
        break;

      case 'progress':
        addNewExtension.$progressBar.progress({
          percent: parseInt(params.percent, 10)
        });
        break;

      case 'error':
        addNewExtension.$progressBarLabel.text(globalTranslate.ext_UploadError);
        addNewExtension.$uploadButton.removeClass('loading');
        UserMessage.showMultiString(globalTranslate.ext_UploadError);
        break;

      default:
    }
  },

  /**
   * Wait for file ready to use
   *
   * @param response ответ функции /pbxcore/api/upload/status
   */
  checkStatusFileMerging: function checkStatusFileMerging(response) {
    if (response === undefined || PbxApi.tryParseJSON(response) === false) {
      UserMessage.showMultiString("".concat(globalTranslate.ext_UploadError));
      return;
    }

    var json = JSON.parse(response);

    if (json === undefined || json.data === undefined) {
      UserMessage.showMultiString("".concat(globalTranslate.ext_UploadError));
      return;
    }

    var fileID = json.data.upload_id;
    var filePath = json.data.filename;
    mergingCheckWorker.initialize(fileID, filePath);
  }
};
$(document).ready(function () {
  addNewExtension.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLWFkZC1uZXcuanMiXSwibmFtZXMiOlsiYWRkTmV3RXh0ZW5zaW9uIiwiJHVwbG9hZEJ1dHRvbiIsIiQiLCIkcHJvZ3Jlc3NCYXIiLCIkcHJvZ3Jlc3NCYXJMYWJlbCIsImZpbmQiLCJ1cGxvYWRJblByb2dyZXNzIiwiaW5pdGlhbGl6ZSIsImhpZGUiLCJQYnhBcGkiLCJTeXN0ZW1VcGxvYWRGaWxlQXR0YWNoVG9CdG4iLCJjYlJlc3VtYWJsZVVwbG9hZEZpbGUiLCJhY3Rpb24iLCJwYXJhbXMiLCJjaGVja1N0YXR1c0ZpbGVNZXJnaW5nIiwicmVzcG9uc2UiLCJhZGRDbGFzcyIsInNob3ciLCJ0ZXh0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiZXh0X1VwbG9hZEluUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInBlcmNlbnQiLCJwYXJzZUludCIsImV4dF9VcGxvYWRFcnJvciIsInJlbW92ZUNsYXNzIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJ1bmRlZmluZWQiLCJ0cnlQYXJzZUpTT04iLCJqc29uIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsImZpbGVJRCIsInVwbG9hZF9pZCIsImZpbGVQYXRoIiwiZmlsZW5hbWUiLCJtZXJnaW5nQ2hlY2tXb3JrZXIiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLGVBQWUsR0FBRztBQUN2QkMsRUFBQUEsYUFBYSxFQUFFQyxDQUFDLENBQUMsaUJBQUQsQ0FETztBQUV2QkMsRUFBQUEsWUFBWSxFQUFFRCxDQUFDLENBQUMsc0JBQUQsQ0FGUTtBQUd2QkUsRUFBQUEsaUJBQWlCLEVBQUVGLENBQUMsQ0FBQyxzQkFBRCxDQUFELENBQTBCRyxJQUExQixDQUErQixRQUEvQixDQUhJO0FBSXZCQyxFQUFBQSxnQkFBZ0IsRUFBRSxLQUpLO0FBS3ZCQyxFQUFBQSxVQUx1Qix3QkFLVjtBQUNaUCxJQUFBQSxlQUFlLENBQUNHLFlBQWhCLENBQTZCSyxJQUE3QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLDJCQUFQLENBQW1DLGdCQUFuQyxFQUFvRCxDQUFDLEtBQUQsQ0FBcEQsRUFBNkRWLGVBQWUsQ0FBQ1cscUJBQTdFO0FBQ0EsR0FSc0I7O0FBU3ZCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQ0EsRUFBQUEscUJBZHVCLGlDQWNEQyxNQWRDLEVBY09DLE1BZFAsRUFjYztBQUNwQyxZQUFRRCxNQUFSO0FBQ0MsV0FBSyxhQUFMO0FBQ0NaLFFBQUFBLGVBQWUsQ0FBQ2Msc0JBQWhCLENBQXVDRCxNQUFNLENBQUNFLFFBQTlDO0FBQ0E7O0FBQ0QsV0FBSyxhQUFMO0FBQ0NmLFFBQUFBLGVBQWUsQ0FBQ00sZ0JBQWhCLEdBQW1DLElBQW5DO0FBQ0FOLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJlLFFBQTlCLENBQXVDLFNBQXZDO0FBQ0FoQixRQUFBQSxlQUFlLENBQUNHLFlBQWhCLENBQTZCYyxJQUE3QjtBQUNBakIsUUFBQUEsZUFBZSxDQUFDSSxpQkFBaEIsQ0FBa0NjLElBQWxDLENBQXVDQyxlQUFlLENBQUNDLG9CQUF2RDtBQUNBOztBQUNELFdBQUssVUFBTDtBQUNDcEIsUUFBQUEsZUFBZSxDQUFDRyxZQUFoQixDQUE2QmtCLFFBQTdCLENBQXNDO0FBQ3JDQyxVQUFBQSxPQUFPLEVBQUVDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDUyxPQUFSLEVBQWlCLEVBQWpCO0FBRG9CLFNBQXRDO0FBR0E7O0FBQ0QsV0FBSyxPQUFMO0FBQ0N0QixRQUFBQSxlQUFlLENBQUNJLGlCQUFoQixDQUFrQ2MsSUFBbEMsQ0FBdUNDLGVBQWUsQ0FBQ0ssZUFBdkQ7QUFDQXhCLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJ3QixXQUE5QixDQUEwQyxTQUExQztBQUNBQyxRQUFBQSxXQUFXLENBQUNDLGVBQVosQ0FBNEJSLGVBQWUsQ0FBQ0ssZUFBNUM7QUFDQTs7QUFDRDtBQXBCRDtBQXNCQSxHQXJDc0I7O0FBc0N2QjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0NWLEVBQUFBLHNCQTNDdUIsa0NBMkNBQyxRQTNDQSxFQTJDVTtBQUNoQyxRQUFJQSxRQUFRLEtBQUthLFNBQWIsSUFBMEJuQixNQUFNLENBQUNvQixZQUFQLENBQW9CZCxRQUFwQixNQUFrQyxLQUFoRSxFQUF1RTtBQUN0RVcsTUFBQUEsV0FBVyxDQUFDQyxlQUFaLFdBQStCUixlQUFlLENBQUNLLGVBQS9DO0FBQ0E7QUFDQTs7QUFDRCxRQUFNTSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXakIsUUFBWCxDQUFiOztBQUNBLFFBQUllLElBQUksS0FBS0YsU0FBVCxJQUFzQkUsSUFBSSxDQUFDRyxJQUFMLEtBQWNMLFNBQXhDLEVBQW1EO0FBQ2xERixNQUFBQSxXQUFXLENBQUNDLGVBQVosV0FBK0JSLGVBQWUsQ0FBQ0ssZUFBL0M7QUFDQTtBQUNBOztBQUNELFFBQU1VLE1BQU0sR0FBR0osSUFBSSxDQUFDRyxJQUFMLENBQVVFLFNBQXpCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHTixJQUFJLENBQUNHLElBQUwsQ0FBVUksUUFBM0I7QUFDQUMsSUFBQUEsa0JBQWtCLENBQUMvQixVQUFuQixDQUE4QjJCLE1BQTlCLEVBQXNDRSxRQUF0QztBQUNBO0FBeERzQixDQUF4QjtBQTZEQWxDLENBQUMsQ0FBQ3FDLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDdkJ4QyxFQUFBQSxlQUFlLENBQUNPLFVBQWhCO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAyMCBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgVXNlck1lc3NhZ2UsIGdsb2JhbFRyYW5zbGF0ZSwgUGJ4QXBpLCB1cGdyYWRlU3RhdHVzTG9vcFdvcmtlciAqL1xuXG4vKipcbiAqIFByb2Nlc3MgcHVzaCB0byBidXR0b24gaW5zdGFsbCBuZXcgbW9kdWxlIGZyb20gWklQIGZpbGVcbiAqXG4gKiBAdHlwZSB7e2NoZWNrU3RhdHVzRmlsZU1lcmdpbmcoKj0pOiB2b2lkLCB1cGxvYWRJblByb2dyZXNzOiBib29sZWFuLCBpbml0aWFsaXplKCk6IHZvaWQsICR1cGxvYWRCdXR0b246ICgqfGpRdWVyeXxIVE1MRWxlbWVudCksICRwcm9ncmVzc0JhcjogKCp8alF1ZXJ5fEhUTUxFbGVtZW50KSwgJHByb2dyZXNzQmFyTGFiZWw6ICgqfGpRdWVyeSksIGNiUmVzdW1hYmxlVXBsb2FkRmlsZSgqLCAqKTogdm9pZH19XG4gKi9cbmNvbnN0IGFkZE5ld0V4dGVuc2lvbiA9IHtcblx0JHVwbG9hZEJ1dHRvbjogJCgnI2FkZC1uZXctYnV0dG9uJyksXG5cdCRwcm9ncmVzc0JhcjogJCgnI3VwbG9hZC1wcm9ncmVzcy1iYXInKSxcblx0JHByb2dyZXNzQmFyTGFiZWw6ICQoJyN1cGxvYWQtcHJvZ3Jlc3MtYmFyJykuZmluZCgnLmxhYmVsJyksXG5cdHVwbG9hZEluUHJvZ3Jlc3M6IGZhbHNlLFxuXHRpbml0aWFsaXplKCkge1xuXHRcdGFkZE5ld0V4dGVuc2lvbi4kcHJvZ3Jlc3NCYXIuaGlkZSgpO1xuXHRcdFBieEFwaS5TeXN0ZW1VcGxvYWRGaWxlQXR0YWNoVG9CdG4oJ2FkZC1uZXctYnV0dG9uJyxbJ3ppcCddLCBhZGROZXdFeHRlbnNpb24uY2JSZXN1bWFibGVVcGxvYWRGaWxlKTtcblx0fSxcblx0LyoqXG5cdCAqIFVwbG9hZCBmaWxlIGJ5IGNodW5rc1xuXHQgKiBAcGFyYW0gYWN0aW9uXG5cdCAqIEBwYXJhbSBwYXJhbXNcblx0ICovXG5cdGNiUmVzdW1hYmxlVXBsb2FkRmlsZShhY3Rpb24sIHBhcmFtcyl7XG5cdFx0c3dpdGNoIChhY3Rpb24pIHtcblx0XHRcdGNhc2UgJ2ZpbGVTdWNjZXNzJzpcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLmNoZWNrU3RhdHVzRmlsZU1lcmdpbmcocGFyYW1zLnJlc3BvbnNlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd1cGxvYWRTdGFydCc6XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi51cGxvYWRJblByb2dyZXNzID0gdHJ1ZTtcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLiR1cGxvYWRCdXR0b24uYWRkQ2xhc3MoJ2xvYWRpbmcnKTtcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLiRwcm9ncmVzc0Jhci5zaG93KCk7XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi4kcHJvZ3Jlc3NCYXJMYWJlbC50ZXh0KGdsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkSW5Qcm9ncmVzcyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncHJvZ3Jlc3MnOlxuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uJHByb2dyZXNzQmFyLnByb2dyZXNzKHtcblx0XHRcdFx0XHRwZXJjZW50OiBwYXJzZUludChwYXJhbXMucGVyY2VudCwgMTApLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdlcnJvcic6XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi4kcHJvZ3Jlc3NCYXJMYWJlbC50ZXh0KGdsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkRXJyb3IpO1xuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uJHVwbG9hZEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoZ2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRFcnJvcik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHR9XG5cdH0sXG5cdC8qKlxuXHQgKiBXYWl0IGZvciBmaWxlIHJlYWR5IHRvIHVzZVxuXHQgKlxuXHQgKiBAcGFyYW0gcmVzcG9uc2Ug0L7RgtCy0LXRgiDRhNGD0L3QutGG0LjQuCAvcGJ4Y29yZS9hcGkvdXBsb2FkL3N0YXR1c1xuXHQgKi9cblx0Y2hlY2tTdGF0dXNGaWxlTWVyZ2luZyhyZXNwb25zZSkge1xuXHRcdGlmIChyZXNwb25zZSA9PT0gdW5kZWZpbmVkIHx8IFBieEFwaS50cnlQYXJzZUpTT04ocmVzcG9uc2UpID09PSBmYWxzZSkge1xuXHRcdFx0VXNlck1lc3NhZ2Uuc2hvd011bHRpU3RyaW5nKGAke2dsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkRXJyb3J9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblx0XHRpZiAoanNvbiA9PT0gdW5kZWZpbmVkIHx8IGpzb24uZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoYCR7Z2xvYmFsVHJhbnNsYXRlLmV4dF9VcGxvYWRFcnJvcn1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgZmlsZUlEID0ganNvbi5kYXRhLnVwbG9hZF9pZDtcblx0XHRjb25zdCBmaWxlUGF0aCA9IGpzb24uZGF0YS5maWxlbmFtZTtcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuaW5pdGlhbGl6ZShmaWxlSUQsIGZpbGVQYXRoKTtcblx0fSxcblxufTtcblxuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG5cdGFkZE5ld0V4dGVuc2lvbi5pbml0aWFsaXplKCk7XG59KTtcbiJdfQ==