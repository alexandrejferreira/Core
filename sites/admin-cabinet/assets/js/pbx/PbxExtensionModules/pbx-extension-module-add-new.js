"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright © 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global UserMessage, globalTranslate, PbxApi, upgradeStatusLoopWorker, mergingCheckWorker */

/**
 * Process push to button install new module from ZIP file
 *
 * @type {{checkStatusFileMerging(*=): void, uploadInProgress: boolean, initialize(): void, $uploadButton: (*|jQuery|HTMLElement), $progressBar: (*|jQuery|HTMLElement), $progressBarLabel: (*|jQuery), cbResumableUploadFile(*, *): void}}
 */
var addNewExtension = {
  $uploadButton: $('#add-new-button'),
  $progressBar: $('#upload-progress-bar'),
  $progressBarLabel: $('#upload-progress-bar').find('.label'),
  uploadInProgress: false,
  initialize: function initialize() {
    addNewExtension.$progressBar.hide();
    PbxApi.SystemUploadFileAttachToBtn('add-new-button', ['zip'], addNewExtension.cbResumableUploadFile);
  },

  /**
   * Upload file by chunks
   * @param action
   * @param params
   */
  cbResumableUploadFile: function cbResumableUploadFile(action, params) {
    switch (action) {
      case 'fileSuccess':
        addNewExtension.checkStatusFileMerging(params.response);
        break;

      case 'uploadStart':
        addNewExtension.uploadInProgress = true;
        addNewExtension.$uploadButton.addClass('loading');
        addNewExtension.$progressBar.show();
        addNewExtension.$progressBarLabel.text(globalTranslate.ext_UploadInProgress);
        break;

      case 'progress':
        addNewExtension.$progressBar.progress({
          percent: parseInt(params.percent, 10)
        });
        break;

      case 'error':
        addNewExtension.$progressBarLabel.text(globalTranslate.ext_UploadError);
        addNewExtension.$uploadButton.removeClass('loading');
        UserMessage.showMultiString(globalTranslate.ext_UploadError);
        break;

      default:
    }
  },

  /**
   * Wait for file ready to use
   *
   * @param response ответ функции /pbxcore/api/upload/status
   */
  checkStatusFileMerging: function checkStatusFileMerging(response) {
    if (response === undefined || PbxApi.tryParseJSON(response) === false) {
      UserMessage.showMultiString("".concat(globalTranslate.ext_UploadError));
      return;
    }

    var json = JSON.parse(response);

    if (json === undefined || json.data === undefined) {
      UserMessage.showMultiString("".concat(globalTranslate.ext_UploadError));
      return;
    }

    var fileID = json.data.upload_id;
    var filePath = json.data.filename;
    mergingCheckWorker.initialize(fileID, filePath);
  }
};
$(document).ready(function () {
  addNewExtension.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QYnhFeHRlbnNpb25Nb2R1bGVzL3BieC1leHRlbnNpb24tbW9kdWxlLWFkZC1uZXcuanMiXSwibmFtZXMiOlsiYWRkTmV3RXh0ZW5zaW9uIiwiJHVwbG9hZEJ1dHRvbiIsIiQiLCIkcHJvZ3Jlc3NCYXIiLCIkcHJvZ3Jlc3NCYXJMYWJlbCIsImZpbmQiLCJ1cGxvYWRJblByb2dyZXNzIiwiaW5pdGlhbGl6ZSIsImhpZGUiLCJQYnhBcGkiLCJTeXN0ZW1VcGxvYWRGaWxlQXR0YWNoVG9CdG4iLCJjYlJlc3VtYWJsZVVwbG9hZEZpbGUiLCJhY3Rpb24iLCJwYXJhbXMiLCJjaGVja1N0YXR1c0ZpbGVNZXJnaW5nIiwicmVzcG9uc2UiLCJhZGRDbGFzcyIsInNob3ciLCJ0ZXh0IiwiZ2xvYmFsVHJhbnNsYXRlIiwiZXh0X1VwbG9hZEluUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInBlcmNlbnQiLCJwYXJzZUludCIsImV4dF9VcGxvYWRFcnJvciIsInJlbW92ZUNsYXNzIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJ1bmRlZmluZWQiLCJ0cnlQYXJzZUpTT04iLCJqc29uIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsImZpbGVJRCIsInVwbG9hZF9pZCIsImZpbGVQYXRoIiwiZmlsZW5hbWUiLCJtZXJnaW5nQ2hlY2tXb3JrZXIiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLGVBQWUsR0FBRztBQUN2QkMsRUFBQUEsYUFBYSxFQUFFQyxDQUFDLENBQUMsaUJBQUQsQ0FETztBQUV2QkMsRUFBQUEsWUFBWSxFQUFFRCxDQUFDLENBQUMsc0JBQUQsQ0FGUTtBQUd2QkUsRUFBQUEsaUJBQWlCLEVBQUVGLENBQUMsQ0FBQyxzQkFBRCxDQUFELENBQTBCRyxJQUExQixDQUErQixRQUEvQixDQUhJO0FBSXZCQyxFQUFBQSxnQkFBZ0IsRUFBRSxLQUpLO0FBS3ZCQyxFQUFBQSxVQUx1Qix3QkFLVjtBQUNaUCxJQUFBQSxlQUFlLENBQUNHLFlBQWhCLENBQTZCSyxJQUE3QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLDJCQUFQLENBQW1DLGdCQUFuQyxFQUFvRCxDQUFDLEtBQUQsQ0FBcEQsRUFBNkRWLGVBQWUsQ0FBQ1cscUJBQTdFO0FBQ0EsR0FSc0I7O0FBU3ZCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQ0EsRUFBQUEscUJBZHVCLGlDQWNEQyxNQWRDLEVBY09DLE1BZFAsRUFjYztBQUNwQyxZQUFRRCxNQUFSO0FBQ0MsV0FBSyxhQUFMO0FBQ0NaLFFBQUFBLGVBQWUsQ0FBQ2Msc0JBQWhCLENBQXVDRCxNQUFNLENBQUNFLFFBQTlDO0FBQ0E7O0FBQ0QsV0FBSyxhQUFMO0FBQ0NmLFFBQUFBLGVBQWUsQ0FBQ00sZ0JBQWhCLEdBQW1DLElBQW5DO0FBQ0FOLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJlLFFBQTlCLENBQXVDLFNBQXZDO0FBQ0FoQixRQUFBQSxlQUFlLENBQUNHLFlBQWhCLENBQTZCYyxJQUE3QjtBQUNBakIsUUFBQUEsZUFBZSxDQUFDSSxpQkFBaEIsQ0FBa0NjLElBQWxDLENBQXVDQyxlQUFlLENBQUNDLG9CQUF2RDtBQUNBOztBQUNELFdBQUssVUFBTDtBQUNDcEIsUUFBQUEsZUFBZSxDQUFDRyxZQUFoQixDQUE2QmtCLFFBQTdCLENBQXNDO0FBQ3JDQyxVQUFBQSxPQUFPLEVBQUVDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDUyxPQUFSLEVBQWlCLEVBQWpCO0FBRG9CLFNBQXRDO0FBR0E7O0FBQ0QsV0FBSyxPQUFMO0FBQ0N0QixRQUFBQSxlQUFlLENBQUNJLGlCQUFoQixDQUFrQ2MsSUFBbEMsQ0FBdUNDLGVBQWUsQ0FBQ0ssZUFBdkQ7QUFDQXhCLFFBQUFBLGVBQWUsQ0FBQ0MsYUFBaEIsQ0FBOEJ3QixXQUE5QixDQUEwQyxTQUExQztBQUNBQyxRQUFBQSxXQUFXLENBQUNDLGVBQVosQ0FBNEJSLGVBQWUsQ0FBQ0ssZUFBNUM7QUFDQTs7QUFDRDtBQXBCRDtBQXNCQSxHQXJDc0I7O0FBc0N2QjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0NWLEVBQUFBLHNCQTNDdUIsa0NBMkNBQyxRQTNDQSxFQTJDVTtBQUNoQyxRQUFJQSxRQUFRLEtBQUthLFNBQWIsSUFBMEJuQixNQUFNLENBQUNvQixZQUFQLENBQW9CZCxRQUFwQixNQUFrQyxLQUFoRSxFQUF1RTtBQUN0RVcsTUFBQUEsV0FBVyxDQUFDQyxlQUFaLFdBQStCUixlQUFlLENBQUNLLGVBQS9DO0FBQ0E7QUFDQTs7QUFDRCxRQUFNTSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXakIsUUFBWCxDQUFiOztBQUNBLFFBQUllLElBQUksS0FBS0YsU0FBVCxJQUFzQkUsSUFBSSxDQUFDRyxJQUFMLEtBQWNMLFNBQXhDLEVBQW1EO0FBQ2xERixNQUFBQSxXQUFXLENBQUNDLGVBQVosV0FBK0JSLGVBQWUsQ0FBQ0ssZUFBL0M7QUFDQTtBQUNBOztBQUNELFFBQU1VLE1BQU0sR0FBR0osSUFBSSxDQUFDRyxJQUFMLENBQVVFLFNBQXpCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHTixJQUFJLENBQUNHLElBQUwsQ0FBVUksUUFBM0I7QUFDQUMsSUFBQUEsa0JBQWtCLENBQUMvQixVQUFuQixDQUE4QjJCLE1BQTlCLEVBQXNDRSxRQUF0QztBQUNBO0FBeERzQixDQUF4QjtBQTZEQWxDLENBQUMsQ0FBQ3FDLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDdkJ4QyxFQUFBQSxlQUFlLENBQUNPLFVBQWhCO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIzIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBVc2VyTWVzc2FnZSwgZ2xvYmFsVHJhbnNsYXRlLCBQYnhBcGksIHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLCBtZXJnaW5nQ2hlY2tXb3JrZXIgKi9cblxuLyoqXG4gKiBQcm9jZXNzIHB1c2ggdG8gYnV0dG9uIGluc3RhbGwgbmV3IG1vZHVsZSBmcm9tIFpJUCBmaWxlXG4gKlxuICogQHR5cGUge3tjaGVja1N0YXR1c0ZpbGVNZXJnaW5nKCo9KTogdm9pZCwgdXBsb2FkSW5Qcm9ncmVzczogYm9vbGVhbiwgaW5pdGlhbGl6ZSgpOiB2b2lkLCAkdXBsb2FkQnV0dG9uOiAoKnxqUXVlcnl8SFRNTEVsZW1lbnQpLCAkcHJvZ3Jlc3NCYXI6ICgqfGpRdWVyeXxIVE1MRWxlbWVudCksICRwcm9ncmVzc0JhckxhYmVsOiAoKnxqUXVlcnkpLCBjYlJlc3VtYWJsZVVwbG9hZEZpbGUoKiwgKik6IHZvaWR9fVxuICovXG5jb25zdCBhZGROZXdFeHRlbnNpb24gPSB7XG5cdCR1cGxvYWRCdXR0b246ICQoJyNhZGQtbmV3LWJ1dHRvbicpLFxuXHQkcHJvZ3Jlc3NCYXI6ICQoJyN1cGxvYWQtcHJvZ3Jlc3MtYmFyJyksXG5cdCRwcm9ncmVzc0JhckxhYmVsOiAkKCcjdXBsb2FkLXByb2dyZXNzLWJhcicpLmZpbmQoJy5sYWJlbCcpLFxuXHR1cGxvYWRJblByb2dyZXNzOiBmYWxzZSxcblx0aW5pdGlhbGl6ZSgpIHtcblx0XHRhZGROZXdFeHRlbnNpb24uJHByb2dyZXNzQmFyLmhpZGUoKTtcblx0XHRQYnhBcGkuU3lzdGVtVXBsb2FkRmlsZUF0dGFjaFRvQnRuKCdhZGQtbmV3LWJ1dHRvbicsWyd6aXAnXSwgYWRkTmV3RXh0ZW5zaW9uLmNiUmVzdW1hYmxlVXBsb2FkRmlsZSk7XG5cdH0sXG5cdC8qKlxuXHQgKiBVcGxvYWQgZmlsZSBieSBjaHVua3Ncblx0ICogQHBhcmFtIGFjdGlvblxuXHQgKiBAcGFyYW0gcGFyYW1zXG5cdCAqL1xuXHRjYlJlc3VtYWJsZVVwbG9hZEZpbGUoYWN0aW9uLCBwYXJhbXMpe1xuXHRcdHN3aXRjaCAoYWN0aW9uKSB7XG5cdFx0XHRjYXNlICdmaWxlU3VjY2Vzcyc6XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi5jaGVja1N0YXR1c0ZpbGVNZXJnaW5nKHBhcmFtcy5yZXNwb25zZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAndXBsb2FkU3RhcnQnOlxuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24udXBsb2FkSW5Qcm9ncmVzcyA9IHRydWU7XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi4kdXBsb2FkQnV0dG9uLmFkZENsYXNzKCdsb2FkaW5nJyk7XG5cdFx0XHRcdGFkZE5ld0V4dGVuc2lvbi4kcHJvZ3Jlc3NCYXIuc2hvdygpO1xuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUuZXh0X1VwbG9hZEluUHJvZ3Jlc3MpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3Byb2dyZXNzJzpcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLiRwcm9ncmVzc0Jhci5wcm9ncmVzcyh7XG5cdFx0XHRcdFx0cGVyY2VudDogcGFyc2VJbnQocGFyYW1zLnBlcmNlbnQsIDEwKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZXJyb3InOlxuXHRcdFx0XHRhZGROZXdFeHRlbnNpb24uJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUuZXh0X1VwbG9hZEVycm9yKTtcblx0XHRcdFx0YWRkTmV3RXh0ZW5zaW9uLiR1cGxvYWRCdXR0b24ucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnKTtcblx0XHRcdFx0VXNlck1lc3NhZ2Uuc2hvd011bHRpU3RyaW5nKGdsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkRXJyb3IpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0fVxuXHR9LFxuXHQvKipcblx0ICogV2FpdCBmb3IgZmlsZSByZWFkeSB0byB1c2Vcblx0ICpcblx0ICogQHBhcmFtIHJlc3BvbnNlINC+0YLQstC10YIg0YTRg9C90LrRhtC40LggL3BieGNvcmUvYXBpL3VwbG9hZC9zdGF0dXNcblx0ICovXG5cdGNoZWNrU3RhdHVzRmlsZU1lcmdpbmcocmVzcG9uc2UpIHtcblx0XHRpZiAocmVzcG9uc2UgPT09IHVuZGVmaW5lZCB8fCBQYnhBcGkudHJ5UGFyc2VKU09OKHJlc3BvbnNlKSA9PT0gZmFsc2UpIHtcblx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhgJHtnbG9iYWxUcmFuc2xhdGUuZXh0X1VwbG9hZEVycm9yfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cdFx0aWYgKGpzb24gPT09IHVuZGVmaW5lZCB8fCBqc29uLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0VXNlck1lc3NhZ2Uuc2hvd011bHRpU3RyaW5nKGAke2dsb2JhbFRyYW5zbGF0ZS5leHRfVXBsb2FkRXJyb3J9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnN0IGZpbGVJRCA9IGpzb24uZGF0YS51cGxvYWRfaWQ7XG5cdFx0Y29uc3QgZmlsZVBhdGggPSBqc29uLmRhdGEuZmlsZW5hbWU7XG5cdFx0bWVyZ2luZ0NoZWNrV29ya2VyLmluaXRpYWxpemUoZmlsZUlELCBmaWxlUGF0aCk7XG5cdH0sXG5cbn07XG5cblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHRhZGROZXdFeHRlbnNpb24uaW5pdGlhbGl6ZSgpO1xufSk7XG4iXX0=