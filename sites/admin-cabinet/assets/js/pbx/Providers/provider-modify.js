"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, globalTranslate, Form, $ */
// custom form validation rule
$.fn.form.settings.rules.username = function (noregister, username) {
  return !(username.length === 0 && noregister !== 'on');
};

var provider = {
  $formObj: $('#save-provider-form'),
  $dirrtyField: $('#dirrty'),
  providerType: $('#providerType').val(),
  $checkBoxes: $('#save-provider-form .checkbox'),
  $accordions: $('#save-provider-form .ui.accordion'),
  $dropDowns: $('#save-provider-form .ui.dropdown'),
  $deleteRowButton: $('#additional-hosts-table .delete-row-button'),
  $qualifyToggle: $('#qualify'),
  $qualifyFreqToggle: $('#qualify-freq'),
  $additionalHostInput: $('#additional-host input'),
  hostInputValidation: /^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(\d|[1-2]\d|3[0-2]))?|[a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+)$/gm,
  hostRow: '#save-provider-form .host-row',
  validateRules: {
    description: {
      identifier: 'description',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.pr_ValidationProviderNameIsEmpty
      }]
    },
    host: {
      identifier: 'host',
      rules: [{
        type: 'checkHostProvider',
        prompt: globalTranslate.pr_ValidationProviderHostIsEmpty
      }]
    },
    username: {
      identifier: 'username',
      optional: true,
      rules: [{
        type: 'minLength[2]',
        prompt: globalTranslate.pr_ValidationProviderLoginNotSingleSimbol
      }]
    },
    port: {
      identifier: 'port',
      rules: [{
        type: 'integer[1..65535]',
        prompt: globalTranslate.pr_ValidationProviderPortRange
      }]
    }
  },
  initialize: function initialize() {
    provider.$checkBoxes.checkbox();
    provider.$accordions.accordion();
    provider.$dropDowns.dropdown();
    provider.$qualifyToggle.checkbox({
      onChange: function onChange() {
        if (provider.$qualifyToggle.checkbox('is checked')) {
          provider.$qualifyFreqToggle.removeClass('disabled');
        } else {
          provider.$qualifyFreqToggle.addClass('disabled');
        }
      }
    }); // Add new string to additional-hosts-table table

    provider.$additionalHostInput.keypress(function (e) {
      if (e.which === 13) {
        provider.cbOnCompleteHostAddress();
      }
    }); // Delete host from additional-hosts-table

    provider.$deleteRowButton.on('click', function (e) {
      $(e.target).closest('tr').remove();
      provider.updateHostsTableView();
      provider.$dirrtyField.val(Math.random());
      provider.$dirrtyField.trigger('change');
      e.preventDefault();
      return false;
    });
    provider.initializeForm();
    provider.updateVisibilityElements();
    $('#registration_type').on('change', provider.updateVisibilityElements);
  },
  updateVisibilityElements: function updateVisibilityElements() {
    if (provider.providerType !== 'SIP') {
      return;
    }

    var elHost = $('#elHost');
    var elUsername = $('#elUsername');
    var elSecret = $('#elSecret');
    var elAdditionalHost = $('#elAdditionalHosts');
    var regType = $('#registration_type').val();
    var elUniqId = $('#uniqid');
    var valUserName = $('#username');
    var valSecret = $('#secret');

    if (valUserName.val() === elUniqId.val()) {
      valUserName.val('');
    }

    valUserName.removeAttr('readonly');

    if (regType === 'outbound') {
      valSecret.attr('type', 'password');
      elHost.show();
      elUsername.show();
      elSecret.show();
      elAdditionalHost.show();
    } else if (regType === 'inbound') {
      valUserName.val(elUniqId.val());
      valUserName.attr('readonly', '');

      if (valSecret.val().trim() === '') {
        valSecret.val('id=' + $('#id').val() + '-' + elUniqId.val());
      }

      valSecret.attr('type', 'text');
      elHost.hide();
      elUsername.show();
      elSecret.show();
      elAdditionalHost.hide();
    } else if (regType === 'none') {
      elHost.show();
      elUsername.hide();
      elSecret.hide();
      elAdditionalHost.show();
    }
  },

  /**
   * Adds record to hosts table
   */
  cbOnCompleteHostAddress: function cbOnCompleteHostAddress() {
    var value = provider.$formObj.form('get value', 'additional-host');

    if (value) {
      var validation = value.match(provider.hostInputValidation);

      if (validation === null || validation.length === 0) {
        provider.$additionalHostInput.transition('shake');
        return;
      }

      if ($(".host-row[data-value=\"".concat(value, "\"]")).length === 0) {
        var $tr = $('.host-row-tpl').last();
        var $clone = $tr.clone(true);
        $clone.removeClass('host-row-tpl').addClass('host-row').show();
        $clone.attr('data-value', value);
        $clone.find('.address').html(value);

        if ($(provider.hostRow).last().length === 0) {
          $tr.after($clone);
        } else {
          $(provider.hostRow).last().after($clone);
        }

        provider.updateHostsTableView();
        provider.$dirrtyField.val(Math.random());
        provider.$dirrtyField.trigger('change');
      }

      provider.$additionalHostInput.val('');
    }
  },

  /**
   * Shows dummy if we have zero rows
   */
  updateHostsTableView: function updateHostsTableView() {
    var dummy = "<tr class=\"dummy\"><td colspan=\"4\" class=\"center aligned\">".concat(globalTranslate.pr_NoAnyAdditionalHosts, "</td></tr>");

    if ($(provider.hostRow).length === 0) {
      $('#additional-hosts-table tbody').append(dummy);
    } else {
      $('#additional-hosts-table tbody .dummy').remove();
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = provider.$formObj.form('get values');
    var arrAdditionalHosts = [];
    $(provider.hostRow).each(function (index, obj) {
      if ($(obj).attr('data-value')) {
        arrAdditionalHosts.push({
          address: $(obj).attr('data-value')
        });
      }
    });
    result.data.additionalHosts = JSON.stringify(arrAdditionalHosts);
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {},
  initializeForm: function initializeForm() {
    Form.$formObj = provider.$formObj;

    Form.$formObj.form.settings.rules.checkHostProvider = function (value) {
      var enable;

      if ($('#registration_type').val() === 'inbound') {
        enable = true;
      } else {
        enable = value.trim() !== '';
      }

      return enable;
    };

    switch (provider.providerType) {
      case 'SIP':
        Form.url = "".concat(globalRootUrl, "providers/save/sip");
        break;

      case 'IAX':
        Form.url = "".concat(globalRootUrl, "providers/save/iax");
        break;

      default:
        return;
    }

    Form.validateRules = provider.validateRules;
    Form.cbBeforeSendForm = provider.cbBeforeSendForm;
    Form.cbAfterSendForm = provider.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  provider.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qcm92aWRlcnMvcHJvdmlkZXItbW9kaWZ5LmpzIl0sIm5hbWVzIjpbIiQiLCJmbiIsImZvcm0iLCJzZXR0aW5ncyIsInJ1bGVzIiwidXNlcm5hbWUiLCJub3JlZ2lzdGVyIiwibGVuZ3RoIiwicHJvdmlkZXIiLCIkZm9ybU9iaiIsIiRkaXJydHlGaWVsZCIsInByb3ZpZGVyVHlwZSIsInZhbCIsIiRjaGVja0JveGVzIiwiJGFjY29yZGlvbnMiLCIkZHJvcERvd25zIiwiJGRlbGV0ZVJvd0J1dHRvbiIsIiRxdWFsaWZ5VG9nZ2xlIiwiJHF1YWxpZnlGcmVxVG9nZ2xlIiwiJGFkZGl0aW9uYWxIb3N0SW5wdXQiLCJob3N0SW5wdXRWYWxpZGF0aW9uIiwiaG9zdFJvdyIsInZhbGlkYXRlUnVsZXMiLCJkZXNjcmlwdGlvbiIsImlkZW50aWZpZXIiLCJ0eXBlIiwicHJvbXB0IiwiZ2xvYmFsVHJhbnNsYXRlIiwicHJfVmFsaWRhdGlvblByb3ZpZGVyTmFtZUlzRW1wdHkiLCJob3N0IiwicHJfVmFsaWRhdGlvblByb3ZpZGVySG9zdElzRW1wdHkiLCJvcHRpb25hbCIsInByX1ZhbGlkYXRpb25Qcm92aWRlckxvZ2luTm90U2luZ2xlU2ltYm9sIiwicG9ydCIsInByX1ZhbGlkYXRpb25Qcm92aWRlclBvcnRSYW5nZSIsImluaXRpYWxpemUiLCJjaGVja2JveCIsImFjY29yZGlvbiIsImRyb3Bkb3duIiwib25DaGFuZ2UiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwia2V5cHJlc3MiLCJlIiwid2hpY2giLCJjYk9uQ29tcGxldGVIb3N0QWRkcmVzcyIsIm9uIiwidGFyZ2V0IiwiY2xvc2VzdCIsInJlbW92ZSIsInVwZGF0ZUhvc3RzVGFibGVWaWV3IiwiTWF0aCIsInJhbmRvbSIsInRyaWdnZXIiLCJwcmV2ZW50RGVmYXVsdCIsImluaXRpYWxpemVGb3JtIiwidXBkYXRlVmlzaWJpbGl0eUVsZW1lbnRzIiwiZWxIb3N0IiwiZWxVc2VybmFtZSIsImVsU2VjcmV0IiwiZWxBZGRpdGlvbmFsSG9zdCIsInJlZ1R5cGUiLCJlbFVuaXFJZCIsInZhbFVzZXJOYW1lIiwidmFsU2VjcmV0IiwicmVtb3ZlQXR0ciIsImF0dHIiLCJzaG93IiwidHJpbSIsImhpZGUiLCJ2YWx1ZSIsInZhbGlkYXRpb24iLCJtYXRjaCIsInRyYW5zaXRpb24iLCIkdHIiLCJsYXN0IiwiJGNsb25lIiwiY2xvbmUiLCJmaW5kIiwiaHRtbCIsImFmdGVyIiwiZHVtbXkiLCJwcl9Ob0FueUFkZGl0aW9uYWxIb3N0cyIsImFwcGVuZCIsImNiQmVmb3JlU2VuZEZvcm0iLCJyZXN1bHQiLCJkYXRhIiwiYXJyQWRkaXRpb25hbEhvc3RzIiwiZWFjaCIsImluZGV4Iiwib2JqIiwicHVzaCIsImFkZHJlc3MiLCJhZGRpdGlvbmFsSG9zdHMiLCJKU09OIiwic3RyaW5naWZ5IiwiY2JBZnRlclNlbmRGb3JtIiwiRm9ybSIsImNoZWNrSG9zdFByb3ZpZGVyIiwiZW5hYmxlIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBO0FBQ0FBLENBQUMsQ0FBQ0MsRUFBRixDQUFLQyxJQUFMLENBQVVDLFFBQVYsQ0FBbUJDLEtBQW5CLENBQXlCQyxRQUF6QixHQUFvQyxVQUFVQyxVQUFWLEVBQXNCRCxRQUF0QixFQUFnQztBQUNuRSxTQUFPLEVBQUVBLFFBQVEsQ0FBQ0UsTUFBVCxLQUFvQixDQUFwQixJQUF5QkQsVUFBVSxLQUFLLElBQTFDLENBQVA7QUFDQSxDQUZEOztBQUlBLElBQU1FLFFBQVEsR0FBRztBQUNoQkMsRUFBQUEsUUFBUSxFQUFFVCxDQUFDLENBQUMscUJBQUQsQ0FESztBQUVoQlUsRUFBQUEsWUFBWSxFQUFFVixDQUFDLENBQUMsU0FBRCxDQUZDO0FBR2hCVyxF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S0FBSyxDQUFDRixJQUFOLE9BQWlCLEVBQTFCO0FBQ0E7O0FBQ0QsYUFBTytCLE1BQVA7QUFDQSxLQVJEOztBQVNBLFlBQVEzRixRQUFRLENBQUNHLFlBQWpCO0FBQ0MsV0FBSyxLQUFMO0FBQ0NzRixRQUFBQSxJQUFJLENBQUNHLEdBQUwsYUFBY0MsYUFBZDtBQUNBOztBQUNELFdBQUssS0FBTDtBQUNDSixRQUFBQSxJQUFJLENBQUNHLEdBQUwsYUFBY0MsYUFBZDtBQUNBOztBQUNEO0FBQ0M7QUFSRjs7QUFVQUosSUFBQUEsSUFBSSxDQUFDM0UsYUFBTCxHQUFxQmQsUUFBUSxDQUFDYyxhQUE5QjtBQUNBMkUsSUFBQUEsSUFBSSxDQUFDYixnQkFBTCxHQUF3QjVFLFFBQVEsQ0FBQzRFLGdCQUFqQztBQUNBYSxJQUFBQSxJQUFJLENBQUNELGVBQUwsR0FBdUJ4RixRQUFRLENBQUN3RixlQUFoQztBQUNBQyxJQUFBQSxJQUFJLENBQUM5RCxVQUFMO0FBQ0E7QUExTmUsQ0FBakI7QUErTkFuQyxDQUFDLENBQUNzRyxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3ZCL0YsRUFBQUEsUUFBUSxDQUFDMkIsVUFBVDtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMjAgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuLyogZ2xvYmFsIGdsb2JhbFJvb3RVcmwsIGdsb2JhbFRyYW5zbGF0ZSwgRm9ybSwgJCAqL1xuXG4vLyBjdXN0b20gZm9ybSB2YWxpZGF0aW9uIHJ1bGVcbiQuZm4uZm9ybS5zZXR0aW5ncy5ydWxlcy51c2VybmFtZSA9IGZ1bmN0aW9uIChub3JlZ2lzdGVyLCB1c2VybmFtZSkge1xuXHRyZXR1cm4gISh1c2VybmFtZS5sZW5ndGggPT09IDAgJiYgbm9yZWdpc3RlciAhPT0gJ29uJyk7XG59O1xuXG5jb25zdCBwcm92aWRlciA9IHtcblx0JGZvcm1PYmo6ICQoJyNzYXZlLXByb3ZpZGVyLWZvcm0nKSxcblx0JGRpcnJ0eUZpZWxkOiAkKCcjZGlycnR5JyksXG5cdHByb3ZpZGVyVHlwZTogJCgnI3Byb3ZpZGVyVHlwZScpLnZhbCgpLFxuXHQkY2hlY2tCb3hlczogJCgnI3NhdmUtcHJvdmlkZXItZm9ybSAuY2hlY2tib3gnKSxcblx0JGFjY29yZGlvbnM6ICQoJyNzYXZlLXByb3ZpZGVyLWZvcm0gLnVpLmFjY29yZGlvbicpLFxuXHQkZHJvcERvd25zOiAkKCcjc2F2ZS1wcm92aWRlci1mb3JtIC51aS5kcm9wZG93bicpLFxuXHQkZGVsZXRlUm93QnV0dG9uOiAkKCcjYWRkaXRpb25hbC1ob3N0cy10YWJsZSAuZGVsZXRlLXJvdy1idXR0b24nKSxcblx0JHF1YWxpZnlUb2dnbGU6ICQoJyNxdWFsaWZ5JyksXG5cdCRxdWFsaWZ5RnJlcVRvZ2dsZTogJCgnI3F1YWxpZnktZnJlcScpLFxuXHQkYWRkaXRpb25hbEhvc3RJbnB1dDogJCgnI2FkZGl0aW9uYWwtaG9zdCBpbnB1dCcpLFxuXHRob3N0SW5wdXRWYWxpZGF0aW9uOiAvXigoKFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pXFwuKXszfShbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKShcXC8oXFxkfFsxLTJdXFxkfDNbMC0yXSkpP3xbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSg/OlxcLlthLXpBLVpdezIsfSkrKSQvZ20sXG5cdGhvc3RSb3c6ICcjc2F2ZS1wcm92aWRlci1mb3JtIC5ob3N0LXJvdycsXG5cdHZhbGlkYXRlUnVsZXM6IHtcblx0XHRkZXNjcmlwdGlvbjoge1xuXHRcdFx0aWRlbnRpZmllcjogJ2Rlc2NyaXB0aW9uJyxcblx0XHRcdHJ1bGVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZW1wdHknLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLnByX1ZhbGlkYXRpb25Qcm92aWRlck5hbWVJc0VtcHR5LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdGhvc3Q6IHtcblx0XHRcdGlkZW50aWZpZXI6ICdob3N0Jyxcblx0XHRcdHJ1bGVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnY2hlY2tIb3N0UHJvdmlkZXInLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLnByX1ZhbGlkYXRpb25Qcm92aWRlckhvc3RJc0VtcHR5LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdHVzZXJuYW1lOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAndXNlcm5hbWUnLFxuXHRcdFx0b3B0aW9uYWwgICA6IHRydWUsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ21pbkxlbmd0aFsyXScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUucHJfVmFsaWRhdGlvblByb3ZpZGVyTG9naW5Ob3RTaW5nbGVTaW1ib2wsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0cG9ydDoge1xuXHRcdFx0aWRlbnRpZmllcjogJ3BvcnQnLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdpbnRlZ2VyWzEuLjY1NTM1XScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUucHJfVmFsaWRhdGlvblByb3ZpZGVyUG9ydFJhbmdlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHR9LFxuXHRpbml0aWFsaXplKCkge1xuXHRcdHByb3ZpZGVyLiRjaGVja0JveGVzLmNoZWNrYm94KCk7XG5cdFx0cHJvdmlkZXIuJGFjY29yZGlvbnMuYWNjb3JkaW9uKCk7XG5cdFx0cHJvdmlkZXIuJGRyb3BEb3ducy5kcm9wZG93bigpO1xuXHRcdHByb3ZpZGVyLiRxdWFsaWZ5VG9nZ2xlLmNoZWNrYm94KHtcblx0XHRcdG9uQ2hhbmdlKCkge1xuXHRcdFx0XHRpZiAocHJvdmlkZXIuJHF1YWxpZnlUb2dnbGUuY2hlY2tib3goJ2lzIGNoZWNrZWQnKSkge1xuXHRcdFx0XHRcdHByb3ZpZGVyLiRxdWFsaWZ5RnJlcVRvZ2dsZS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwcm92aWRlci4kcXVhbGlmeUZyZXFUb2dnbGUuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0Ly8gQWRkIG5ldyBzdHJpbmcgdG8gYWRkaXRpb25hbC1ob3N0cy10YWJsZSB0YWJsZVxuXHRcdHByb3ZpZGVyLiRhZGRpdGlvbmFsSG9zdElucHV0LmtleXByZXNzKChlKT0+e1xuXHRcdFx0aWYgKGUud2hpY2ggPT09IDEzKSB7XG5cdFx0XHRcdHByb3ZpZGVyLmNiT25Db21wbGV0ZUhvc3RBZGRyZXNzKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gRGVsZXRlIGhvc3QgZnJvbSBhZGRpdGlvbmFsLWhvc3RzLXRhYmxlXG5cdFx0cHJvdmlkZXIuJGRlbGV0ZVJvd0J1dHRvbi5vbignY2xpY2snLCAoZSkgPT4ge1xuXHRcdFx0JChlLnRhcmdldCkuY2xvc2VzdCgndHInKS5yZW1vdmUoKTtcblx0XHRcdHByb3ZpZGVyLnVwZGF0ZUhvc3RzVGFibGVWaWV3KCk7XG5cdFx0XHRwcm92aWRlci4kZGlycnR5RmllbGQudmFsKE1hdGgucmFuZG9tKCkpO1xuXHRcdFx0cHJvdmlkZXIuJGRpcnJ0eUZpZWxkLnRyaWdnZXIoJ2NoYW5nZScpO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuXHRcdHByb3ZpZGVyLmluaXRpYWxpemVGb3JtKCk7XG5cblx0XHRwcm92aWRlci51cGRhdGVWaXNpYmlsaXR5RWxlbWVudHMoKTtcblx0XHQkKCcjcmVnaXN0cmF0aW9uX3R5cGUnKS5vbignY2hhbmdlJywgcHJvdmlkZXIudXBkYXRlVmlzaWJpbGl0eUVsZW1lbnRzKTtcblx0fSxcblx0dXBkYXRlVmlzaWJpbGl0eUVsZW1lbnRzKCl7XG5cdFx0aWYocHJvdmlkZXIucHJvdmlkZXJUeXBlICE9PSAnU0lQJyl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBlbEhvc3QgXHQgICAgXHQ9ICQoJyNlbEhvc3QnKTtcblx0XHRsZXQgZWxVc2VybmFtZSAgXHQ9ICQoJyNlbFVzZXJuYW1lJyk7XG5cdFx0bGV0IGVsU2VjcmV0ICAgIFx0PSAkKCcjZWxTZWNyZXQnKTtcblx0XHRsZXQgZWxBZGRpdGlvbmFsSG9zdD0gJCgnI2VsQWRkaXRpb25hbEhvc3RzJyk7XG5cdFx0bGV0IHJlZ1R5cGUgXHRcdD0gJCgnI3JlZ2lzdHJhdGlvbl90eXBlJykudmFsKCk7XG5cdFx0bGV0IGVsVW5pcUlkXHRcdD0gJCgnI3VuaXFpZCcpO1xuXG5cdFx0bGV0IHZhbFVzZXJOYW1lICBcdD0gJCgnI3VzZXJuYW1lJyk7XG5cdFx0bGV0IHZhbFNlY3JldCAgIFx0PSAkKCcjc2VjcmV0Jyk7XG5cblx0XHRpZih2YWxVc2VyTmFtZS52YWwoKSA9PT0gZWxVbmlxSWQudmFsKCkpe1xuXHRcdFx0dmFsVXNlck5hbWUudmFsKCcnKTtcblx0XHR9XG5cdFx0dmFsVXNlck5hbWUucmVtb3ZlQXR0cigncmVhZG9ubHknKTtcblxuXHRcdGlmKHJlZ1R5cGUgPT09ICdvdXRib3VuZCcpe1xuXHRcdFx0dmFsU2VjcmV0LmF0dHIoJ3R5cGUnLCAncGFzc3dvcmQnKVxuXHRcdFx0ZWxIb3N0LnNob3coKTtcblx0XHRcdGVsVXNlcm5hbWUuc2hvdygpO1xuXHRcdFx0ZWxTZWNyZXQuc2hvdygpO1xuXHRcdFx0ZWxBZGRpdGlvbmFsSG9zdC5zaG93KCk7XG5cdFx0fWVsc2UgaWYocmVnVHlwZSA9PT0gJ2luYm91bmQnKXtcblx0XHRcdHZhbFVzZXJOYW1lLnZhbChlbFVuaXFJZC52YWwoKSk7XG5cdFx0XHR2YWxVc2VyTmFtZS5hdHRyKCdyZWFkb25seScsICcnKTtcblx0XHRcdGlmKHZhbFNlY3JldC52YWwoKS50cmltKCkgPT09ICcnKXtcblx0XHRcdFx0dmFsU2VjcmV0LnZhbCgnaWQ9JyskKCcjaWQnKS52YWwoKSsnLScrZWxVbmlxSWQudmFsKCkpXG5cdFx0XHR9XG5cdFx0XHR2YWxTZWNyZXQuYXR0cigndHlwZScsICd0ZXh0JylcblxuXHRcdFx0ZWxIb3N0LmhpZGUoKTtcblx0XHRcdGVsVXNlcm5hbWUuc2hvdygpO1xuXHRcdFx0ZWxTZWNyZXQuc2hvdygpO1xuXHRcdFx0ZWxBZGRpdGlvbmFsSG9zdC5oaWRlKCk7XG5cdFx0fWVsc2UgaWYocmVnVHlwZSA9PT0gJ25vbmUnKXtcblx0XHRcdGVsSG9zdC5zaG93KCk7XG5cdFx0XHRlbFVzZXJuYW1lLmhpZGUoKTtcblx0XHRcdGVsU2VjcmV0LmhpZGUoKTtcblx0XHRcdGVsQWRkaXRpb25hbEhvc3Quc2hvdygpO1xuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIEFkZHMgcmVjb3JkIHRvIGhvc3RzIHRhYmxlXG5cdCAqL1xuXHRjYk9uQ29tcGxldGVIb3N0QWRkcmVzcygpe1xuXHRcdGNvbnN0IHZhbHVlID0gcHJvdmlkZXIuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlJywgJ2FkZGl0aW9uYWwtaG9zdCcpO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0Y29uc3QgdmFsaWRhdGlvbiA9IHZhbHVlLm1hdGNoKHByb3ZpZGVyLmhvc3RJbnB1dFZhbGlkYXRpb24pO1xuXHRcdFx0aWYgKHZhbGlkYXRpb249PT1udWxsXG5cdFx0XHRcdHx8IHZhbGlkYXRpb24ubGVuZ3RoPT09MCl7XG5cdFx0XHRcdHByb3ZpZGVyLiRhZGRpdGlvbmFsSG9zdElucHV0LnRyYW5zaXRpb24oJ3NoYWtlJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCQoYC5ob3N0LXJvd1tkYXRhLXZhbHVlPVwiJHt2YWx1ZX1cIl1gKS5sZW5ndGg9PT0wKXtcblx0XHRcdFx0Y29uc3QgJHRyID0gJCgnLmhvc3Qtcm93LXRwbCcpLmxhc3QoKTtcblx0XHRcdFx0Y29uc3QgJGNsb25lID0gJHRyLmNsb25lKHRydWUpO1xuXHRcdFx0XHQkY2xvbmVcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ2hvc3Qtcm93LXRwbCcpXG5cdFx0XHRcdFx0LmFkZENsYXNzKCdob3N0LXJvdycpXG5cdFx0XHRcdFx0LnNob3coKTtcblx0XHRcdFx0JGNsb25lLmF0dHIoJ2RhdGEtdmFsdWUnLCB2YWx1ZSk7XG5cdFx0XHRcdCRjbG9uZS5maW5kKCcuYWRkcmVzcycpLmh0bWwodmFsdWUpO1xuXHRcdFx0XHRpZiAoJChwcm92aWRlci5ob3N0Um93KS5sYXN0KCkubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0JHRyLmFmdGVyKCRjbG9uZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JChwcm92aWRlci5ob3N0Um93KS5sYXN0KCkuYWZ0ZXIoJGNsb25lKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwcm92aWRlci51cGRhdGVIb3N0c1RhYmxlVmlldygpO1xuXHRcdFx0XHRwcm92aWRlci4kZGlycnR5RmllbGQudmFsKE1hdGgucmFuZG9tKCkpO1xuXHRcdFx0XHRwcm92aWRlci4kZGlycnR5RmllbGQudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHR9XG5cdFx0XHRwcm92aWRlci4kYWRkaXRpb25hbEhvc3RJbnB1dC52YWwoJycpO1xuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIFNob3dzIGR1bW15IGlmIHdlIGhhdmUgemVybyByb3dzXG5cdCAqL1xuXHR1cGRhdGVIb3N0c1RhYmxlVmlldygpIHtcblx0XHRjb25zdCBkdW1teSA9IGA8dHIgY2xhc3M9XCJkdW1teVwiPjx0ZCBjb2xzcGFuPVwiNFwiIGNsYXNzPVwiY2VudGVyIGFsaWduZWRcIj4ke2dsb2JhbFRyYW5zbGF0ZS5wcl9Ob0FueUFkZGl0aW9uYWxIb3N0c308L3RkPjwvdHI+YDtcblxuXHRcdGlmICgkKHByb3ZpZGVyLmhvc3RSb3cpLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0JCgnI2FkZGl0aW9uYWwtaG9zdHMtdGFibGUgdGJvZHknKS5hcHBlbmQoZHVtbXkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkKCcjYWRkaXRpb25hbC1ob3N0cy10YWJsZSB0Ym9keSAuZHVtbXknKS5yZW1vdmUoKTtcblx0XHR9XG5cdH0sXG5cdGNiQmVmb3JlU2VuZEZvcm0oc2V0dGluZ3MpIHtcblx0XHRjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcblx0XHRyZXN1bHQuZGF0YSA9IHByb3ZpZGVyLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZXMnKTtcblxuXHRcdGNvbnN0IGFyckFkZGl0aW9uYWxIb3N0cyA9IFtdO1xuXHRcdCQocHJvdmlkZXIuaG9zdFJvdykuZWFjaCgoaW5kZXgsIG9iaikgPT4ge1xuXHRcdFx0aWYgKCQob2JqKS5hdHRyKCdkYXRhLXZhbHVlJykpIHtcblx0XHRcdFx0YXJyQWRkaXRpb25hbEhvc3RzLnB1c2goe1xuXHRcdFx0XHRcdGFkZHJlc3M6ICQob2JqKS5hdHRyKCdkYXRhLXZhbHVlJyksXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJlc3VsdC5kYXRhLmFkZGl0aW9uYWxIb3N0cyA9IEpTT04uc3RyaW5naWZ5KGFyckFkZGl0aW9uYWxIb3N0cyk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSxcblx0Y2JBZnRlclNlbmRGb3JtKCkge1xuXG5cdH0sXG5cdGluaXRpYWxpemVGb3JtKCkge1xuXHRcdEZvcm0uJGZvcm1PYmogPSBwcm92aWRlci4kZm9ybU9iajtcblx0XHRGb3JtLiRmb3JtT2JqLmZvcm0uc2V0dGluZ3MucnVsZXMuY2hlY2tIb3N0UHJvdmlkZXIgPSAodmFsdWUpID0+IHtcblx0XHRcdGxldCBlbmFibGU7XG5cdFx0XHRpZigkKCcjcmVnaXN0cmF0aW9uX3R5cGUnKS52YWwoKSA9PT0gJ2luYm91bmQnKXtcblx0XHRcdFx0ZW5hYmxlID0gdHJ1ZTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRlbmFibGUgPSB2YWx1ZS50cmltKCkgIT09ICcnO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGVuYWJsZTtcblx0XHR9O1xuXHRcdHN3aXRjaCAocHJvdmlkZXIucHJvdmlkZXJUeXBlKSB7XG5cdFx0XHRjYXNlICdTSVAnOlxuXHRcdFx0XHRGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9cHJvdmlkZXJzL3NhdmUvc2lwYDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdJQVgnOlxuXHRcdFx0XHRGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9cHJvdmlkZXJzL3NhdmUvaWF4YDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdEZvcm0udmFsaWRhdGVSdWxlcyA9IHByb3ZpZGVyLnZhbGlkYXRlUnVsZXM7XG5cdFx0Rm9ybS5jYkJlZm9yZVNlbmRGb3JtID0gcHJvdmlkZXIuY2JCZWZvcmVTZW5kRm9ybTtcblx0XHRGb3JtLmNiQWZ0ZXJTZW5kRm9ybSA9IHByb3ZpZGVyLmNiQWZ0ZXJTZW5kRm9ybTtcblx0XHRGb3JtLmluaXRpYWxpemUoKTtcblx0fSxcbn07XG5cblxuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG5cdHByb3ZpZGVyLmluaXRpYWxpemUoKTtcbn0pO1xuIl19