"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, globalTranslate, UserMessage, updatePBX */
var upgradeStatusLoopWorker = {
  timeOut: 1000,
  timeOutHandle: '',
  iterations: 0,
  filename: '',
  initialize: function initialize(filename) {
    upgradeStatusLoopWorker.filename = filename;
    upgradeStatusLoopWorker.iterations = 0;
    upgradeStatusLoopWorker.restartWorker();
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
    upgradeStatusLoopWorker.worker();
  },
  worker: function worker() {
    window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
    PbxApi.FilesFirmwareDownloadStatus(upgradeStatusLoopWorker.filename, upgradeStatusLoopWorker.cbRefreshUpgradeStatus);
  },
  cbRefreshUpgradeStatus: function cbRefreshUpgradeStatus(response) {
    upgradeStatusLoopWorker.iterations += 1;
    upgradeStatusLoopWorker.timeoutHandle = window.setTimeout(upgradeStatusLoopWorker.worker, upgradeStatusLoopWorker.timeOut);
    if (response.length === 0 || response === false) return;

    if (response.d_status === 'DOWNLOAD_IN_PROGRESS') {
      $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
    } else if (response.d_status === 'DOWNLOAD_COMPLETE') {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
      $('i.loading.redo').addClass('sync').removeClass('redo');
      PbxApi.SystemUpgrade(response.filePath, updatePBX.cbAfterStartUpdate);
    } else if (response.d_status === 'DOWNLOAD_ERROR') {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      UserMessage.showMultiString(globalTranslate.upd_DownloadUpgradeError);
      $('i.loading.redo').addClass('redo').removeClass('loading');
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VcGRhdGUvdXBkYXRlLXN0YXR1cy13b3JrZXIuanMiXSwibmFtZXMiOlsidXBncmFkZVN0YXR1c0xvb3BXb3JrZXIiLCJ0aW1lT3V0IiwidGltZU91dEhhbmRsZSIsIml0ZXJhdGlvbnMiLCJmaWxlbmFtZSIsImluaXRpYWxpemUiLCJyZXN0YXJ0V29ya2VyIiwid2luZG93IiwiY2xlYXJUaW1lb3V0IiwidGltZW91dEhhbmRsZSIsIndvcmtlciIsIlBieEFwaSIsIkZpbGVzRmlybXdhcmVEb3dubG9hZFN0YXR1cyIsImNiUmVmcmVzaFVwZ3JhZGVTdGF0dXMiLCJyZXNwb25zZSIsInNldFRpbWVvdXQiLCJsZW5ndGgiLCJkX3N0YXR1cyIsIiQiLCJjbG9zZXN0IiwiZmluZCIsInRleHQiLCJkX3N0YXR1c19wcm9ncmVzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJTeXN0ZW1VcGdyYWRlIiwiZmlsZVBhdGgiLCJ1cGRhdGVQQlgiLCJjYkFmdGVyU3RhcnRVcGRhdGUiLCJVc2VyTWVzc2FnZSIsInNob3dNdWx0aVN0cmluZyIsImdsb2JhbFRyYW5zbGF0ZSIsInVwZF9Eb3dubG9hZFVwZ3JhZGVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsSUFBTUEsdUJBQXVCLEdBQUc7QUFDL0JDLEVBQUFBLE9BQU8sRUFBRSxJQURzQjtBQUUvQkMsRUFBQUEsYUFBYSxFQUFFLEVBRmdCO0FBRy9CQyxFQUFBQSxVQUFVLEVBQUUsQ0FIbUI7QUFJL0JDLEVBQUFBLFFBQVEsRUFBRSxFQUpxQjtBQUsvQkMsRUFBQUEsVUFMK0Isc0JBS3BCRCxRQUxvQixFQUtWO0FBQ3BCSixJQUFBQSx1QkFBdUIsQ0FBQ0ksUUFBeEIsR0FBbUNBLFFBQW5DO0FBQ0FKLElBQUFBLHVCQUF1QixDQUFDRyxVQUF4QixHQUFxQyxDQUFyQztBQUNBSCxJQUFBQSx1QkFBdUIsQ0FBQ00sYUFBeEI7QUFDQSxHQVQ4QjtBQVUvQkEsRUFBQUEsYUFWK0IsMkJBVWY7QUFDZkMsSUFBQUEsTUFBTSxDQUFDQyxZQUFQLENBQW9CUix1QkFBdUIsQ0FBQ1MsYUFBNUM7QUFDQVQsSUFBQUEsdUJBQXVCLENBQUNVLE1BQXhCO0FBQ0EsR0FiOEI7QUFjL0JBLEVBQUFBLE1BZCtCLG9CQWN0QjtBQUNSSCxJQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JSLHVCQUF1QixDQUFDUyxhQUE1QztBQUNBRSxJQUFBQSxNQUFNLENBQUNDLDJCQUFQLENBQW1DWix1QkFBdUIsQ0FBQ0ksUUFBM0QsRUFBcUVKLHVCQUF1QixDQUFDYSxzQkFBN0Y7QUFDQSxHQWpCOEI7QUFrQi9CQSxFQUFBQSxzQkFsQitCLGtDQWtCUkMsUUFsQlEsRUFrQkU7QUFDaENkLElBQUFBLHVCQUF1QixDQUFDRyxVQUF4QixJQUFzQyxDQUF0QztBQUNBSCxJQUFBQSx1QkFBdUIsQ0FBQ1MsYUFBeEIsR0FDQ0YsTUFBTSxDQUFDUSxVQUFQLENBQWtCZix1QkFBdUIsQ0FBQ1UsTUFBMUMsRUFBa0RWLHVCQUF1QixDQUFDQyxPQUExRSxDQUREO0FBRUEsUUFBSWEsUUFBUSxDQUFDRSxNQUFULEtBQW9CLENBQXBCLElBQXlCRixRQUFRLEtBQUssS0FBMUMsRUFBaUQ7O0FBQ2pELFFBQUlBLFFBQVEsQ0FBQ0csUUFBVCxLQUFzQixzQkFBMUIsRUFBa0Q7QUFDakRDLE1BQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CQyxPQUFwQixDQUE0QixHQUE1QixFQUFpQ0MsSUFBakMsQ0FBc0MsVUFBdEMsRUFBa0RDLElBQWxELFdBQTBEUCxRQUFRLENBQUNRLGlCQUFuRTtBQUNBLEtBRkQsTUFFTyxJQUFJUixRQUFRLENBQUNHLFFBQVQsS0FBc0IsbUJBQTFCLEVBQStDO0FBQ3JEVixNQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JSLHVCQUF1QixDQUFDUyxhQUE1QztBQUNBUyxNQUFBQSxDQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQkMsT0FBcEIsQ0FBNEIsR0FBNUIsRUFBaUNDLElBQWpDLENBQXNDLFVBQXRDLEVBQWtEQyxJQUFsRCxXQUEwRFAsUUFBUSxDQUFDUSxpQkFBbkU7QUFDQUosTUFBQUEsQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JLLFFBQXBCLENBQTZCLE1BQTdCLEVBQXFDQyxXQUFyQyxDQUFpRCxNQUFqRDtBQUNBYixNQUFBQSxNQUFNLENBQUNjLGFBQVAsQ0FBcUJYLFFBQVEsQ0FBQ1ksUUFBOUIsRUFBd0NDLFNBQVMsQ0FBQ0Msa0JBQWxEO0FBQ0EsS0FMTSxNQUtBLElBQUlkLFFBQVEsQ0FBQ0csUUFBVCxLQUFzQixnQkFBMUIsRUFBNEM7QUFDbERWLE1BQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQlIsdUJBQXVCLENBQUNTLGFBQTVDO0FBQ0FvQixNQUFBQSxXQUFXLENBQUNDLGVBQVosQ0FBNEJDLGVBQWUsQ0FBQ0Msd0JBQTVDO0FBQ0FkLE1BQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CSyxRQUFwQixDQUE2QixNQUE3QixFQUFxQ0MsV0FBckMsQ0FBaUQsU0FBakQ7QUFDQTtBQUNEO0FBbkM4QixDQUFoQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIxIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBQYnhBcGksIGdsb2JhbFRyYW5zbGF0ZSwgVXNlck1lc3NhZ2UsIHVwZGF0ZVBCWCAqL1xuXG5jb25zdCB1cGdyYWRlU3RhdHVzTG9vcFdvcmtlciA9IHtcblx0dGltZU91dDogMTAwMCxcblx0dGltZU91dEhhbmRsZTogJycsXG5cdGl0ZXJhdGlvbnM6IDAsXG5cdGZpbGVuYW1lOiAnJyxcblx0aW5pdGlhbGl6ZShmaWxlbmFtZSkge1xuXHRcdHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLmZpbGVuYW1lID0gZmlsZW5hbWU7XG5cdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIuaXRlcmF0aW9ucyA9IDA7XG5cdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIucmVzdGFydFdvcmtlcigpO1xuXHR9LFxuXHRyZXN0YXJ0V29ya2VyKCkge1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodXBncmFkZVN0YXR1c0xvb3BXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIud29ya2VyKCk7XG5cdH0sXG5cdHdvcmtlcigpIHtcblx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdFBieEFwaS5GaWxlc0Zpcm13YXJlRG93bmxvYWRTdGF0dXModXBncmFkZVN0YXR1c0xvb3BXb3JrZXIuZmlsZW5hbWUsIHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLmNiUmVmcmVzaFVwZ3JhZGVTdGF0dXMpO1xuXHR9LFxuXHRjYlJlZnJlc2hVcGdyYWRlU3RhdHVzKHJlc3BvbnNlKSB7XG5cdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIuaXRlcmF0aW9ucyArPSAxO1xuXHRcdHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUgPVxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQodXBncmFkZVN0YXR1c0xvb3BXb3JrZXIud29ya2VyLCB1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci50aW1lT3V0KTtcblx0XHRpZiAocmVzcG9uc2UubGVuZ3RoID09PSAwIHx8IHJlc3BvbnNlID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdGlmIChyZXNwb25zZS5kX3N0YXR1cyA9PT0gJ0RPV05MT0FEX0lOX1BST0dSRVNTJykge1xuXHRcdFx0JCgnaS5sb2FkaW5nLnJlZG8nKS5jbG9zZXN0KCdhJykuZmluZCgnLnBlcmNlbnQnKS50ZXh0KGAke3Jlc3BvbnNlLmRfc3RhdHVzX3Byb2dyZXNzfSVgKTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLmRfc3RhdHVzID09PSAnRE9XTkxPQURfQ09NUExFVEUnKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdFx0JCgnaS5sb2FkaW5nLnJlZG8nKS5jbG9zZXN0KCdhJykuZmluZCgnLnBlcmNlbnQnKS50ZXh0KGAke3Jlc3BvbnNlLmRfc3RhdHVzX3Byb2dyZXNzfSVgKTtcblx0XHRcdCQoJ2kubG9hZGluZy5yZWRvJykuYWRkQ2xhc3MoJ3N5bmMnKS5yZW1vdmVDbGFzcygncmVkbycpO1xuXHRcdFx0UGJ4QXBpLlN5c3RlbVVwZ3JhZGUocmVzcG9uc2UuZmlsZVBhdGgsIHVwZGF0ZVBCWC5jYkFmdGVyU3RhcnRVcGRhdGUpO1xuXHRcdH0gZWxzZSBpZiAocmVzcG9uc2UuZF9zdGF0dXMgPT09ICdET1dOTE9BRF9FUlJPUicpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodXBncmFkZVN0YXR1c0xvb3BXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoZ2xvYmFsVHJhbnNsYXRlLnVwZF9Eb3dubG9hZFVwZ3JhZGVFcnJvcik7XG5cdFx0XHQkKCdpLmxvYWRpbmcucmVkbycpLmFkZENsYXNzKCdyZWRvJykucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnKTtcblx0XHR9XG5cdH0sXG59OyJdfQ==