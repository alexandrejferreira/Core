"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global Config, globalWebAdminLanguage, globalPBXLicense, globalPBXVersion */

/**
 * Object for managing API updates firmware.
 */
var UpdateApi = {
  /**
   * Retrieves available module versions.
   * @param {function} cbSuccess - The callback function to execute on success.
   * @returns {boolean} Returns true.
   */
  getModulesUpdates: function getModulesUpdates(cbSuccess) {
    var requestData = {
      PBXVER: globalPBXVersion.replace(/-dev/i, ''),
      LANGUAGE: globalWebAdminLanguage
    };
    $.api({
      url: "".concat(Config.updateUrl, "getAvailableModules"),
      on: 'now',
      method: 'POST',
      data: requestData,
      successTest: function successTest(response) {
        // Test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0 && response.result === 'SUCCESS';
      },
      onSuccess: cbSuccess
    });
  },

  /**
   * Retrieves the installation link for a module.
   * @param {object} params - The parameters for retrieving the installation link.
   * @param {function} cbSuccess - The callback function to execute on success.
   * @param {function} cbFailure - The callback function to execute on failure.
   * @returns {boolean} Returns true.
   */
  GetModuleInstallLink: function GetModuleInstallLink(params, cbSuccess, cbFailure) {
    var requestData = {
      LICENSE: globalPBXLicense,
      RELEASEID: params.releaseId
    };
    $.api({
      url: "".concat(Config.updateUrl, "getModuleLink"),
      on: 'now',
      method: 'POST',
      data: requestData,
      successTest: function successTest(response) {
        // Test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0 && response.result === 'SUCCESS';
      },
      onSuccess: function onSuccess(response) {
        cbSuccess(params, response);
      },
      onFailure: function onFailure() {
        cbFailure(params);
      }
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VcGRhdGUvdXBkYXRlLWFwaS5qcyJdLCJuYW1lcyI6WyJVcGRhdGVBcGkiLCJnZXRNb2R1bGVzVXBkYXRlcyIsImNiU3VjY2VzcyIsInJlcXVlc3REYXRhIiwiUEJYVkVSIiwiZ2xvYmFsUEJYVmVyc2lvbiIsInJlcGxhY2UiLCJMQU5HVUFHRSIsImdsb2JhbFdlYkFkbWluTGFuZ3VhZ2UiLCIkIiwiYXBpIiwidXJsIiwiQ29uZmlnIiwidXBkYXRlVXJsIiwib24iLCJtZXRob2QiLCJkYXRhIiwic3VjY2Vzc1Rlc3QiLCJyZXNwb25zZSIsInVuZGVmaW5lZCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJyZXN1bHQiLCJvblN1Y2Nlc3MiLCJHZXRNb2R1bGVJbnN0YWxsTGluayIsInBhcmFtcyIsImNiRmFpbHVyZSIsIkxJQ0VOU0UiLCJnbG9iYWxQQlhMaWNlbnNlIiwiUkVMRUFTRUlEIiwicmVsZWFzZUlkIiwib25GYWlsdXJlIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsU0FBUyxHQUFHO0FBQ2Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxFQUFBQSxpQkFOYyw2QkFNSUMsU0FOSixFQU1lO0FBQ3pCLFFBQU1DLFdBQVcsR0FBRztBQUNoQkMsTUFBQUEsTUFBTSxFQUFFQyxnQkFBZ0IsQ0FBQ0MsT0FBakIsQ0FBeUIsT0FBekIsRUFBa0MsRUFBbEMsQ0FEUTtBQUVoQkMsTUFBQUEsUUFBUSxFQUFFQztBQUZNLEtBQXBCO0FBSUFDLElBQUFBLENBQUMsQ0FBQ0MsR0FBRixDQUFNO0FBQ0ZDLE1BQUFBLEdBQUcsWUFBS0MsTUFBTSxDQUFDQyxTQUFaLHdCQUREO0FBRUZDLE1BQUFBLEVBQUUsRUFBRSxLQUZGO0FBR0ZDLE1BQUFBLE1BQU0sRUFBRSxNQUhOO0FBSUZDLE1BQUFBLElBQUksRUFBRWIsV0FKSjtBQUtGYyxNQUFBQSxXQUxFLHVCQUtVQyxRQUxWLEVBS29CO0FBQ2xCO0FBQ0EsZUFBT0EsUUFBUSxLQUFLQyxTQUFiLElBQ0FDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxRQUFaLEVBQXNCSSxNQUF0QixHQUErQixDQUQvQixJQUVBSixRQUFRLENBQUNLLE1BQVQsS0FBb0IsU0FGM0I7QUFHSCxPQVZDO0FBV0ZDLE1BQUFBLFNBQVMsRUFBRXRCO0FBWFQsS0FBTjtBQWFILEdBeEJhOztBQTBCZDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJdUIsRUFBQUEsb0JBakNjLGdDQWlDT0MsTUFqQ1AsRUFpQ2V4QixTQWpDZixFQWlDMEJ5QixTQWpDMUIsRUFpQ3FDO0FBQy9DLFFBQU14QixXQUFXLEdBQUc7QUFDaEJ5QixNQUFBQSxPQUFPLEVBQUVDLGdCQURPO0FBRWhCQyxNQUFBQSxTQUFTLEVBQUVKLE1BQU0sQ0FBQ0s7QUFGRixLQUFwQjtBQUlBdEIsSUFBQUEsQ0FBQyxDQUFDQyxHQUFGLENBQU07QUFDRkMsTUFBQUEsR0FBRyxZQUFLQyxNQUFNLENBQUNDLFNBQVosa0JBREQ7QUFFRkMsTUFBQUEsRUFBRSxFQUFFLEtBRkY7QUFHRkMsTUFBQUEsTUFBTSxFQUFFLE1BSE47QUFJRkMsTUFBQUEsSUFBSSxFQUFFYixXQUpKO0FBS0ZjLE1BQUFBLFdBTEUsdUJBS1VDLFFBTFYsRUFLb0I7QUFDbEI7QUFDQSxlQUFPQSxRQUFRLEtBQUtDLFNBQWIsSUFDQUMsTUFBTSxDQUFDQyxJQUFQLENBQVlILFFBQVosRUFBc0JJLE1BQXRCLEdBQStCLENBRC9CLElBRUFKLFFBQVEsQ0FBQ0ssTUFBVCxLQUFvQixTQUYzQjtBQUdILE9BVkM7QUFXRkMsTUFBQUEsU0FYRSxxQkFXUU4sUUFYUixFQVdrQjtBQUNoQmhCLFFBQUFBLFNBQVMsQ0FBQ3dCLE1BQUQsRUFBU1IsUUFBVCxDQUFUO0FBQ0gsT0FiQztBQWNGYyxNQUFBQSxTQWRFLHVCQWNVO0FBQ1JMLFFBQUFBLFNBQVMsQ0FBQ0QsTUFBRCxDQUFUO0FBQ0g7QUFoQkMsS0FBTjtBQWtCSDtBQXhEYSxDQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNaWtvUEJYIC0gZnJlZSBwaG9uZSBzeXN0ZW0gZm9yIHNtYWxsIGJ1c2luZXNzXG4gKiBDb3B5cmlnaHQgwqkgMjAxNy0yMDIzIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBDb25maWcsIGdsb2JhbFdlYkFkbWluTGFuZ3VhZ2UsIGdsb2JhbFBCWExpY2Vuc2UsIGdsb2JhbFBCWFZlcnNpb24gKi9cblxuLyoqXG4gKiBPYmplY3QgZm9yIG1hbmFnaW5nIEFQSSB1cGRhdGVzIGZpcm13YXJlLlxuICovXG5jb25zdCBVcGRhdGVBcGkgPSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGF2YWlsYWJsZSBtb2R1bGUgdmVyc2lvbnMuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2JTdWNjZXNzIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gc3VjY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlLlxuICAgICAqL1xuICAgIGdldE1vZHVsZXNVcGRhdGVzKGNiU3VjY2Vzcykge1xuICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IHtcbiAgICAgICAgICAgIFBCWFZFUjogZ2xvYmFsUEJYVmVyc2lvbi5yZXBsYWNlKC8tZGV2L2ksICcnKSxcbiAgICAgICAgICAgIExBTkdVQUdFOiBnbG9iYWxXZWJBZG1pbkxhbmd1YWdlLFxuICAgICAgICB9O1xuICAgICAgICAkLmFwaSh7XG4gICAgICAgICAgICB1cmw6IGAke0NvbmZpZy51cGRhdGVVcmx9Z2V0QXZhaWxhYmxlTW9kdWxlc2AsXG4gICAgICAgICAgICBvbjogJ25vdycsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IHJlcXVlc3REYXRhLFxuICAgICAgICAgICAgc3VjY2Vzc1Rlc3QocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBUZXN0IHdoZXRoZXIgYSBKU09OIHJlc3BvbnNlIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgJiYgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgJiYgcmVzcG9uc2UucmVzdWx0ID09PSAnU1VDQ0VTUyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdWNjZXNzOiBjYlN1Y2Nlc3MsXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGluc3RhbGxhdGlvbiBsaW5rIGZvciBhIG1vZHVsZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgZm9yIHJldHJpZXZpbmcgdGhlIGluc3RhbGxhdGlvbiBsaW5rLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiU3VjY2VzcyAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBleGVjdXRlIG9uIHN1Y2Nlc3MuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2JGYWlsdXJlIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZmFpbHVyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlLlxuICAgICAqL1xuICAgIEdldE1vZHVsZUluc3RhbGxMaW5rKHBhcmFtcywgY2JTdWNjZXNzLCBjYkZhaWx1cmUpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICBMSUNFTlNFOiBnbG9iYWxQQlhMaWNlbnNlLFxuICAgICAgICAgICAgUkVMRUFTRUlEOiBwYXJhbXMucmVsZWFzZUlkLFxuICAgICAgICB9O1xuICAgICAgICAkLmFwaSh7XG4gICAgICAgICAgICB1cmw6IGAke0NvbmZpZy51cGRhdGVVcmx9Z2V0TW9kdWxlTGlua2AsXG4gICAgICAgICAgICBvbjogJ25vdycsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IHJlcXVlc3REYXRhLFxuICAgICAgICAgICAgc3VjY2Vzc1Rlc3QocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBUZXN0IHdoZXRoZXIgYSBKU09OIHJlc3BvbnNlIGlzIHZhbGlkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgJiYgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgJiYgcmVzcG9uc2UucmVzdWx0ID09PSAnU1VDQ0VTUyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgY2JTdWNjZXNzKHBhcmFtcywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRmFpbHVyZSgpIHtcbiAgICAgICAgICAgICAgICBjYkZhaWx1cmUocGFyYW1zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH0sXG59OyJdfQ==