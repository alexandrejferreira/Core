"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl,globalTranslate, Form, PasswordScore, PbxApi, UserMessage, SoundFilesSelector */
var generalSettingsModify = {
  $dirrtyField: $('#dirrty'),
  $formObj: $('#general-settings-form'),
  $webAdminPassword: $('#WebAdminPassword'),
  $sshPassword: $('#SSHPassword'),
  validateRules: {
    pbxname: {
      identifier: 'PBXName',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.gs_ValidateEmptyPBXName
      }]
    },
    WebAdminPassword: {
      identifier: 'WebAdminPassword',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.gs_ValidateEmptyWebPassword
      }, {
        type: 'minLength[5]',
        prompt: globalTranslate.gs_ValidateWeakWebPassword
      }]
    },
    WebAdminPasswordRepeat: {
      identifier: 'WebAdminPasswordRepeat',
      rules: [{
        type: 'match[WebAdminPassword]',
        prompt: globalTranslate.gs_ValidateWebPasswordsFieldDifferent
      }]
    },
    SSHPassword: {
      identifier: 'SSHPassword',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.gs_ValidateEmptySSHPassword
      }, {
        type: 'minLength[5]',
        prompt: globalTranslate.gs_ValidateWeakSSHPassword
      }]
    },
    SSHPasswordRepeat: {
      identifier: 'SSHPasswordRepeat',
      rules: [{
        type: 'match[SSHPassword]',
        prompt: globalTranslate.gs_ValidateSSHPasswordsFieldDifferent
      }]
    },
    WEBPort: {
      identifier: 'WEBPort',
      rules: [{
        type: 'integer[1..65535]',
        prompt: globalTranslate.gs_ValidateWEBPortOutOfRange
      }, {
        type: 'different[WEBHTTPSPort]',
        prompt: globalTranslate.gs_ValidateWEBHTTPSPortNotEqualToWEBPort
      }, {
        type: 'different[AJAMPortTLS]',
        prompt: globalTranslate.gs_ValidateWEBPortNotEqualToAjamPort
      }, {
        type: 'different[AJAMPort]',
        prompt: globalTranslate.gs_ValidateWEBPortNotEqualToAjamTLSPort
      }]
    },
    WEBHTTPSPort: {
      identifier: 'WEBHTTPSPort',
      rules: [{
        type: 'integer[1..65535]',
        prompt: globalTranslate.gs_ValidateWEBHTTPSPortOutOfRange
      }, {
        type: 'different[WEBPort]',
        prompt: globalTranslate.gs_ValidateWEBHTTPSPortNotEqualToWEBPort
      }, {
        type: 'different[AJAMPortTLS]',
        prompt: globalTranslate.gs_ValidateWEBHTTPSPortNotEqualToAjamPort
      }, {
        type: 'different[AJAMPort]',
        prompt: globalTranslate.gs_ValidateWEBHTTPSPortNotEqualToAjamTLSPort
      }]
    },
    AJAMPort: {
      identifier: 'AJAMPort',
      rules: [{
        type: 'integer[1..65535]',
        prompt: globalTranslate.gs_ValidateAJAMPortOutOfRange
      }, {
        type: 'different[AJAMPortTLS]',
        prompt: globalTranslate.gs_ValidateAJAMPortOutOfRange
      }]
    }
  },
  initialize: function initialize() {
    generalSettingsModify.$webAdminPassword.on('keyup', function () {
      PasswordScore.checkPassStrength({
        pass: generalSettingsModify.$webAdminPassword.val(),
        bar: $('.password-score'),
        section: $('.password-score-section')
      });
    });
    generalSettingsModify.$sshPassword.on('keyup', function () {
      PasswordScore.checkPassStrength({
        pass: generalSettingsModify.$sshPassword.val(),
        bar: $('.ssh-password-score'),
        section: $('.ssh-password-score-section')
      });
    });
    $('#general-settings-menu').find('.item').tab({
      history: true,
      historyType: 'hash'
    });
    $('#general-settings-form .checkbox').checkbox();
    $('#general-settings-form .dropdown').dropdown();
    $('#audio-codecs-table, #video-codecs-table').tableDnD({
      onDrop: function onDrop() {
        generalSettingsModify.$dirrtyField.val(Math.random());
        generalSettingsModify.$dirrtyField.trigger('change');
      },
      onDragClass: 'hoveringRow',
      dragHandle: '.dragHandle'
    });
    $('#general-settings-form .audio-message-select').dropdown(SoundFilesSelector.getDropdownSettingsWithEmpty());
    generalSettingsModify.initializeForm();
  },
  checkDeleteAllConditions: function checkDeleteAllConditions() {
    var deleteAllInput = generalSettingsModify.$formObj.form('get value', 'deleteAllInput');

    if (deleteAllInput === globalTranslate.gs_EnterDeleteAllPhrase) {
      PbxApi.SystemRestoreDefaultSettings(generalSettingsModify.cbAfterRestoreDefaultSettings);
    }
  },
  cbAfterRestoreDefaultSettings: function cbAfterRestoreDefaultSettings(response) {
    if (response === true) {
      UserMessage.showInformation(globalTranslate.gs_AllSettingsDeleted);
    } else {
      UserMessage.showMultiString(response);
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = generalSettingsModify.$formObj.form('get values');
    var arrCodecs = [];
    $('#audio-codecs-table .codec-row, #video-codecs-table .codec-row').each(function (index, obj) {
      if ($(obj).attr('id')) {
        arrCodecs.push({
          codecId: $(obj).attr('id'),
          disabled: $(obj).find('.checkbox').checkbox('is unchecked'),
          priority: index
        });
      }
    });
    result.data.codecs = JSON.stringify(arrCodecs);
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm(response) {
    if (!response.success) {
      Form.$submitButton.removeClass('disabled');
    }

    generalSettingsModify.checkDeleteAllConditions();
  },
  initializeForm: function initializeForm() {
    Form.$formObj = generalSettingsModify.$formObj;
    Form.url = "".concat(globalRootUrl, "general-settings/save");
    Form.validateRules = generalSettingsModify.validateRules;
    Form.cbBeforeSendForm = generalSettingsModify.cbBeforeSendForm;
    Form.cbAfterSendForm = generalSettingsModify.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  generalSettingsModify.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9HZW5lcmFsU2V0dGluZ3MvZ2VuZXJhbC1zZXR0aW5ncy1tb2RpZnkuanMiXSwibmFtZXMiOlsiZ2VuZXJhbFNldHRpbmdzTW9kaWZ5IiwiJGRpcnJ0eUZpZWxkIiwiJCIsIiRmb3JtT2JqIiwiJHdlYkFkbWluUGFzc3dvcmQiLCIkc3NoUGFzc3dvcmQiLCJ2YWxpZGF0ZVJ1bGVzIiwicGJ4bmFtZSIsImlkZW50aWZpZXIiLCJydWxlcyIsInR5cGUiLCJwcm9tcHQiLCJnbG9iYWxUcmFuc2xhdGUiLCJnc19WYWxpZGF0ZUVtcHR5UEJYTmFtZSIsIldlYkFkbWluUGFzc3dvcmQiLCJnc19WYWxpZGF0ZUVtcHR5V2ViUGFzc3dvcmQiLCJnc19WYWxpZGF0ZVdlYWtXZWJQYXNzd29yZCIsIldlYkFkbWluUGFzc3dvcmRSZXBlYXQiLCJnc19WYWxpZGF0ZVdlYlBhc3N3b3Jkc0ZpZWxkRGlmZmVyZW50IiwiU1NIUGFzc3dvcmQiLCJnc19WYWxpZGF0ZUVtcHR5U1NIUGFzc3dvcmQiLCJnc19WYWxpZGF0ZVdlYWtTU0hQYXNzd29yZCIsIlNTSFBhc3N3b3JkUmVwZWF0IiwiZ3NfVmFsaWRhdGVTU0hQYXNzd29yZHNGaWVsZERpZmZlcmVudCIsIldFQlBvcnQiLCJnc19WYWxpZGF0ZVdFQlBvcnRPdXRPZlJhbmdlIiwiZ3NfVmFsaWRhdGVXRUJIVFRQU1BvcnROb3RFcXVhbFRvV0VCUG9ydCIsImdzX1ZhbGlkYXRlV0VCUG9ydE5vdEVxdWFsVG9BamFtUG9ydCIsImdzX1ZhbGlkYXRlV0VCUG9ydE5vdEVxdWFsVG9BamFtVExTUG9ydCIsIldFQkhUVFBTUG9ydCIsImdzX1ZhbGlkYXRlV0VCSFRUUFNQb3J0T3V0T2ZSYW5nZSIsImdzX1ZhbGlkYXRlV0VCSFRUUFNQb3J0Tm90RXF1YWxUb0FqYW1Qb3J0IiwiZ3NfVmFsaWRhdGVXRUJIVFRQU1BvcnROb3RFcXVhbFRvQWphbVRMU1BvcnQiLCJBSkFNUG9ydCIsImdzX1ZhbGlkYXRlQUpBTVBvcnRPdXRPZlJhbmdlIiwiaW5pdGlhbGl6ZSIsIm9uIiwiUGFzc3dvcmRTY29yZSIsImNoZWNrUGFzc1N0cmVuZ3RoIiwicGFzcyIsInZhbCIsImJhciIsInNlY3Rpb24iLCJmaW5kIiwidGFiIiwiaGlzdG9yeSIsImhpc3RvcnlUeXBlIiwiY2hlY2tib3giLCJkcm9wZG93biIsInRhYmxlRG5EIiwib25Ecm9wIiwiTWF0aCIsInJhbmRvbSIsInRyaWdnZXIiLCJvbkRyYWdDbGFzcyIsImRyYWdIYW5kbGUiLCJTb3VuZEZpbGVzU2VsZWN0b3IiLCJnZXREcm9wZG93blNldHRpbmdzV2l0aEVtcHR5IiwiaW5pdGlhbGl6ZUZvcm0iLCJjaGVja0RlbGV0ZUFsbENvbmRpdGlvbnMiLCJkZWxldGVBbGxJbnB1dCIsImZvcm0iLCJnc19FbnRlckRlbGV0ZUFsbFBocmFzZSIsIlBieEFwaSIsIlN5c3RlbVJlc3RvcmVEZWZhdWx0U2V0dGluZ3MiLCJjYkFmdGVyUmVzdG9yZURlZmF1bHRTZXR0aW5ncyIsInJlc3BvbnNlIiwiVXNlck1lc3NhZ2UiLCJzaG93SW5mb3JtYXRpb24iLCJnc19BbGxTZXR0aW5nc0RlbGV0ZWQiLCJzaG93TXVsdGlTdHJpbmciLCJjYkJlZm9yZVNlbmRGb3JtIiwic2V0dGluZ3MiLCJyZXN1bHQiLCJkYXRhIiwiYXJyQ29kZWNzIiwiZWFjaCIsImluZGV4Iiwib2JqIiwiYXR0ciIsInB1c2giLCJjb2RlY0lkIiwiZGlzYWJsZWQiLCJwcmlvcml0eSIsImNvZGVjcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYkFmdGVyU2VuZEZvcm0iLCJzdWNjZXNzIiwiRm9ybSIsIiRzdWJtaXRCdXR0b24iLCJyZW1vdmVDbGFzcyIsInVybCIsImdsb2JhbFJvb3RVcmwiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFFQSxJ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QUFDRCxLQVJEO0FBU0FKLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVSxNQUFaLEdBQXFCQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVgsU0FBZixDQUFyQjtBQUVBLFdBQU9GLE1BQVA7QUFDQSxHQXBMNEI7QUFxTDdCYyxFQUFBQSxlQXJMNkIsMkJBcUxickIsUUFyTGEsRUFxTEg7QUFDekIsUUFBRyxDQUFDQSxRQUFRLENBQUNzQixPQUFiLEVBQXFCO0FBQ3BCQyxNQUFBQSxJQUFJLENBQUNDLGFBQUwsQ0FBbUJDLFdBQW5CLENBQStCLFVBQS9CO0FBQ0E7O0FBQ0QzRixJQUFBQSxxQkFBcUIsQ0FBQzJELHdCQUF0QjtBQUNBLEdBMUw0QjtBQTJMN0JELEVBQUFBLGNBM0w2Qiw0QkEyTFo7QUFDaEIrQixJQUFBQSxJQUFJLENBQUN0RixRQUFMLEdBQWdCSCxxQkFBcUIsQ0FBQ0csUUFBdEM7QUFDQXNGLElBQUFBLElBQUksQ0FBQ0csR0FBTCxhQUFjQyxhQUFkO0FBQ0FKLElBQUFBLElBQUksQ0FBQ25GLGFBQUwsR0FBcUJOLHFCQUFxQixDQUFDTSxhQUEzQztBQUNBbUYsSUFBQUEsSUFBSSxDQUFDbEIsZ0JBQUwsR0FBd0J2RSxxQkFBcUIsQ0FBQ3VFLGdCQUE5QztBQUNBa0IsSUFBQUEsSUFBSSxDQUFDRixlQUFMLEdBQXVCdkYscUJBQXFCLENBQUN1RixlQUE3QztBQUNBRSxJQUFBQSxJQUFJLENBQUN0RCxVQUFMO0FBQ0E7QUFsTTRCLENBQTlCO0FBcU1BakMsQ0FBQyxDQUFDNEYsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2Qi9GLEVBQUFBLHFCQUFxQixDQUFDbUMsVUFBdEI7QUFDQSxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCAoQykgMjAxNy0yMDIwIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cblxuLyogZ2xvYmFsIGdsb2JhbFJvb3RVcmwsZ2xvYmFsVHJhbnNsYXRlLCBGb3JtLCBQYXNzd29yZFNjb3JlLCBQYnhBcGksIFVzZXJNZXNzYWdlLCBTb3VuZEZpbGVzU2VsZWN0b3IgKi9cblxuY29uc3QgZ2VuZXJhbFNldHRpbmdzTW9kaWZ5ID0ge1xuXHQkZGlycnR5RmllbGQ6ICQoJyNkaXJydHknKSxcblx0JGZvcm1PYmo6ICQoJyNnZW5lcmFsLXNldHRpbmdzLWZvcm0nKSxcblx0JHdlYkFkbWluUGFzc3dvcmQ6ICQoJyNXZWJBZG1pblBhc3N3b3JkJyksXG5cdCRzc2hQYXNzd29yZDogJCgnI1NTSFBhc3N3b3JkJyksXG5cdHZhbGlkYXRlUnVsZXM6IHtcblx0XHRwYnhuYW1lOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnUEJYTmFtZScsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2VtcHR5Jyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZUVtcHR5UEJYTmFtZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHRXZWJBZG1pblBhc3N3b3JkOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnV2ViQWRtaW5QYXNzd29yZCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2VtcHR5Jyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZUVtcHR5V2ViUGFzc3dvcmQsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnbWluTGVuZ3RoWzVdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZVdlYWtXZWJQYXNzd29yZCxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHRXZWJBZG1pblBhc3N3b3JkUmVwZWF0OiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnV2ViQWRtaW5QYXNzd29yZFJlcGVhdCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ21hdGNoW1dlYkFkbWluUGFzc3dvcmRdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZVdlYlBhc3N3b3Jkc0ZpZWxkRGlmZmVyZW50LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdFNTSFBhc3N3b3JkOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnU1NIUGFzc3dvcmQnLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdlbXB0eScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZ3NfVmFsaWRhdGVFbXB0eVNTSFBhc3N3b3JkLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ21pbkxlbmd0aFs1XScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZ3NfVmFsaWRhdGVXZWFrU1NIUGFzc3dvcmQsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0U1NIUGFzc3dvcmRSZXBlYXQ6IHtcblx0XHRcdGlkZW50aWZpZXI6ICdTU0hQYXNzd29yZFJlcGVhdCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ21hdGNoW1NTSFBhc3N3b3JkXScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZ3NfVmFsaWRhdGVTU0hQYXNzd29yZHNGaWVsZERpZmZlcmVudCxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHRXRUJQb3J0OiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnV0VCUG9ydCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2ludGVnZXJbMS4uNjU1MzVdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZVdFQlBvcnRPdXRPZlJhbmdlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2RpZmZlcmVudFtXRUJIVFRQU1BvcnRdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZVdFQkhUVFBTUG9ydE5vdEVxdWFsVG9XRUJQb3J0LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2RpZmZlcmVudFtBSkFNUG9ydFRMU10nLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmdzX1ZhbGlkYXRlV0VCUG9ydE5vdEVxdWFsVG9BamFtUG9ydCxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdkaWZmZXJlbnRbQUpBTVBvcnRdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZVdFQlBvcnROb3RFcXVhbFRvQWphbVRMU1BvcnQsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0V0VCSFRUUFNQb3J0OiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnV0VCSFRUUFNQb3J0Jyxcblx0XHRcdHJ1bGVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnaW50ZWdlclsxLi42NTUzNV0nLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmdzX1ZhbGlkYXRlV0VCSFRUUFNQb3J0T3V0T2ZSYW5nZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdkaWZmZXJlbnRbV0VCUG9ydF0nLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmdzX1ZhbGlkYXRlV0VCSFRUUFNQb3J0Tm90RXF1YWxUb1dFQlBvcnQsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZGlmZmVyZW50W0FKQU1Qb3J0VExTXScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZ3NfVmFsaWRhdGVXRUJIVFRQU1BvcnROb3RFcXVhbFRvQWphbVBvcnQsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZGlmZmVyZW50W0FKQU1Qb3J0XScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZ3NfVmFsaWRhdGVXRUJIVFRQU1BvcnROb3RFcXVhbFRvQWphbVRMU1BvcnQsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0QUpBTVBvcnQ6IHtcblx0XHRcdGlkZW50aWZpZXI6ICdBSkFNUG9ydCcsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2ludGVnZXJbMS4uNjU1MzVdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZUFKQU1Qb3J0T3V0T2ZSYW5nZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdkaWZmZXJlbnRbQUpBTVBvcnRUTFNdJyxcblx0XHRcdFx0XHRwcm9tcHQ6IGdsb2JhbFRyYW5zbGF0ZS5nc19WYWxpZGF0ZUFKQU1Qb3J0T3V0T2ZSYW5nZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0fSxcblx0aW5pdGlhbGl6ZSgpIHtcblx0XHRnZW5lcmFsU2V0dGluZ3NNb2RpZnkuJHdlYkFkbWluUGFzc3dvcmQub24oJ2tleXVwJywgKCkgPT4ge1xuXHRcdFx0UGFzc3dvcmRTY29yZS5jaGVja1Bhc3NTdHJlbmd0aCh7XG5cdFx0XHRcdHBhc3M6IGdlbmVyYWxTZXR0aW5nc01vZGlmeS4kd2ViQWRtaW5QYXNzd29yZC52YWwoKSxcblx0XHRcdFx0YmFyOiAkKCcucGFzc3dvcmQtc2NvcmUnKSxcblx0XHRcdFx0c2VjdGlvbjogJCgnLnBhc3N3b3JkLXNjb3JlLXNlY3Rpb24nKSxcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdGdlbmVyYWxTZXR0aW5nc01vZGlmeS4kc3NoUGFzc3dvcmQub24oJ2tleXVwJywgKCkgPT4ge1xuXHRcdFx0UGFzc3dvcmRTY29yZS5jaGVja1Bhc3NTdHJlbmd0aCh7XG5cdFx0XHRcdHBhc3M6IGdlbmVyYWxTZXR0aW5nc01vZGlmeS4kc3NoUGFzc3dvcmQudmFsKCksXG5cdFx0XHRcdGJhcjogJCgnLnNzaC1wYXNzd29yZC1zY29yZScpLFxuXHRcdFx0XHRzZWN0aW9uOiAkKCcuc3NoLXBhc3N3b3JkLXNjb3JlLXNlY3Rpb24nKSxcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdCQoJyNnZW5lcmFsLXNldHRpbmdzLW1lbnUnKS5maW5kKCcuaXRlbScpLnRhYih7XG5cdFx0XHRoaXN0b3J5OiB0cnVlLFxuXHRcdFx0aGlzdG9yeVR5cGU6ICdoYXNoJyxcblx0XHR9KTtcblx0XHQkKCcjZ2VuZXJhbC1zZXR0aW5ncy1mb3JtIC5jaGVja2JveCcpLmNoZWNrYm94KCk7XG5cdFx0JCgnI2dlbmVyYWwtc2V0dGluZ3MtZm9ybSAuZHJvcGRvd24nKS5kcm9wZG93bigpO1xuXG5cdFx0JCgnI2F1ZGlvLWNvZGVjcy10YWJsZSwgI3ZpZGVvLWNvZGVjcy10YWJsZScpLnRhYmxlRG5EKHtcblx0XHRcdG9uRHJvcCgpIHtcblx0XHRcdFx0Z2VuZXJhbFNldHRpbmdzTW9kaWZ5LiRkaXJydHlGaWVsZC52YWwoTWF0aC5yYW5kb20oKSk7XG5cdFx0XHRcdGdlbmVyYWxTZXR0aW5nc01vZGlmeS4kZGlycnR5RmllbGQudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0XHR9LFxuXHRcdFx0b25EcmFnQ2xhc3M6ICdob3ZlcmluZ1JvdycsXG5cdFx0XHRkcmFnSGFuZGxlOiAnLmRyYWdIYW5kbGUnLFxuXHRcdH0pO1xuXG5cdFx0JCgnI2dlbmVyYWwtc2V0dGluZ3MtZm9ybSAuYXVkaW8tbWVzc2FnZS1zZWxlY3QnKS5kcm9wZG93bihTb3VuZEZpbGVzU2VsZWN0b3IuZ2V0RHJvcGRvd25TZXR0aW5nc1dpdGhFbXB0eSgpKTtcblxuXHRcdGdlbmVyYWxTZXR0aW5nc01vZGlmeS5pbml0aWFsaXplRm9ybSgpO1xuXHR9LFxuXHRjaGVja0RlbGV0ZUFsbENvbmRpdGlvbnMoKXtcblx0XHRjb25zdCBkZWxldGVBbGxJbnB1dCA9IGdlbmVyYWxTZXR0aW5nc01vZGlmeS4kZm9ybU9iai5mb3JtKCdnZXQgdmFsdWUnLCAnZGVsZXRlQWxsSW5wdXQnKTtcblx0XHRpZiAoZGVsZXRlQWxsSW5wdXQgPT09IGdsb2JhbFRyYW5zbGF0ZS5nc19FbnRlckRlbGV0ZUFsbFBocmFzZSl7XG5cdFx0XHRQYnhBcGkuU3lzdGVtUmVzdG9yZURlZmF1bHRTZXR0aW5ncyhnZW5lcmFsU2V0dGluZ3NNb2RpZnkuY2JBZnRlclJlc3RvcmVEZWZhdWx0U2V0dGluZ3MpO1xuXHRcdH1cblxuXHR9LFxuXHRjYkFmdGVyUmVzdG9yZURlZmF1bHRTZXR0aW5ncyhyZXNwb25zZSl7XG5cdFx0aWYgKHJlc3BvbnNlPT09dHJ1ZSl7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93SW5mb3JtYXRpb24oZ2xvYmFsVHJhbnNsYXRlLmdzX0FsbFNldHRpbmdzRGVsZXRlZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhyZXNwb25zZSk7XG5cdFx0fVxuXHR9LFxuXHRjYkJlZm9yZVNlbmRGb3JtKHNldHRpbmdzKSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gc2V0dGluZ3M7XG5cdFx0cmVzdWx0LmRhdGEgPSBnZW5lcmFsU2V0dGluZ3NNb2RpZnkuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuXHRcdGNvbnN0IGFyckNvZGVjcyA9IFtdO1xuXHRcdCQoJyNhdWRpby1jb2RlY3MtdGFibGUgLmNvZGVjLXJvdywgI3ZpZGVvLWNvZGVjcy10YWJsZSAuY29kZWMtcm93JykuZWFjaCgoaW5kZXgsIG9iaikgPT4ge1xuXHRcdFx0aWYgKCQob2JqKS5hdHRyKCdpZCcpKSB7XG5cdFx0XHRcdGFyckNvZGVjcy5wdXNoKHtcblx0XHRcdFx0XHRjb2RlY0lkOiAkKG9iaikuYXR0cignaWQnKSxcblx0XHRcdFx0XHRkaXNhYmxlZDogJChvYmopLmZpbmQoJy5jaGVja2JveCcpLmNoZWNrYm94KCdpcyB1bmNoZWNrZWQnKSxcblx0XHRcdFx0XHRwcmlvcml0eTogaW5kZXgsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJlc3VsdC5kYXRhLmNvZGVjcyA9IEpTT04uc3RyaW5naWZ5KGFyckNvZGVjcyk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXHRjYkFmdGVyU2VuZEZvcm0ocmVzcG9uc2UpIHtcblx0XHRpZighcmVzcG9uc2Uuc3VjY2Vzcyl7XG5cdFx0XHRGb3JtLiRzdWJtaXRCdXR0b24ucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0fVxuXHRcdGdlbmVyYWxTZXR0aW5nc01vZGlmeS5jaGVja0RlbGV0ZUFsbENvbmRpdGlvbnMoKTtcblx0fSxcblx0aW5pdGlhbGl6ZUZvcm0oKSB7XG5cdFx0Rm9ybS4kZm9ybU9iaiA9IGdlbmVyYWxTZXR0aW5nc01vZGlmeS4kZm9ybU9iajtcblx0XHRGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9Z2VuZXJhbC1zZXR0aW5ncy9zYXZlYDtcblx0XHRGb3JtLnZhbGlkYXRlUnVsZXMgPSBnZW5lcmFsU2V0dGluZ3NNb2RpZnkudmFsaWRhdGVSdWxlcztcblx0XHRGb3JtLmNiQmVmb3JlU2VuZEZvcm0gPSBnZW5lcmFsU2V0dGluZ3NNb2RpZnkuY2JCZWZvcmVTZW5kRm9ybTtcblx0XHRGb3JtLmNiQWZ0ZXJTZW5kRm9ybSA9IGdlbmVyYWxTZXR0aW5nc01vZGlmeS5jYkFmdGVyU2VuZEZvcm07XG5cdFx0Rm9ybS5pbml0aWFsaXplKCk7XG5cdH0sXG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG5cdGdlbmVyYWxTZXR0aW5nc01vZGlmeS5pbml0aWFsaXplKCk7XG59KTsiXX0=