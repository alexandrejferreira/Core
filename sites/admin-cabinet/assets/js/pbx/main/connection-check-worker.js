"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, globalDebugMode */
var connectionCheckWorker = {
  timeOut: 1000,
  timeOutHandle: '',
  errorCounts: 0,
  $connectionDimmer: $('#connection-dimmer'),
  initialize: function initialize() {
    // Запустим обновление статуса провайдера
    connectionCheckWorker.restartWorker();
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(connectionCheckWorker.timeoutHandle);
    connectionCheckWorker.worker();
  },
  worker: function worker() {
    PbxApi.PingPBX(connectionCheckWorker.cbAfterResponse);
    connectionCheckWorker.timeoutHandle = window.setTimeout(connectionCheckWorker.worker, connectionCheckWorker.timeOut);
  },
  cbAfterResponse: function cbAfterResponse(result) {
    if (result === true) {
      connectionCheckWorker.$connectionDimmer.dimmer('hide');
      connectionCheckWorker.timeOut = 3000;
      if (connectionCheckWorker.errorCounts > 5) window.location.reload();
      connectionCheckWorker.errorCounts = 0;
    } else if (connectionCheckWorker.errorCounts > 3) {
      connectionCheckWorker.$connectionDimmer.dimmer('show');
      connectionCheckWorker.timeOut = 1000;
      connectionCheckWorker.errorCounts += 1;
    } else {
      connectionCheckWorker.timeOut = 1000;
      connectionCheckWorker.errorCounts += 1;
    }
  }
};
$(document).ready(function () {
  if (!globalDebugMode) {
    connectionCheckWorker.initialize();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluL2Nvbm5lY3Rpb24tY2hlY2std29ya2VyLmpzIl0sIm5hbWVzIjpbImNvbm5lY3Rpb25DaGVja1dvcmtlciIsInRpbWVPdXQiLCJ0aW1lT3V0SGFuZGxlIiwiZXJyb3JDb3VudHMiLCIkY29ubmVjdGlvbkRpbW1lciIsIiQiLCJpbml0aWFsaXplIiwicmVzdGFydFdvcmtlciIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJ3b3JrZXIiLCJQYnhBcGkiLCJQaW5nUEJYIiwiY2JBZnRlclJlc3BvbnNlIiwic2V0VGltZW91dCIsInJlc3VsdCIsImRpbW1lciIsImxvY2F0aW9uIiwicmVsb2FkIiwiZG9jdW1lbnQiLCJyZWFkeSIsImdsb2JhbERlYnVnTW9kZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsSUFBTUEscUJBQXFCLEdBQUc7QUFDN0JDLEVBQUFBLE9BQU8sRUFBRSxJQURvQjtBQUU3QkMsRUFBQUEsYUFBYSxFQUFFLEVBRmM7QUFHN0JDLEVBQUFBLFdBQVcsRUFBRSxDQUhnQjtBQUk3QkMsRUFBQUEsaUJBQWlCLEVBQUVDLENBQUMsQ0FBQyxvQkFBRCxDQUpTO0FBSzdCQyxFQUFBQSxVQUw2Qix3QkFLaEI7QUFDWjtBQUNBTixJQUFBQSxxQkFBcUIsQ0FBQ08sYUFBdEI7QUFDQSxHQVI0QjtBQVM3QkEsRUFBQUEsYUFUNkIsMkJBU2I7QUFDZkMsSUFBQUEsTUFBTSxDQUFDQyxZQUFQLENBQW9CVCxxQkFBcUIsQ0FBQ1UsYUFBMUM7QUFDQVYsSUFBQUEscUJBQXFCLENBQUNXLE1BQXRCO0FBQ0EsR0FaNEI7QUFhN0JBLEVBQUFBLE1BYjZCLG9CQWFwQjtBQUNSQyxJQUFBQSxNQUFNLENBQUNDLE9BQVAsQ0FBZWIscUJBQXFCLENBQUNjLGVBQXJDO0FBQ0FkLElBQUFBLHFCQUFxQixDQUFDVSxhQUF0QixHQUFzQ0YsTUFBTSxDQUFDTyxVQUFQLENBQ3JDZixxQkFBcUIsQ0FBQ1csTUFEZSxFQUVyQ1gscUJBQXFCLENBQUNDLE9BRmUsQ0FBdEM7QUFJQSxHQW5CNEI7QUFvQjdCYSxFQUFBQSxlQXBCNkIsMkJBb0JiRSxNQXBCYSxFQW9CTDtBQUN2QixRQUFJQSxNQUFNLEtBQUssSUFBZixFQUFxQjtBQUNwQmhCLE1BQUFBLHFCQUFxQixDQUFDSSxpQkFBdEIsQ0FBd0NhLE1BQXhDLENBQStDLE1BQS9DO0FBQ0FqQixNQUFBQSxxQkFBcUIsQ0FBQ0MsT0FBdEIsR0FBZ0MsSUFBaEM7QUFDQSxVQUFJRCxxQkFBcUIsQ0FBQ0csV0FBdEIsR0FBb0MsQ0FBeEMsRUFBMkNLLE1BQU0sQ0FBQ1UsUUFBUCxDQUFnQkMsTUFBaEI7QUFDM0NuQixNQUFBQSxxQkFBcUIsQ0FBQ0csV0FBdEIsR0FBb0MsQ0FBcEM7QUFDQSxLQUxELE1BS08sSUFBSUgscUJBQXFCLENBQUNHLFdBQXRCLEdBQW9DLENBQXhDLEVBQTJDO0FBQ2pESCxNQUFBQSxxQkFBcUIsQ0FBQ0ksaUJBQXRCLENBQXdDYSxNQUF4QyxDQUErQyxNQUEvQztBQUNBakIsTUFBQUEscUJBQXFCLENBQUNDLE9BQXRCLEdBQWdDLElBQWhDO0FBQ0FELE1BQUFBLHFCQUFxQixDQUFDRyxXQUF0QixJQUFxQyxDQUFyQztBQUNBLEtBSk0sTUFJQTtBQUNOSCxNQUFBQSxxQkFBcUIsQ0FBQ0MsT0FBdEIsR0FBZ0MsSUFBaEM7QUFDQUQsTUFBQUEscUJBQXFCLENBQUNHLFdBQXRCLElBQXFDLENBQXJDO0FBQ0E7QUFDRDtBQWxDNEIsQ0FBOUI7QUFxQ0FFLENBQUMsQ0FBQ2UsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QixNQUFJLENBQUNDLGVBQUwsRUFBc0I7QUFDckJ0QixJQUFBQSxxQkFBcUIsQ0FBQ00sVUFBdEI7QUFDQTtBQUNELENBSkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMjMgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuLyogZ2xvYmFsIFBieEFwaSwgZ2xvYmFsRGVidWdNb2RlICovXG5cbmNvbnN0IGNvbm5lY3Rpb25DaGVja1dvcmtlciA9IHtcblx0dGltZU91dDogMTAwMCxcblx0dGltZU91dEhhbmRsZTogJycsXG5cdGVycm9yQ291bnRzOiAwLFxuXHQkY29ubmVjdGlvbkRpbW1lcjogJCgnI2Nvbm5lY3Rpb24tZGltbWVyJyksXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0Ly8g0JfQsNC/0YPRgdGC0LjQvCDQvtCx0L3QvtCy0LvQtdC90LjQtSDRgdGC0LDRgtGD0YHQsCDQv9GA0L7QstCw0LnQtNC10YDQsFxuXHRcdGNvbm5lY3Rpb25DaGVja1dvcmtlci5yZXN0YXJ0V29ya2VyKCk7XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChjb25uZWN0aW9uQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0Y29ubmVjdGlvbkNoZWNrV29ya2VyLndvcmtlcigpO1xuXHR9LFxuXHR3b3JrZXIoKSB7XG5cdFx0UGJ4QXBpLlBpbmdQQlgoY29ubmVjdGlvbkNoZWNrV29ya2VyLmNiQWZ0ZXJSZXNwb25zZSk7XG5cdFx0Y29ubmVjdGlvbkNoZWNrV29ya2VyLnRpbWVvdXRIYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dChcblx0XHRcdGNvbm5lY3Rpb25DaGVja1dvcmtlci53b3JrZXIsXG5cdFx0XHRjb25uZWN0aW9uQ2hlY2tXb3JrZXIudGltZU91dCxcblx0XHQpO1xuXHR9LFxuXHRjYkFmdGVyUmVzcG9uc2UocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29ubmVjdGlvbkNoZWNrV29ya2VyLiRjb25uZWN0aW9uRGltbWVyLmRpbW1lcignaGlkZScpO1xuXHRcdFx0Y29ubmVjdGlvbkNoZWNrV29ya2VyLnRpbWVPdXQgPSAzMDAwO1xuXHRcdFx0aWYgKGNvbm5lY3Rpb25DaGVja1dvcmtlci5lcnJvckNvdW50cyA+IDUpIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdGNvbm5lY3Rpb25DaGVja1dvcmtlci5lcnJvckNvdW50cyA9IDA7XG5cdFx0fSBlbHNlIGlmIChjb25uZWN0aW9uQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiAzKSB7XG5cdFx0XHRjb25uZWN0aW9uQ2hlY2tXb3JrZXIuJGNvbm5lY3Rpb25EaW1tZXIuZGltbWVyKCdzaG93Jyk7XG5cdFx0XHRjb25uZWN0aW9uQ2hlY2tXb3JrZXIudGltZU91dCA9IDEwMDA7XG5cdFx0XHRjb25uZWN0aW9uQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgKz0gMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29ubmVjdGlvbkNoZWNrV29ya2VyLnRpbWVPdXQgPSAxMDAwO1xuXHRcdFx0Y29ubmVjdGlvbkNoZWNrV29ya2VyLmVycm9yQ291bnRzICs9IDE7XG5cdFx0fVxuXHR9LFxufTtcblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXHRpZiAoIWdsb2JhbERlYnVnTW9kZSkge1xuXHRcdGNvbm5lY3Rpb25DaGVja1dvcmtlci5pbml0aWFsaXplKCk7XG5cdH1cbn0pO1xuIl19