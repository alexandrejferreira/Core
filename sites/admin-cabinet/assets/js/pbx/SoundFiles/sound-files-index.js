"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalTranslate, SemanticLocalization, PbxApi, globalRootUrl, IndexSoundPlayer*/

/**
 * Object representing sound files table.
 *
 * @module soundFiles
 */
var soundFiles = {
  $audioFilesList: $('#custom-sound-files-table, #moh-sound-files-table'),
  $contentFrame: $('#content-frame'),
  $tabMenuItems: $('#sound-files-menu .item'),

  /**
   * Initializes the sound files table.
   */
  initialize: function initialize() {
    // Initialize tab menu with history tracking
    soundFiles.$tabMenuItems.tab({
      history: true,
      historyType: 'hash'
    }); // Initialize DataTable for audio files list

    soundFiles.$audioFilesList.DataTable({
      lengthChange: false,
      paging: false,
      columns: [null, {
        orderable: false,
        searchable: false
      }, {
        orderable: false,
        searchable: false
      }],
      order: [0, 'asc'],
      initComplete: function initComplete() {
        // Initialize IndexSoundPlayer for each file row
        $('.file-row').each(function (index, row) {
          var id = $(row).attr('id');
          return new IndexSoundPlayer(id);
        });
      },
      language: SemanticLocalization.dataTableLocalisation
    });
    soundFiles.dataTable = soundFiles.$audioFilesList.DataTable();
    soundFiles.dataTable.on('draw', function () {
      // Reinitialize IndexSoundPlayer for each file row after DataTable redraw
      $('.file-row').each(function (index, row) {
        var id = $(row).attr('id');
        return new IndexSoundPlayer(id);
      });
    }); // Move the "Add New" button to the first eight-column div

    $('#add-new-custom-button').appendTo($('#custom-sound-files-table_wrapper div.eight.column:eq(0)'));
    $('#add-new-moh-button').appendTo($('#moh-sound-files-table_wrapper div.eight.column:eq(0)')); // Add error event listener to audio elements

    var toArray = Array.prototype.slice;
    toArray.apply(document.getElementsByTagName('audio')).forEach(function (audio) {
      audio.addEventListener('error', soundFiles.handleMediaError);
    }); // Add click event listener to delete links

    $('body').on('click', 'a.delete', function (e) {
      e.preventDefault();
      var fileName = $(e.target).closest('tr').attr('data-value');
      var fileId = $(e.target).closest('tr').attr('id');
      PbxApi.FilesRemoveAudioFile(fileName, fileId, soundFiles.cbAfterDelete);
    });
  },

  /**
   * Callback after successful file deletion.
   * @param {string} id - The ID of the deleted file.
   * @returns {boolean}
   */
  cbAfterDelete: function cbAfterDelete(id) {
    $('.message.ajax').remove();
    $.api({
      url: "".concat(globalRootUrl, "sound-files/delete/").concat(id),
      on: 'now',
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0;
      },
      onSuccess: function onSuccess(response) {
        if (response.success === true) {
          soundFiles.$audioFilesList.find("tr[id=".concat(id, "]")).remove();
          sessionStorage.removeItem("".concat(globalRootUrl, "sound-files/getSoundFiles/custom"));
          sessionStorage.removeItem("".concat(globalRootUrl, "sound-files/getSoundFiles/moh"));
        } else {
          soundFiles.$contentFrame.before("<div class=\"ui error message ajax\">".concat(response.message.error, "</div>"));
        }
      }
    });
  },

  /**
   * Handles media errors.
   * @param {Event} e - The error event.
   */
  handleMediaError: function handleMediaError(e) {
    switch (e.target.error.code) {
      case e.target.error.MEDIA_ERR_ABORTED:
        console.log('You aborted the media playback.');
        break;

      case e.target.error.MEDIA_ERR_NETWORK:
        console.log('A network error caused the media download to fail.');
        break;

      case e.target.error.MEDIA_ERR_DECODE:
        console.log('The media playback was aborted due to a corruption problem or because the media used features your browser did not support.');
        break;

      case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
        console.log('The media could not be loaded, either because the server or network failed or because the format is not supported.');
        break;

      default:
        console.log('An unknown media error occurred.');
    }

    var $row = $(e.target).closest('tr');
    $row.addClass('negative');
    $row.find('td.player').html(globalTranslate.sf_FileNotFound);
  }
}; // When the document is ready, initialize the sound files table

$(document).ready(function () {
  soundFiles.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,