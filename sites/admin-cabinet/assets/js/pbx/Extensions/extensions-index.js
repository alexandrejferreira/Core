"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, SipAPI, SemanticLocalization, InputMaskPatterns, UserMessage, globalTranslate, Inputmask */

/**
 * The ExtensionsIndex module handles the functionality for the extensions index page.
 *
 * @module extensionsIndex
 */
var extensionsIndex = {
  maskList: null,

  /**
   * The extensions table element.
   * @type {jQuery}
   */
  $extensionsList: $('#extensions-table'),

  /**
   * The global search input element.
   * @type {jQuery}
   */
  $globalSearch: $('#global-search'),

  /**
   * The data table object.
   * @type {Object}
   */
  dataTable: {},

  /**
   * The document body.
   * @type {jQuery}
   */
  $body: $('body'),

  /**
   * Initialize the ExtensionsIndex module.
   * Sets up necessary interactivity and features on the page.
   */
  initialize: function initialize() {
    // Handle avatars with missing src
    $('.avatar').each(function () {
      if ($(this).attr('src') === '') {
        $(this).attr('src', "".concat(globalRootUrl, "assets/img/unknownPerson.jpg"));
      }
    }); // Set up the DataTable on the extensions list.

    extensionsIndex.initializeDataTable(); // Move the "Add New" button to the first eight-column div.

    $('#add-new-button').appendTo($('div.eight.column:eq(0)')); // Set up double-click behavior on the extension rows.

    $('.extension-row td').on('dblclick', function (e) {
      var id = $(e.target).closest('tr').attr('id');
      window.location = "".concat(globalRootUrl, "extensions/modify/").concat(id);
    }); // Set up delete functionality on delete button click.

    extensionsIndex.$body.on('click', 'a.delete', function (e) {
      e.preventDefault();
      $(e.target).addClass('disabled'); // Get the extension ID from the closest table row.

      var extensionId = $(e.target).closest('tr').attr('id'); // Remove any previous AJAX messages.

      $('.message.ajax').remove(); // Call the PbxApi method to delete the extension record.

      PbxApi.ExtensionsDeleteRecord(extensionId, extensionsIndex.cbAfterDeleteRecord);
    }); // Set up copy secret button click.

    extensionsIndex.$body.on('click', 'a.clipboard', function (e) {
      e.preventDefault();
      $(e.target).closest('div.button').addClass('disabled'); // Get the number from the closest table row.

      var number = $(e.target).closest('tr').attr('data-value'); // Remove any previous AJAX messages.

      $('.message.ajax').remove(); // Call the PbxApi method to get the extension secret.

      SipAPI.getSecret(number, extensionsIndex.cbAfterGetSecret);
    }); // Reset datatable sorts and page

    $("a[href='/admin-cabinet/extensions/index/#reset-cache']").on('click', function (e) {
      e.preventDefault();
      extensionsIndex.$extensionsList.DataTable().state.clear();
      window.location.hash = '#reset-cache';
      window.location.reload();
    });
  },
  // Set up the DataTable on the extensions list.
  initializeDataTable: function initializeDataTable() {
    if (window.location.hash === "#reset-cache") {
      localStorage.removeItem('DataTables_extensions-table_/admin-cabinet/extensions/index/');
    }

    extensionsIndex.$extensionsList.DataTable({
      // Enable state saving to automatically save and restore the table's state
      stateSave: true,
      search: {
        search: "".concat(extensionsIndex.$globalSearch.val())
      },
      columnDefs: [{
        defaultContent: "-",
        targets: "_all"
      }, {
        responsivePriority: 1,
        targets: 0
      }, {
        responsivePriority: 1,
        targets: 1
      }, {
        responsivePriority: 3,
        targets: 2
      }, {
        responsivePriority: 4,
        targets: 3
      }, {
        responsivePriority: 5,
        targets: 4
      }, {
        responsivePriority: 1,
        targets: -1
      }],
      responsive: {
        details: false
      },
      columns: [{
        name: 'status',
        orderable: false,
        // This column is not orderable
        searchable: false // This column is not searchable,

      }, {
        name: 'username',
        data: 'Users.username'
      }, {
        name: 'number',
        data: 'CAST(Extensions.number AS INTEGER)'
      }, {
        name: 'mobile',
        data: 'CAST(ExternalExtensions.number AS INTEGER)'
      }, {
        name: 'email',
        data: 'Users.email'
      }, {
        name: 'buttons',
        orderable: false,
        // This column is not orderable
        searchable: false // This column is not searchable

      }],
      order: [[1, 'asc']],
      serverSide: true,
      processing: true,
      ajax: {
        url: "".concat(globalRootUrl, "extensions/getNewRecords"),
        type: 'POST'
      },
      paging: true,
      // stateSave: true,
      sDom: 'rtip',
      deferRender: true,
      pageLength: extensionsIndex.calculatePageLength(),
      scrollCollapse: true,
      // scroller: true,
      language: SemanticLocalization.dataTableLocalisation,

      /**
       * Constructs the Extensions row.
       * @param {HTMLElement} row - The row element.
       * @param {Array} data - The row data.
       */
      createdRow: function createdRow(row, data) {
        var $templateRow = $('.extension-row-tpl').clone(true);
        var $avatar = $templateRow.find('.avatar');
        $avatar.attr('src', data.avatar);
        $avatar.after(data.username);
        $templateRow.find('.number').text(data.number);
        $templateRow.find('.mobile input').attr('value', data.mobile);
        $templateRow.find('.email').text(data.email);
        var $editButton = $templateRow.find('.action-buttons .button.edit');

        if ($editButton !== undefined) {
          $editButton.attr('href', "".concat(globalRootUrl, "extensions/modify/").concat(data.id));
        }

        var $clipboardButton = $templateRow.find('.action-buttons .button.clipboard');

        if ($clipboardButton !== undefined) {
          $clipboardButton.attr('data-value', data.number);
        }

        $(row).attr('data-value', data.number);
        $.each($('td', $templateRow), function (index, value) {
          $('td', row).eq(index).html($(value).html()).addClass($(value).attr('class'));
        });
      },

      /**
       * Draw event - fired once the table has completed a draw.
       */
      drawCallback: function drawCallback() {
        // Initialize the input mask for mobile numbers.
        extensionsIndex.initializeInputmask($('input.mobile-number-input')); // Set up popups.

        $('.clipboard').popup({
          on: 'manual'
        });
      }
    });
    extensionsIndex.dataTable = extensionsIndex.$extensionsList.DataTable();
    extensionsIndex.$globalSearch.on('keyup', function (e) {
      if (e.keyCode === 13 || e.keyCode === 8 || extensionsIndex.$globalSearch.val().length > 2) {
        var text = extensionsIndex.$globalSearch.val();
        extensionsIndex.applyFilter(text);
      }
    });
    extensionsIndex.dataTable.on('draw', function () {
      extensionsIndex.$globalSearch.closest('div').removeClass('loading');
    });
  },
  calculatePageLength: function calculatePageLength() {
    // Calculate row height
    var rowHeight = extensionsIndex.$extensionsList.find('tr').first().outerHeight(); // Calculate window height and available space for table

    var windowHeight = window.innerHeight;
    var headerFooterHeight = 400; // Estimate height for header, footer, and other elements
    // Calculate new page length

    return Math.max(Math.floor((windowHeight - headerFooterHeight) / rowHeight), 5);
  },

  /**
   * Callback function executed after deleting a record.
   * @param {Object} response - The response object from the API.
   */
  cbAfterDeleteRecord: function cbAfterDeleteRecord(response) {
    if (response.result === true) {
      // Remove the deleted extension's table row.
      extensionsIndex.$extensionsList.find("tr[id=".concat(response.data.id, "]")).remove(); // Call the callback function for data change.

      Extensions.cbOnDataChanged();
    } else {
      // Show an error message if deletion was not successful.
      UserMessage.showError(response.messages.error, globalTranslate.ex_ImpossibleToDeleteExtension);
    }

    $('a.delete').removeClass('disabled');
  },

  /**
   * Callback function executed after cet extension secret.
   * @param {Object} response - The response object from the API.
   */
  cbAfterGetSecret: function cbAfterGetSecret(response) {
    if (response.result === true) {
      var $clipboardButton = extensionsIndex.$extensionsList.find("a.clipboard[data-value=".concat(response.data.number, "]"));
      navigator.clipboard.writeText(response.data.secret);
      $clipboardButton.popup('show');
      setTimeout(function () {
        $clipboardButton.popup('hide');
      }, 1500);
    } else {
      // Show an error message if deletion was not successful.
      UserMessage.showError(response.messages.error, globalTranslate.ex_ImpossibleToGetSecret);
    }

    $('a.clipboard').removeClass('disabled');
  },

  /**
   * Initializes input masks for visualizing formatted numbers.
   * @param {Object} $el - The jQuery object for the element to initialize the input mask on.
   */
  initializeInputmask: function initializeInputmask($el) {
    if (extensionsIndex.maskList === null) {
      // Prepares the table for sort
      extensionsIndex.maskList = $.masksSort(InputMaskPatterns, ['#'], /[0-9]|#/, 'mask');
    }

    $el.inputmasks({
      inputmask: {
        definitions: {
          '#': {
            validator: '[0-9]',
            cardinality: 1
          }
        }
      },
      match: /[0-9]/,
      replace: '9',
      list: extensionsIndex.maskList,
      listKey: 'mask'
    });
  },

  /**
   * Applies the filter to the data table.
   * @param {string} text - The filter text.
   */
  applyFilter: function applyFilter(text) {
    extensionsIndex.dataTable.search(text).draw();
    extensionsIndex.$globalSearch.closest('div').addClass('loading');
  }
};
/**
 *  Initialize Employees table on document ready
 */

$(document).ready(function () {
  extensionsIndex.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FeHRlbnNpb25zL2V4dGVuc2lvbnMtaW5kZXguanMiXSwibmFtZXMiOlsiZXh0ZW5zaW9uc0luZGV4IiwibWFza0xpc3QiLCIkZXh0ZW5zaW9uc0xpc3QiLCIkIiwiJGdsb2JhbFNlYXJjaCIsImRhdGFUYWJsZSIsIiRib2R5IiwiaW5pdGlhbGl6ZSIsImVhY2giLCJhdHRyIiwiZ2xvYmFsUm9vdFVybCIsImluaXRpYWxpemVEYXRhVGFibGUiLCJhcHBlbmRUbyIsIm9uIiwiZSIsImlkIiwidGFyZ2V0IiwiY2xvc2VzdCIsIndpbmRvdyIsImxvY2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJhZGRDbGFzcyIsImV4dGVuc2lvbklkIiwicmVtb3ZlIiwiUGJ4QXBpIiwiRXh0ZW5zaW9uc0RlbGV0ZVJlY29yZCIsImNiQWZ0ZXJEZWxldGVSZWNvcmQiLCJudW1iZXIiLCJTaXBBUEkiLCJnZXRTZWNyZXQiLCJjYkFmdGVyR2V0U2VjcmV0IiwiRGF0YVRhYmxlIiwic3RhdGUiLCJjbGVhciIsImhhc2giLCJyZWxvYWQiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwic3RhdGVTYXZlIiwic2VhcmNoIiwidmFsIiwiY29sdW1uRGVmcyIsImRlZmF1bHRDb250ZW50IiwidGFyZ2V0cyIsInJlc3BvbnNpdmVQcmlvcml0eSIsInJlc3BvbnNpdmUiLCJkZXRhaWxzIiwiY29sdW1ucyIsIm5hbWUiLCJvcmRlcmFibGUiLCJzZWFyY2hhYmxlIiwiZGF0YSIsIm9yZGVyIiwic2VydmVyU2lkZSIsInByb2Nlc3NpbmciLCJhamF4IiwidXJsIiwidHlwZSIsInBhZ2luZyIsInNEb20iLCJkZWZlclJlbmRlciIsInBhZ2VMZW5ndGgiLCJjYWxjdWxhdGVQYWdlTGVuZ3RoIiwic2Nyb2xsQ29sbGFwc2UiLCJsYW5ndWFnZSIsIlNlbWFudGljTG9jYWxpemF0aW9uIiwiZGF0YVRhYmxlTG9jYWxpc2F0aW9uIiwiY3JlYXRlZFJvdyIsInJvdyIsIiR0ZW1wbGF0ZVJvdyIsImNsb25lIiwiJGF2YXRhciIsImZpbmQiLCJhdmF0YXIiLCJhZnRlciIsInVzZXJuYW1lIiwidGV4dCIsIm1vYmlsZSIsImVtYWlsIiwiJGVkaXRCdXR0b24iLCJ1bmRlZmluZWQiLCIkY2xpcGJvYXJkQnV0dG9uIiwiaW5kZXgiLCJ2YWx1ZSIsImVxIiwiaHRtbCIsImRyYXdDYWxsYmFjayIsImluaXRpYWxpemVJbnB1dG1hc2siLCJwb3B1cCIsImtleUNvZGUiLCJsZW5ndGgiLCJhcHBseUZpbHRlciIsInJlbW92ZUNsYXNzIiwicm93SGVpZ2h0IiwiZmlyc3QiLCJvdXRlckhlaWdodCIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0IiwiaGVhZGVyRm9vdGVySGVpZ2h0IiwiTWF0aCIsIm1heCIsImZsb29yIiwicmVzcG9uc2UiLCJyZXN1bHQiLCJFeHRlbnNpb25zIiwiY2JPbkRhdGFDaGFuZ2VkIiwiVXNlck1lc3NhZ2UiLCJzaG93RXJyb3IiLCJtZXNzYWdlcyIsImVycm9yIiwiZ2xvYmFsVHJhbnNsYXRlIiwiZXhfSW1wb3NzaWJsZVRvRGVsZXRlRXh0ZW5zaW9uIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0Iiwic2VjcmV0Iiwic2V0VGltZW91dCIsImV4X0ltcG9zc2libGVUb0dldFNlY3JldCIsIiRlbCIsIm1hc2tzU29ydCIsIklucHV0TWFza1BhdHRlcm5zIiwiaW5wdXRtYXNrcyIsImlucHV0bWFzayIsImRlZmluaXRpb25zIiwidmFsaWRhdG9yIiwiY2FyZGluYWxpdHkiLCJtYXRjaCIsInJlcGxhY2UiLCJsaXN0IiwibGlzdEtleSIsImRyYXciLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLGVBQWUs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QyxNQUFBQSxJQUFJLEVBQUVoSSxlQUFlLENBQUNDLFFBWFg7QUFZWGdJLE1BQUFBLE9BQU8sRUFBRTtBQVpFLEtBQWY7QUFjSCxHQXBTbUI7O0FBcVNwQjtBQUNKO0FBQ0E7QUFDQTtBQUNJdEMsRUFBQUEsV0F6U29CLHVCQXlTUmYsSUF6U1EsRUF5U0Y7QUFDZDVFLElBQUFBLGVBQWUsQ0FBQ0ssU0FBaEIsQ0FBMEJrQyxNQUExQixDQUFpQ3FDLElBQWpDLEVBQXVDc0QsSUFBdkM7QUFDQWxJLElBQUFBLGVBQWUsQ0FBQ0ksYUFBaEIsQ0FBOEJhLE9BQTlCLENBQXNDLEtBQXRDLEVBQTZDSSxRQUE3QyxDQUFzRCxTQUF0RDtBQUNIO0FBNVNtQixDQUF4QjtBQStTQTtBQUNBO0FBQ0E7O0FBQ0FsQixDQUFDLENBQUNnSSxRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3BCcEksRUFBQUEsZUFBZSxDQUFDTyxVQUFoQjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCwgU2lwQVBJLCBTZW1hbnRpY0xvY2FsaXphdGlvbiwgSW5wdXRNYXNrUGF0dGVybnMsIFVzZXJNZXNzYWdlLCBnbG9iYWxUcmFuc2xhdGUsIElucHV0bWFzayAqL1xuXG5cbi8qKlxuICogVGhlIEV4dGVuc2lvbnNJbmRleCBtb2R1bGUgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBmb3IgdGhlIGV4dGVuc2lvbnMgaW5kZXggcGFnZS5cbiAqXG4gKiBAbW9kdWxlIGV4dGVuc2lvbnNJbmRleFxuICovXG5jb25zdCBleHRlbnNpb25zSW5kZXggPSB7XG4gICAgbWFza0xpc3Q6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZXh0ZW5zaW9ucyB0YWJsZSBlbGVtZW50LlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgJGV4dGVuc2lvbnNMaXN0OiAkKCcjZXh0ZW5zaW9ucy10YWJsZScpLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGdsb2JhbCBzZWFyY2ggaW5wdXQgZWxlbWVudC5cbiAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAqL1xuICAgICRnbG9iYWxTZWFyY2g6ICQoJyNnbG9iYWwtc2VhcmNoJyksXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSB0YWJsZSBvYmplY3QuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBkYXRhVGFibGU6IHt9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGRvY3VtZW50IGJvZHkuXG4gICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgKi9cbiAgICAkYm9keTogJCgnYm9keScpLFxuXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBFeHRlbnNpb25zSW5kZXggbW9kdWxlLlxuICAgICAqIFNldHMgdXAgbmVjZXNzYXJ5IGludGVyYWN0aXZpdHkgYW5kIGZlYXR1cmVzIG9uIHRoZSBwYWdlLlxuICAgICAqL1xuICAgIGluaXRpYWxpemUoKSB7XG5cbiAgICAgICAgLy8gSGFuZGxlIGF2YXRhcnMgd2l0aCBtaXNzaW5nIHNyY1xuICAgICAgICAkKCcuYXZhdGFyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCdzcmMnKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3NyYycsIGAke2dsb2JhbFJvb3RVcmx9YXNzZXRzL2ltZy91bmtub3duUGVyc29uLmpwZ2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTZXQgdXAgdGhlIERhdGFUYWJsZSBvbiB0aGUgZXh0ZW5zaW9ucyBsaXN0LlxuICAgICAgICBleHRlbnNpb25zSW5kZXguaW5pdGlhbGl6ZURhdGFUYWJsZSgpO1xuXG4gICAgICAgIC8vIE1vdmUgdGhlIFwiQWRkIE5ld1wiIGJ1dHRvbiB0byB0aGUgZmlyc3QgZWlnaHQtY29sdW1uIGRpdi5cbiAgICAgICAgJCgnI2FkZC1uZXctYnV0dG9uJykuYXBwZW5kVG8oJCgnZGl2LmVpZ2h0LmNvbHVtbjplcSgwKScpKTtcblxuICAgICAgICAvLyBTZXQgdXAgZG91YmxlLWNsaWNrIGJlaGF2aW9yIG9uIHRoZSBleHRlbnNpb24gcm93cy5cbiAgICAgICAgJCgnLmV4dGVuc2lvbi1yb3cgdGQnKS5vbignZGJsY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCd0cicpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgJHtnbG9iYWxSb290VXJsfWV4dGVuc2lvbnMvbW9kaWZ5LyR7aWR9YDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2V0IHVwIGRlbGV0ZSBmdW5jdGlvbmFsaXR5IG9uIGRlbGV0ZSBidXR0b24gY2xpY2suXG4gICAgICAgIGV4dGVuc2lvbnNJbmRleC4kYm9keS5vbignY2xpY2snLCAnYS5kZWxldGUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJChlLnRhcmdldCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGV4dGVuc2lvbiBJRCBmcm9tIHRoZSBjbG9zZXN0IHRhYmxlIHJvdy5cbiAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbklkID0gJChlLnRhcmdldCkuY2xvc2VzdCgndHInKS5hdHRyKCdpZCcpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgYW55IHByZXZpb3VzIEFKQVggbWVzc2FnZXMuXG4gICAgICAgICAgICAkKCcubWVzc2FnZS5hamF4JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIFBieEFwaSBtZXRob2QgdG8gZGVsZXRlIHRoZSBleHRlbnNpb24gcmVjb3JkLlxuICAgICAgICAgICAgUGJ4QXBpLkV4dGVuc2lvbnNEZWxldGVSZWNvcmQoZXh0ZW5zaW9uSWQsIGV4dGVuc2lvbnNJbmRleC5jYkFmdGVyRGVsZXRlUmVjb3JkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2V0IHVwIGNvcHkgc2VjcmV0IGJ1dHRvbiBjbGljay5cbiAgICAgICAgZXh0ZW5zaW9uc0luZGV4LiRib2R5Lm9uKCdjbGljaycsICdhLmNsaXBib2FyZCcsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCdkaXYuYnV0dG9uJykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIGZyb20gdGhlIGNsb3Nlc3QgdGFibGUgcm93LlxuICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gJChlLnRhcmdldCkuY2xvc2VzdCgndHInKS5hdHRyKCdkYXRhLXZhbHVlJyk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBhbnkgcHJldmlvdXMgQUpBWCBtZXNzYWdlcy5cbiAgICAgICAgICAgICQoJy5tZXNzYWdlLmFqYXgnKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgUGJ4QXBpIG1ldGhvZCB0byBnZXQgdGhlIGV4dGVuc2lvbiBzZWNyZXQuXG4gICAgICAgICAgICBTaXBBUEkuZ2V0U2VjcmV0KG51bWJlciwgZXh0ZW5zaW9uc0luZGV4LmNiQWZ0ZXJHZXRTZWNyZXQpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIFJlc2V0IGRhdGF0YWJsZSBzb3J0cyBhbmQgcGFnZVxuICAgICAgICAkKFwiYVtocmVmPScvYWRtaW4tY2FiaW5ldC9leHRlbnNpb25zL2luZGV4LyNyZXNldC1jYWNoZSddXCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uc0luZGV4LiRleHRlbnNpb25zTGlzdC5EYXRhVGFibGUoKS5zdGF0ZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyNyZXNldC1jYWNoZSc7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvLyBTZXQgdXAgdGhlIERhdGFUYWJsZSBvbiB0aGUgZXh0ZW5zaW9ucyBsaXN0LlxuICAgIGluaXRpYWxpemVEYXRhVGFibGUoKXtcblxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09IFwiI3Jlc2V0LWNhY2hlXCIpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdEYXRhVGFibGVzX2V4dGVuc2lvbnMtdGFibGVfL2FkbWluLWNhYmluZXQvZXh0ZW5zaW9ucy9pbmRleC8nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuc2lvbnNJbmRleC4kZXh0ZW5zaW9uc0xpc3QuRGF0YVRhYmxlKHtcbiAgICAgICAgICAgIC8vIEVuYWJsZSBzdGF0ZSBzYXZpbmcgdG8gYXV0b21hdGljYWxseSBzYXZlIGFuZCByZXN0b3JlIHRoZSB0YWJsZSdzIHN0YXRlXG4gICAgICAgICAgICBzdGF0ZVNhdmU6IHRydWUsXG5cbiAgICAgICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgICAgICAgIHNlYXJjaDogYCR7ZXh0ZW5zaW9uc0luZGV4LiRnbG9iYWxTZWFyY2gudmFsKCl9YCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgICAgICAgICAgeyBkZWZhdWx0Q29udGVudDogXCItXCIsICB0YXJnZXRzOiBcIl9hbGxcIn0sXG4gICAgICAgICAgICAgICAgeyByZXNwb25zaXZlUHJpb3JpdHk6IDEsICB0YXJnZXRzOiAwfSxcbiAgICAgICAgICAgICAgICB7IHJlc3BvbnNpdmVQcmlvcml0eTogMSwgIHRhcmdldHM6IDF9LFxuICAgICAgICAgICAgICAgIHsgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLCAgdGFyZ2V0czogMn0sXG4gICAgICAgICAgICAgICAgeyByZXNwb25zaXZlUHJpb3JpdHk6IDQsICB0YXJnZXRzOiAzfSxcbiAgICAgICAgICAgICAgICB7IHJlc3BvbnNpdmVQcmlvcml0eTogNSwgIHRhcmdldHM6IDR9LFxuICAgICAgICAgICAgICAgIHsgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCAgdGFyZ2V0czogLTF9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHVtbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICBvcmRlcmFibGU6IGZhbHNlLCAgLy8gVGhpcyBjb2x1bW4gaXMgbm90IG9yZGVyYWJsZVxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hhYmxlOiBmYWxzZSAgLy8gVGhpcyBjb2x1bW4gaXMgbm90IHNlYXJjaGFibGUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd1c2VybmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6ICdVc2Vycy51c2VybmFtZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAnQ0FTVChFeHRlbnNpb25zLm51bWJlciBBUyBJTlRFR0VSKScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtb2JpbGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAnQ0FTVChFeHRlcm5hbEV4dGVuc2lvbnMubnVtYmVyIEFTIElOVEVHRVIpJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VtYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogJ1VzZXJzLmVtYWlsJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2J1dHRvbnMnLFxuICAgICAgICAgICAgICAgICAgICBvcmRlcmFibGU6IGZhbHNlLCAgLy8gVGhpcyBjb2x1bW4gaXMgbm90IG9yZGVyYWJsZVxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hhYmxlOiBmYWxzZSwgIC8vIFRoaXMgY29sdW1uIGlzIG5vdCBzZWFyY2hhYmxlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBvcmRlcjogW1sxLCAnYXNjJ11dLFxuICAgICAgICAgICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICAgICAgICAgIHByb2Nlc3Npbmc6IHRydWUsXG4gICAgICAgICAgICBhamF4OiB7XG4gICAgICAgICAgICAgICAgdXJsOiBgJHtnbG9iYWxSb290VXJsfWV4dGVuc2lvbnMvZ2V0TmV3UmVjb3Jkc2AsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2luZzogdHJ1ZSxcbiAgICAgICAgICAgIC8vIHN0YXRlU2F2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNEb206ICdydGlwJyxcbiAgICAgICAgICAgIGRlZmVyUmVuZGVyOiB0cnVlLFxuICAgICAgICAgICAgcGFnZUxlbmd0aDogZXh0ZW5zaW9uc0luZGV4LmNhbGN1bGF0ZVBhZ2VMZW5ndGgoKSxcbiAgICAgICAgICAgIHNjcm9sbENvbGxhcHNlOiB0cnVlLFxuICAgICAgICAgICAgLy8gc2Nyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICBsYW5ndWFnZTogU2VtYW50aWNMb2NhbGl6YXRpb24uZGF0YVRhYmxlTG9jYWxpc2F0aW9uLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIHRoZSBFeHRlbnNpb25zIHJvdy5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvdyAtIFRoZSByb3cgZWxlbWVudC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgLSBUaGUgcm93IGRhdGEuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNyZWF0ZWRSb3cocm93LCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgJHRlbXBsYXRlUm93ICA9ICAkKCcuZXh0ZW5zaW9uLXJvdy10cGwnKS5jbG9uZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCAkYXZhdGFyID0gJHRlbXBsYXRlUm93LmZpbmQoJy5hdmF0YXInKTtcbiAgICAgICAgICAgICAgICAkYXZhdGFyLmF0dHIoJ3NyYycsZGF0YS5hdmF0YXIpO1xuICAgICAgICAgICAgICAgICRhdmF0YXIuYWZ0ZXIoZGF0YS51c2VybmFtZSk7XG4gICAgICAgICAgICAgICAgJHRlbXBsYXRlUm93LmZpbmQoJy5udW1iZXInKS50ZXh0KGRhdGEubnVtYmVyKTtcbiAgICAgICAgICAgICAgICAkdGVtcGxhdGVSb3cuZmluZCgnLm1vYmlsZSBpbnB1dCcpLmF0dHIoJ3ZhbHVlJywgZGF0YS5tb2JpbGUpO1xuICAgICAgICAgICAgICAgICR0ZW1wbGF0ZVJvdy5maW5kKCcuZW1haWwnKS50ZXh0KGRhdGEuZW1haWwpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgJGVkaXRCdXR0b24gPSAkdGVtcGxhdGVSb3cuZmluZCgnLmFjdGlvbi1idXR0b25zIC5idXR0b24uZWRpdCcpO1xuICAgICAgICAgICAgICAgIGlmICgkZWRpdEJ1dHRvbiE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICRlZGl0QnV0dG9uLmF0dHIoJ2hyZWYnLGAke2dsb2JhbFJvb3RVcmx9ZXh0ZW5zaW9ucy9tb2RpZnkvJHtkYXRhLmlkfWApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgJGNsaXBib2FyZEJ1dHRvbiA9ICR0ZW1wbGF0ZVJvdy5maW5kKCcuYWN0aW9uLWJ1dHRvbnMgLmJ1dHRvbi5jbGlwYm9hcmQnKTtcbiAgICAgICAgICAgICAgICBpZiAoJGNsaXBib2FyZEJ1dHRvbiE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICRjbGlwYm9hcmRCdXR0b24uYXR0cignZGF0YS12YWx1ZScsZGF0YS5udW1iZXIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQocm93KS5hdHRyKCdkYXRhLXZhbHVlJywgZGF0YS5udW1iZXIpO1xuICAgICAgICAgICAgICAgICQuZWFjaCgkKCd0ZCcsICR0ZW1wbGF0ZVJvdyksIChpbmRleCwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJCgndGQnLCByb3cpLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwoJCh2YWx1ZSkuaHRtbCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCQodmFsdWUpLmF0dHIoJ2NsYXNzJykpXG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERyYXcgZXZlbnQgLSBmaXJlZCBvbmNlIHRoZSB0YWJsZSBoYXMgY29tcGxldGVkIGEgZHJhdy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZHJhd0NhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGlucHV0IG1hc2sgZm9yIG1vYmlsZSBudW1iZXJzLlxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNJbmRleC5pbml0aWFsaXplSW5wdXRtYXNrKCQoJ2lucHV0Lm1vYmlsZS1udW1iZXItaW5wdXQnKSk7XG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIHBvcHVwcy5cbiAgICAgICAgICAgICAgICAkKCcuY2xpcGJvYXJkJykucG9wdXAoe1xuICAgICAgICAgICAgICAgICAgICBvbjogJ21hbnVhbCcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZXh0ZW5zaW9uc0luZGV4LmRhdGFUYWJsZSA9IGV4dGVuc2lvbnNJbmRleC4kZXh0ZW5zaW9uc0xpc3QuRGF0YVRhYmxlKCk7XG5cbiAgICAgICAgZXh0ZW5zaW9uc0luZGV4LiRnbG9iYWxTZWFyY2gub24oJ2tleXVwJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzXG4gICAgICAgICAgICAgICAgfHwgZS5rZXlDb2RlID09PSA4XG4gICAgICAgICAgICAgICAgfHwgZXh0ZW5zaW9uc0luZGV4LiRnbG9iYWxTZWFyY2gudmFsKCkubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBleHRlbnNpb25zSW5kZXguJGdsb2JhbFNlYXJjaC52YWwoKTtcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zSW5kZXguYXBwbHlGaWx0ZXIodGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4dGVuc2lvbnNJbmRleC5kYXRhVGFibGUub24oJ2RyYXcnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHRlbnNpb25zSW5kZXguJGdsb2JhbFNlYXJjaC5jbG9zZXN0KCdkaXYnKS5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2FsY3VsYXRlUGFnZUxlbmd0aCgpIHtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHJvdyBoZWlnaHRcbiAgICAgICAgbGV0IHJvd0hlaWdodCA9IGV4dGVuc2lvbnNJbmRleC4kZXh0ZW5zaW9uc0xpc3QuZmluZCgndHInKS5maXJzdCgpLm91dGVySGVpZ2h0KCk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHdpbmRvdyBoZWlnaHQgYW5kIGF2YWlsYWJsZSBzcGFjZSBmb3IgdGFibGVcbiAgICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBjb25zdCBoZWFkZXJGb290ZXJIZWlnaHQgPSA0MDA7IC8vIEVzdGltYXRlIGhlaWdodCBmb3IgaGVhZGVyLCBmb290ZXIsIGFuZCBvdGhlciBlbGVtZW50c1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgcGFnZSBsZW5ndGhcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGguZmxvb3IoKHdpbmRvd0hlaWdodCAtIGhlYWRlckZvb3RlckhlaWdodCkgLyByb3dIZWlnaHQpLCA1KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZXhlY3V0ZWQgYWZ0ZXIgZGVsZXRpbmcgYSByZWNvcmQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdCBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgY2JBZnRlckRlbGV0ZVJlY29yZChyZXNwb25zZSl7XG4gICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZGVsZXRlZCBleHRlbnNpb24ncyB0YWJsZSByb3cuXG4gICAgICAgICAgICBleHRlbnNpb25zSW5kZXguJGV4dGVuc2lvbnNMaXN0LmZpbmQoYHRyW2lkPSR7cmVzcG9uc2UuZGF0YS5pZH1dYCkucmVtb3ZlKCk7XG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBmb3IgZGF0YSBjaGFuZ2UuXG4gICAgICAgICAgICBFeHRlbnNpb25zLmNiT25EYXRhQ2hhbmdlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2hvdyBhbiBlcnJvciBtZXNzYWdlIGlmIGRlbGV0aW9uIHdhcyBub3Qgc3VjY2Vzc2Z1bC5cbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dFcnJvcihyZXNwb25zZS5tZXNzYWdlcy5lcnJvciwgZ2xvYmFsVHJhbnNsYXRlLmV4X0ltcG9zc2libGVUb0RlbGV0ZUV4dGVuc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgJCgnYS5kZWxldGUnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZXhlY3V0ZWQgYWZ0ZXIgY2V0IGV4dGVuc2lvbiBzZWNyZXQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdCBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgY2JBZnRlckdldFNlY3JldChyZXNwb25zZSl7XG4gICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0ICRjbGlwYm9hcmRCdXR0b24gPSBleHRlbnNpb25zSW5kZXguJGV4dGVuc2lvbnNMaXN0LmZpbmQoYGEuY2xpcGJvYXJkW2RhdGEtdmFsdWU9JHtyZXNwb25zZS5kYXRhLm51bWJlcn1dYCk7XG4gICAgICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChyZXNwb25zZS5kYXRhLnNlY3JldClcbiAgICAgICAgICAgICRjbGlwYm9hcmRCdXR0b24ucG9wdXAoJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJGNsaXBib2FyZEJ1dHRvbi5wb3B1cCgnaGlkZScpO1xuICAgICAgICAgICAgICAgIH0sIDE1MDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2hvdyBhbiBlcnJvciBtZXNzYWdlIGlmIGRlbGV0aW9uIHdhcyBub3Qgc3VjY2Vzc2Z1bC5cbiAgICAgICAgICAgIFVzZXJNZXNzYWdlLnNob3dFcnJvcihyZXNwb25zZS5tZXNzYWdlcy5lcnJvciwgZ2xvYmFsVHJhbnNsYXRlLmV4X0ltcG9zc2libGVUb0dldFNlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgJCgnYS5jbGlwYm9hcmQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgaW5wdXQgbWFza3MgZm9yIHZpc3VhbGl6aW5nIGZvcm1hdHRlZCBudW1iZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBUaGUgalF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgdG8gaW5pdGlhbGl6ZSB0aGUgaW5wdXQgbWFzayBvbi5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplSW5wdXRtYXNrKCRlbCkge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uc0luZGV4Lm1hc2tMaXN0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBQcmVwYXJlcyB0aGUgdGFibGUgZm9yIHNvcnRcbiAgICAgICAgICAgIGV4dGVuc2lvbnNJbmRleC5tYXNrTGlzdCA9ICQubWFza3NTb3J0KElucHV0TWFza1BhdHRlcm5zLCBbJyMnXSwgL1swLTldfCMvLCAnbWFzaycpO1xuICAgICAgICB9XG4gICAgICAgICRlbC5pbnB1dG1hc2tzKHtcbiAgICAgICAgICAgIGlucHV0bWFzazoge1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICcjJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiAnWzAtOV0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXRjaDogL1swLTldLyxcbiAgICAgICAgICAgIHJlcGxhY2U6ICc5JyxcbiAgICAgICAgICAgIGxpc3Q6IGV4dGVuc2lvbnNJbmRleC5tYXNrTGlzdCxcbiAgICAgICAgICAgIGxpc3RLZXk6ICdtYXNrJyxcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBmaWx0ZXIgdG8gdGhlIGRhdGEgdGFibGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgZmlsdGVyIHRleHQuXG4gICAgICovXG4gICAgYXBwbHlGaWx0ZXIodGV4dCkge1xuICAgICAgICBleHRlbnNpb25zSW5kZXguZGF0YVRhYmxlLnNlYXJjaCh0ZXh0KS5kcmF3KCk7XG4gICAgICAgIGV4dGVuc2lvbnNJbmRleC4kZ2xvYmFsU2VhcmNoLmNsb3Nlc3QoJ2RpdicpLmFkZENsYXNzKCdsb2FkaW5nJyk7XG4gICAgfSxcbn07XG5cbi8qKlxuICogIEluaXRpYWxpemUgRW1wbG95ZWVzIHRhYmxlIG9uIGRvY3VtZW50IHJlYWR5XG4gKi9cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBleHRlbnNpb25zSW5kZXguaW5pdGlhbGl6ZSgpO1xufSk7XG5cbiJdfQ==