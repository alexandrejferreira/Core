"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, ClipboardJS, SemanticLocalization, InputMaskPatterns */
var extensionsIndex = {
  maskList: null,
  $extensionsList: $('#extensions-table'),
  $contentFrame: $('#content-frame'),
  initialize: function initialize() {
    $('.avatar').each(function () {
      if ($(this).attr('src') === '') {
        $(this).attr('src', "".concat(globalRootUrl, "assets/img/unknownPerson.jpg"));
      }
    });
    extensionsIndex.initializeInputmask($('input.mobile-number-input'));
    extensionsIndex.$extensionsList.DataTable({
      lengthChange: false,
      paging: false,
      columns: [{
        orderable: false,
        searchable: false
      }, null, null, null, null, {
        orderable: false,
        searchable: false
      }],
      order: [1, 'asc'],
      language: SemanticLocalization.dataTableLocalisation,
      drawCallback: function drawCallback() {}
    });
    $('#add-new-button').appendTo($('div.eight.column:eq(0)'));
    $('.extension-row td').on('dblclick', function (e) {
      var id = $(e.target).closest('tr').attr('id');
      window.location = "".concat(globalRootUrl, "extensions/modify/").concat(id);
    });
    var clipboard = new ClipboardJS('.clipboard');
    $('.clipboard').popup({
      on: 'manual'
    });
    clipboard.on('success', function (e) {
      $(e.trigger).popup('show');
      setTimeout(function () {
        $(e.trigger).popup('hide');
      }, 1500);
      e.clearSelection();
    });
    clipboard.on('error', function (e) {
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
    });
    $('.extension-row .checkbox').checkbox({
      onChecked: function onChecked() {
        var number = $(this).attr('data-value');
        $.api({
          url: "".concat(globalRootUrl, "extensions/enable/").concat(number),
          on: 'now',
          onSuccess: function onSuccess(response) {
            if (response.success) {
              $("#".concat(number, " .disability")).removeClass('disabled');
            }
          }
        });
      },
      onUnchecked: function onUnchecked() {
        var number = $(this).attr('data-value');
        $.api({
          url: "".concat(globalRootUrl, "extensions/disable/").concat(number),
          on: 'now',
          onSuccess: function onSuccess(response) {
            if (response.success) {
              $("#".concat(number, " .disability")).addClass('disabled');
            }
          }
        });
      }
    });
    $('body').on('click', 'a.delete', function (e) {
      e.preventDefault();
      var extensionId = $(e.target).closest('tr').attr('id');
      extensionsIndex.deleteExtension(extensionId);
    });
  },

  /**
   * Deletes extension with id
   * @param extensionId
   */
  deleteExtension: function deleteExtension(extensionId) {
    $('.message.ajax').remove();
    $.api({
      url: "".concat(globalRootUrl, "extensions/delete/").concat(extensionId),
      on: 'now',
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0;
      },
      onSuccess: function onSuccess(response) {
        if (response.success === true) {
          extensionsIndex.$extensionsList.find("tr[id=".concat(extensionId, "]")).remove();
          Extensions.cbOnDataChanged();
        } else {
          extensionsIndex.$contentFrame.before("<div class=\"ui error message ajax\">".concat(response.message.error, "</div>"));
        }
      }
    });
  },

  /**
   * Makes formatted numbers visualisation
   */
  initializeInputmask: function initializeInputmask($el) {
    if (extensionsIndex.maskList === null) {
      // Prepares the table for sort
      extensionsIndex.maskList = $.masksSort(InputMaskPatterns, ['#'], /[0-9]|#/, 'mask');
    }

    $el.inputmasks({
      inputmask: {
        definitions: {
          '#': {
            validator: '[0-9]',
            cardinality: 1
          }
        }
      },
      match: /[0-9]/,
      replace: '9',
      list: extensionsIndex.maskList,
      listKey: 'mask'
    });
  }
};
$(document).ready(function () {
  extensionsIndex.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,