"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright © 2017-2021 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalTranslate, extension, DebuggerInfo, PbxApi */
var extensionStatusLoopWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  $statusLabel: $('#status'),

  /**
   * initialize() создание объектов и запуск их
   */
  initialize: function initialize() {
    DebuggerInfo.initialize();

    if (extension.$formObj.form('get value', 'id') !== '') {
      extensionStatusLoopWorker.restartWorker();
    }
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(extensionStatusLoopWorker.timeoutHandle);
    extensionStatusLoopWorker.worker();
  },
  worker: function worker() {
    if (extension.defaultNumber.length === 0) return;
    var param = {
      peer: extension.defaultNumber
    };
    window.clearTimeout(extensionStatusLoopWorker.timeoutHandle);
    PbxApi.GetPeerStatus(param, extensionStatusLoopWorker.cbRefreshExtensionStatus);
  },

  /**
   * cbRefreshExtensionStatus() Обновление статусов пира
   */
  cbRefreshExtensionStatus: function cbRefreshExtensionStatus(response) {
    extensionStatusLoopWorker.timeoutHandle = window.setTimeout(extensionStatusLoopWorker.worker, extensionStatusLoopWorker.timeOut);
    if (response.length === 0 || response === false) return;
    var $status = extensionStatusLoopWorker.$statusLabel;
    var htmlTable = '<table class="ui very compact table">';
    $.each(response, function (key, value) {
      htmlTable += '<tr>';
      htmlTable += "<td>".concat(key, "</td>");
      htmlTable += "<td>".concat(value, "</td>");
      htmlTable += '</tr>';
    });
    htmlTable += '</table>';
    DebuggerInfo.UpdateContent(htmlTable);

    if ('Status' in response && response.Status.toUpperCase().indexOf('REACHABLE') >= 0) {
      $status.removeClass('grey').addClass('green');
    } else {
      $status.removeClass('green').addClass('grey');
    }

    if ($status.hasClass('green')) {
      $status.html(globalTranslate.ex_Online);
    } else {
      $status.html(globalTranslate.ex_Offline);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FeHRlbnNpb25zL2V4dGVuc2lvbi1tb2RpZnktc3RhdHVzLXdvcmtlci5qcyJdLCJuYW1lcyI6WyJleHRlbnNpb25TdGF0dXNMb29wV29ya2VyIiwidGltZU91dCIsInRpbWVPdXRIYW5kbGUiLCIkc3RhdHVzTGFiZWwiLCIkIiwiaW5pdGlhbGl6ZSIsIkRlYnVnZ2VySW5mbyIsImV4dGVuc2lvbiIsIiRmb3JtT2JqIiwiZm9ybSIsInJlc3RhcnRXb3JrZXIiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0SGFuZGxlIiwid29ya2VyIiwiZGVmYXVsdE51bWJlciIsImxlbmd0aCIsInBhcmFtIiwicGVlciIsIlBieEFwaSIsIkdldFBlZXJTdGF0dXMiLCJjYlJlZnJlc2hFeHRlbnNpb25TdGF0dXMiLCJyZXNwb25zZSIsInNldFRpbWVvdXQiLCIkc3RhdHVzIiwiaHRtbFRhYmxlIiwiZWFjaCIsImtleSIsInZhbHVlIiwiVXBkYXRlQ29udGVudCIsIlN0YXR1cyIsInRvVXBwZXJDYXNlIiwiaW5kZXhPZiIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJoYXNDbGFzcyIsImh0bWwiLCJnbG9iYWxUcmFuc2xhdGUiLCJleF9PbmxpbmUiLCJleF9PZmZsaW5lIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFFQSxJQUFNQSx5QkFBeUIsR0FBRztBQUNqQ0MsRUFBQUEsT0FBTyxFQUFFLElBRHdCO0FBRWpDQyxFQUFBQSxhQUFhLEVBQUUsRUFGa0I7QUFHakNDLEVBQUFBLFlBQVksRUFBRUMsQ0FBQyxDQUFDLFNBQUQsQ0FIa0I7O0FBSWpDO0FBQ0Q7QUFDQTtBQUNDQyxFQUFBQSxVQVBpQyx3QkFPcEI7QUFDWkMsSUFBQUEsWUFBWSxDQUFDRCxVQUFiOztBQUNBLFFBQUlFLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkMsSUFBbkIsQ0FBd0IsV0FBeEIsRUFBb0MsSUFBcEMsTUFBNEMsRUFBaEQsRUFBbUQ7QUFDbERULE1BQUFBLHlCQUF5QixDQUFDVSxhQUExQjtBQUNBO0FBQ0QsR0FaZ0M7QUFhakNBLEVBQUFBLGFBYmlDLDJCQWFqQjtBQUNmQyxJQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JaLHlCQUF5QixDQUFDYSxhQUE5QztBQUNBYixJQUFBQSx5QkFBeUIsQ0FBQ2MsTUFBMUI7QUFDQSxHQWhCZ0M7QUFpQmpDQSxFQUFBQSxNQWpCaUMsb0JBaUJ4QjtBQUNSLFFBQUlQLFNBQVMsQ0FBQ1EsYUFBVixDQUF3QkMsTUFBeEIsS0FBbUMsQ0FBdkMsRUFBMEM7QUFDMUMsUUFBTUMsS0FBSyxHQUFHO0FBQUVDLE1BQUFBLElBQUksRUFBRVgsU0FBUyxDQUFDUTtBQUFsQixLQUFkO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQloseUJBQXlCLENBQUNhLGFBQTlDO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0MsYUFBUCxDQUFxQkgsS0FBckIsRUFBNEJqQix5QkFBeUIsQ0FBQ3FCLHdCQUF0RDtBQUNBLEdBdEJnQzs7QUF1QmpDO0FBQ0Q7QUFDQTtBQUNDQSxFQUFBQSx3QkExQmlDLG9DQTBCUkMsUUExQlEsRUEwQkU7QUFDbEN0QixJQUFBQSx5QkFBeUIsQ0FBQ2EsYUFBMUIsR0FDQ0YsTUFBTSxDQUFDWSxVQUFQLENBQWtCdkIseUJBQXlCLENBQUNjLE1BQTVDLEVBQW9EZCx5QkFBeUIsQ0FBQ0MsT0FBOUUsQ0FERDtBQUVBLFFBQUlxQixRQUFRLENBQUNOLE1BQVQsS0FBb0IsQ0FBcEIsSUFBeUJNLFFBQVEsS0FBSyxLQUExQyxFQUFpRDtBQUNqRCxRQUFNRSxPQUFPLEdBQUd4Qix5QkFBeUIsQ0FBQ0csWUFBMUM7QUFFQSxRQUFJc0IsU0FBUyxHQUFHLHVDQUFoQjtBQUNBckIsSUFBQUEsQ0FBQyxDQUFDc0IsSUFBRixDQUFPSixRQUFQLEVBQWlCLFVBQUNLLEdBQUQsRUFBTUMsS0FBTixFQUFnQjtBQUNoQ0gsTUFBQUEsU0FBUyxJQUFJLE1BQWI7QUFDQUEsTUFBQUEsU0FBUyxrQkFBV0UsR0FBWCxVQUFUO0FBQ0FGLE1BQUFBLFNBQVMsa0JBQVdHLEtBQVgsVUFBVDtBQUNBSCxNQUFBQSxTQUFTLElBQUksT0FBYjtBQUNBLEtBTEQ7QUFNQUEsSUFBQUEsU0FBUyxJQUFJLFVBQWI7QUFDQW5CLElBQUFBLFlBQVksQ0FBQ3VCLGFBQWIsQ0FBMkJKLFNBQTNCOztBQUVBLFFBQUksWUFBWUgsUUFBWixJQUF3QkEsUUFBUSxDQUFDUSxNQUFULENBQWdCQyxXQUFoQixHQUE4QkMsT0FBOUIsQ0FBc0MsV0FBdEMsS0FBc0QsQ0FBbEYsRUFBcUY7QUFDcEZSLE1BQUFBLE9BQU8sQ0FBQ1MsV0FBUixDQUFvQixNQUFwQixFQUE0QkMsUUFBNUIsQ0FBcUMsT0FBckM7QUFDQSxLQUZELE1BRU87QUFDTlYsTUFBQUEsT0FBTyxDQUFDUyxXQUFSLENBQW9CLE9BQXBCLEVBQTZCQyxRQUE3QixDQUFzQyxNQUF0QztBQUNBOztBQUNELFFBQUlWLE9BQU8sQ0FBQ1csUUFBUixDQUFpQixPQUFqQixDQUFKLEVBQStCO0FBQzlCWCxNQUFBQSxPQUFPLENBQUNZLElBQVIsQ0FBYUMsZUFBZSxDQUFDQyxTQUE3QjtBQUNBLEtBRkQsTUFFTztBQUNOZCxNQUFBQSxPQUFPLENBQUNZLElBQVIsQ0FBYUMsZUFBZSxDQUFDRSxVQUE3QjtBQUNBO0FBQ0Q7QUFwRGdDLENBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCDCqSAyMDE3LTIwMjEgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuXG4vKiBnbG9iYWwgZ2xvYmFsVHJhbnNsYXRlLCBleHRlbnNpb24sIERlYnVnZ2VySW5mbywgUGJ4QXBpICovXG5cbmNvbnN0IGV4dGVuc2lvblN0YXR1c0xvb3BXb3JrZXIgPSB7XG5cdHRpbWVPdXQ6IDMwMDAsXG5cdHRpbWVPdXRIYW5kbGU6ICcnLFxuXHQkc3RhdHVzTGFiZWw6ICQoJyNzdGF0dXMnKSxcblx0LyoqXG5cdCAqIGluaXRpYWxpemUoKSDRgdC+0LfQtNCw0L3QuNC1INC+0LHRitC10LrRgtC+0LIg0Lgg0LfQsNC/0YPRgdC6INC40YVcblx0ICovXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0RGVidWdnZXJJbmZvLmluaXRpYWxpemUoKTtcblx0XHRpZiAoZXh0ZW5zaW9uLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZScsJ2lkJykhPT0nJyl7XG5cdFx0XHRleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLnJlc3RhcnRXb3JrZXIoKTtcblx0XHR9XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdGV4dGVuc2lvblN0YXR1c0xvb3BXb3JrZXIud29ya2VyKCk7XG5cdH0sXG5cdHdvcmtlcigpIHtcblx0XHRpZiAoZXh0ZW5zaW9uLmRlZmF1bHROdW1iZXIubGVuZ3RoID09PSAwKSByZXR1cm47XG5cdFx0Y29uc3QgcGFyYW0gPSB7IHBlZXI6IGV4dGVuc2lvbi5kZWZhdWx0TnVtYmVyIH07XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdFBieEFwaS5HZXRQZWVyU3RhdHVzKHBhcmFtLCBleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLmNiUmVmcmVzaEV4dGVuc2lvblN0YXR1cyk7XG5cdH0sXG5cdC8qKlxuXHQgKiBjYlJlZnJlc2hFeHRlbnNpb25TdGF0dXMoKSDQntCx0L3QvtCy0LvQtdC90LjQtSDRgdGC0LDRgtGD0YHQvtCyINC/0LjRgNCwXG5cdCAqL1xuXHRjYlJlZnJlc2hFeHRlbnNpb25TdGF0dXMocmVzcG9uc2UpIHtcblx0XHRleHRlbnNpb25TdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUgPVxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci53b3JrZXIsIGV4dGVuc2lvblN0YXR1c0xvb3BXb3JrZXIudGltZU91dCk7XG5cdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA9PT0gMCB8fCByZXNwb25zZSA9PT0gZmFsc2UpIHJldHVybjtcblx0XHRjb25zdCAkc3RhdHVzID0gZXh0ZW5zaW9uU3RhdHVzTG9vcFdvcmtlci4kc3RhdHVzTGFiZWw7XG5cblx0XHRsZXQgaHRtbFRhYmxlID0gJzx0YWJsZSBjbGFzcz1cInVpIHZlcnkgY29tcGFjdCB0YWJsZVwiPic7XG5cdFx0JC5lYWNoKHJlc3BvbnNlLCAoa2V5LCB2YWx1ZSkgPT4ge1xuXHRcdFx0aHRtbFRhYmxlICs9ICc8dHI+Jztcblx0XHRcdGh0bWxUYWJsZSArPSBgPHRkPiR7a2V5fTwvdGQ+YDtcblx0XHRcdGh0bWxUYWJsZSArPSBgPHRkPiR7dmFsdWV9PC90ZD5gO1xuXHRcdFx0aHRtbFRhYmxlICs9ICc8L3RyPic7XG5cdFx0fSk7XG5cdFx0aHRtbFRhYmxlICs9ICc8L3RhYmxlPic7XG5cdFx0RGVidWdnZXJJbmZvLlVwZGF0ZUNvbnRlbnQoaHRtbFRhYmxlKTtcblxuXHRcdGlmICgnU3RhdHVzJyBpbiByZXNwb25zZSAmJiByZXNwb25zZS5TdGF0dXMudG9VcHBlckNhc2UoKS5pbmRleE9mKCdSRUFDSEFCTEUnKSA+PSAwKSB7XG5cdFx0XHQkc3RhdHVzLnJlbW92ZUNsYXNzKCdncmV5JykuYWRkQ2xhc3MoJ2dyZWVuJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRzdGF0dXMucmVtb3ZlQ2xhc3MoJ2dyZWVuJykuYWRkQ2xhc3MoJ2dyZXknKTtcblx0XHR9XG5cdFx0aWYgKCRzdGF0dXMuaGFzQ2xhc3MoJ2dyZWVuJykpIHtcblx0XHRcdCRzdGF0dXMuaHRtbChnbG9iYWxUcmFuc2xhdGUuZXhfT25saW5lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JHN0YXR1cy5odG1sKGdsb2JhbFRyYW5zbGF0ZS5leF9PZmZsaW5lKTtcblx0XHR9XG5cdH0sXG59OyJdfQ==