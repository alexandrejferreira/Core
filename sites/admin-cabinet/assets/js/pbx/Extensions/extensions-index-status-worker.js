"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright © 2017-2022 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, DebuggerInfo */
var extensionsStatusLoopWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  green: '<div class="ui green empty circular label" style="width: 1px;height: 1px;"></div>',
  grey: '<div class="ui grey empty circular label" style="width: 1px;height: 1px;"></div>',
  initialize: function initialize() {
    // Запустим обновление статуса провайдера
    DebuggerInfo.initialize();
    extensionsStatusLoopWorker.restartWorker();
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(extensionsStatusLoopWorker.timeoutHandle);
    extensionsStatusLoopWorker.worker();
  },
  worker: function worker() {
    window.clearTimeout(extensionsStatusLoopWorker.timeoutHandle);
    PbxApi.GetPeersStatus(extensionsStatusLoopWorker.cbRefreshExtensionsStatus);
  },
  cbRefreshExtensionsStatus: function cbRefreshExtensionsStatus(response) {
    extensionsStatusLoopWorker.timeoutHandle = window.setTimeout(extensionsStatusLoopWorker.worker, extensionsStatusLoopWorker.timeOut);
    if (response.length === 0 || response === false) return;
    var htmlTable = '<table class="ui very compact table">';
    $.each(response, function (key, value) {
      htmlTable += '<tr>';
      htmlTable += "<td>".concat(value.id, "</td>");
      htmlTable += "<td>".concat(value.state, "</td>");
      htmlTable += '</tr>';
    });
    htmlTable += '</table>';
    DebuggerInfo.UpdateContent(htmlTable);
    $('.extension-row').each(function (index, obj) {
      var number = $(obj).attr('data-value');
      var result = $.grep(response, function (e) {
        return e.id === number;
      });

      if (result.length === 0) {
        // not found
        $(obj).find('.extension-status').html(extensionsStatusLoopWorker.grey);
      } else if (result[0].state.toUpperCase() === 'OK') {
        $(obj).find('.extension-status').html(extensionsStatusLoopWorker.green);
      } else {
        $(obj).find('.extension-status').html(extensionsStatusLoopWorker.grey);
      }
    });
  }
};
$(document).ready(function () {
  extensionsStatusLoopWorker.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FeHRlbnNpb25zL2V4dGVuc2lvbnMtaW5kZXgtc3RhdHVzLXdvcmtlci5qcyJdLCJuYW1lcyI6WyJleHRlbnNpb25zU3RhdHVzTG9vcFdvcmtlciIsInRpbWVPdXQiLCJ0aW1lT3V0SGFuZGxlIiwiZ3JlZW4iLCJncmV5IiwiaW5pdGlhbGl6ZSIsIkRlYnVnZ2VySW5mbyIsInJlc3RhcnRXb3JrZXIiLCJ3aW5kb3ciLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0SGFuZGxlIiwid29ya2VyIiwiUGJ4QXBpIiwiR2V0UGVlcnNTdGF0dXMiLCJjYlJlZnJlc2hFeHRlbnNpb25zU3RhdHVzIiwicmVzcG9uc2UiLCJzZXRUaW1lb3V0IiwibGVuZ3RoIiwiaHRtbFRhYmxlIiwiJCIsImVhY2giLCJrZXkiLCJ2YWx1ZSIsImlkIiwic3RhdGUiLCJVcGRhdGVDb250ZW50IiwiaW5kZXgiLCJvYmoiLCJudW1iZXIiLCJhdHRyIiwicmVzdWx0IiwiZ3JlcCIsImUiLCJmaW5kIiwiaHRtbCIsInRvVXBwZXJDYXNlIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsSUFBTUEsMEJBQTBCLEdBQUc7QUFDbENDLEVBQUFBLE9BQU8sRUFBRSxJQUR5QjtBQUVsQ0MsRUFBQUEsYUFBYSxFQUFFLEVBRm1CO0FBR2xDQyxFQUFBQSxLQUFLLEVBQUUsbUZBSDJCO0FBSWxDQyxFQUFBQSxJQUFJLEVBQUUsa0ZBSjRCO0FBS2xDQyxFQUFBQSxVQUxrQyx3QkFLckI7QUFDWjtBQUNBQyxJQUFBQSxZQUFZLENBQUNELFVBQWI7QUFDQUwsSUFBQUEsMEJBQTBCLENBQUNPLGFBQTNCO0FBQ0EsR0FUaUM7QUFVbENBLEVBQUFBLGFBVmtDLDJCQVVsQjtBQUNmQyxJQUFBQSxNQUFNLENBQUNDLFlBQVAsQ0FBb0JULDBCQUEwQixDQUFDVSxhQUEvQztBQUNBVixJQUFBQSwwQkFBMEIsQ0FBQ1csTUFBM0I7QUFDQSxHQWJpQztBQWNsQ0EsRUFBQUEsTUFka0Msb0JBY3pCO0FBQ1JILElBQUFBLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQlQsMEJBQTBCLENBQUNVLGFBQS9DO0FBQ0FFLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmIsMEJBQTBCLENBQUNjLHlCQUFqRDtBQUNBLEdBakJpQztBQWtCbENBLEVBQUFBLHlCQWxCa0MscUNBa0JSQyxRQWxCUSxFQWtCRTtBQUNuQ2YsSUFBQUEsMEJBQTBCLENBQUNVLGFBQTNCLEdBQ0NGLE1BQU0sQ0FBQ1EsVUFBUCxDQUFrQmhCLDBCQUEwQixDQUFDVyxNQUE3QyxFQUFxRFgsMEJBQTBCLENBQUNDLE9BQWhGLENBREQ7QUFFQSxRQUFJYyxRQUFRLENBQUNFLE1BQVQsS0FBb0IsQ0FBcEIsSUFBeUJGLFFBQVEsS0FBSyxLQUExQyxFQUFpRDtBQUNqRCxRQUFJRyxTQUFTLEdBQUcsdUNBQWhCO0FBQ0FDLElBQUFBLENBQUMsQ0FBQ0MsSUFBRixDQUFPTCxRQUFQLEVBQWlCLFVBQUNNLEdBQUQsRUFBTUMsS0FBTixFQUFnQjtBQUNoQ0osTUFBQUEsU0FBUyxJQUFJLE1BQWI7QUFDQUEsTUFBQUEsU0FBUyxrQkFBV0ksS0FBSyxDQUFDQyxFQUFqQixVQUFUO0FBQ0FMLE1BQUFBLFNBQVMsa0JBQVdJLEtBQUssQ0FBQ0UsS0FBakIsVUFBVDtBQUNBTixNQUFBQSxTQUFTLElBQUksT0FBYjtBQUNBLEtBTEQ7QUFNQUEsSUFBQUEsU0FBUyxJQUFJLFVBQWI7QUFDQVosSUFBQUEsWUFBWSxDQUFDbUIsYUFBYixDQUEyQlAsU0FBM0I7QUFDQUMsSUFBQUEsQ0FBQyxDQUFDLGdCQUFELENBQUQsQ0FBb0JDLElBQXBCLENBQXlCLFVBQUNNLEtBQUQsRUFBUUMsR0FBUixFQUFnQjtBQUN4QyxVQUFNQyxNQUFNLEdBQUdULENBQUMsQ0FBQ1EsR0FBRCxDQUFELENBQU9FLElBQVAsQ0FBWSxZQUFaLENBQWY7QUFDQSxVQUFNQyxNQUFNLEdBQUdYLENBQUMsQ0FBQ1ksSUFBRixDQUFPaEIsUUFBUCxFQUFpQixVQUFBaUIsQ0FBQztBQUFBLGVBQUlBLENBQUMsQ0FBQ1QsRUFBRixLQUFTSyxNQUFiO0FBQUEsT0FBbEIsQ0FBZjs7QUFDQSxVQUFJRSxNQUFNLENBQUNiLE1BQVAsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDeEI7QUFDQUUsUUFBQUEsQ0FBQyxDQUFDUSxHQUFELENBQUQsQ0FBT00sSUFBUCxDQUFZLG1CQUFaLEVBQWlDQyxJQUFqQyxDQUFzQ2xDLDBCQUEwQixDQUFDSSxJQUFqRTtBQUNBLE9BSEQsTUFHTyxJQUFJMEIsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVTixLQUFWLENBQWdCVyxXQUFoQixPQUFrQyxJQUF0QyxFQUE0QztBQUNsRGhCLFFBQUFBLENBQUMsQ0FBQ1EsR0FBRCxDQUFELENBQU9NLElBQVAsQ0FBWSxtQkFBWixFQUFpQ0MsSUFBakMsQ0FBc0NsQywwQkFBMEIsQ0FBQ0csS0FBakU7QUFDQSxPQUZNLE1BRUE7QUFDTmdCLFFBQUFBLENBQUMsQ0FBQ1EsR0FBRCxDQUFELENBQU9NLElBQVAsQ0FBWSxtQkFBWixFQUFpQ0MsSUFBakMsQ0FBc0NsQywwQkFBMEIsQ0FBQ0ksSUFBakU7QUFDQTtBQUNELEtBWEQ7QUFZQTtBQTNDaUMsQ0FBbkM7QUErQ0FlLENBQUMsQ0FBQ2lCLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDdkJyQyxFQUFBQSwwQkFBMEIsQ0FBQ0ssVUFBM0I7QUFDQSxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCDCqSAyMDE3LTIwMjIgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuLyogZ2xvYmFsIFBieEFwaSwgRGVidWdnZXJJbmZvICovXG5cbmNvbnN0IGV4dGVuc2lvbnNTdGF0dXNMb29wV29ya2VyID0ge1xuXHR0aW1lT3V0OiAzMDAwLFxuXHR0aW1lT3V0SGFuZGxlOiAnJyxcblx0Z3JlZW46ICc8ZGl2IGNsYXNzPVwidWkgZ3JlZW4gZW1wdHkgY2lyY3VsYXIgbGFiZWxcIiBzdHlsZT1cIndpZHRoOiAxcHg7aGVpZ2h0OiAxcHg7XCI+PC9kaXY+Jyxcblx0Z3JleTogJzxkaXYgY2xhc3M9XCJ1aSBncmV5IGVtcHR5IGNpcmN1bGFyIGxhYmVsXCIgc3R5bGU9XCJ3aWR0aDogMXB4O2hlaWdodDogMXB4O1wiPjwvZGl2PicsXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0Ly8g0JfQsNC/0YPRgdGC0LjQvCDQvtCx0L3QvtCy0LvQtdC90LjQtSDRgdGC0LDRgtGD0YHQsCDQv9GA0L7QstCw0LnQtNC10YDQsFxuXHRcdERlYnVnZ2VySW5mby5pbml0aWFsaXplKCk7XG5cdFx0ZXh0ZW5zaW9uc1N0YXR1c0xvb3BXb3JrZXIucmVzdGFydFdvcmtlcigpO1xuXHR9LFxuXHRyZXN0YXJ0V29ya2VyKCkge1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoZXh0ZW5zaW9uc1N0YXR1c0xvb3BXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0ZXh0ZW5zaW9uc1N0YXR1c0xvb3BXb3JrZXIud29ya2VyKCk7XG5cdH0sXG5cdHdvcmtlcigpIHtcblx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KGV4dGVuc2lvbnNTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUpO1xuXHRcdFBieEFwaS5HZXRQZWVyc1N0YXR1cyhleHRlbnNpb25zU3RhdHVzTG9vcFdvcmtlci5jYlJlZnJlc2hFeHRlbnNpb25zU3RhdHVzKTtcblx0fSxcblx0Y2JSZWZyZXNoRXh0ZW5zaW9uc1N0YXR1cyhyZXNwb25zZSkge1xuXHRcdGV4dGVuc2lvbnNTdGF0dXNMb29wV29ya2VyLnRpbWVvdXRIYW5kbGUgPVxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoZXh0ZW5zaW9uc1N0YXR1c0xvb3BXb3JrZXIud29ya2VyLCBleHRlbnNpb25zU3RhdHVzTG9vcFdvcmtlci50aW1lT3V0KTtcblx0XHRpZiAocmVzcG9uc2UubGVuZ3RoID09PSAwIHx8IHJlc3BvbnNlID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdGxldCBodG1sVGFibGUgPSAnPHRhYmxlIGNsYXNzPVwidWkgdmVyeSBjb21wYWN0IHRhYmxlXCI+Jztcblx0XHQkLmVhY2gocmVzcG9uc2UsIChrZXksIHZhbHVlKSA9PiB7XG5cdFx0XHRodG1sVGFibGUgKz0gJzx0cj4nO1xuXHRcdFx0aHRtbFRhYmxlICs9IGA8dGQ+JHt2YWx1ZS5pZH08L3RkPmA7XG5cdFx0XHRodG1sVGFibGUgKz0gYDx0ZD4ke3ZhbHVlLnN0YXRlfTwvdGQ+YDtcblx0XHRcdGh0bWxUYWJsZSArPSAnPC90cj4nO1xuXHRcdH0pO1xuXHRcdGh0bWxUYWJsZSArPSAnPC90YWJsZT4nO1xuXHRcdERlYnVnZ2VySW5mby5VcGRhdGVDb250ZW50KGh0bWxUYWJsZSk7XG5cdFx0JCgnLmV4dGVuc2lvbi1yb3cnKS5lYWNoKChpbmRleCwgb2JqKSA9PiB7XG5cdFx0XHRjb25zdCBudW1iZXIgPSAkKG9iaikuYXR0cignZGF0YS12YWx1ZScpO1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gJC5ncmVwKHJlc3BvbnNlLCBlID0+IGUuaWQgPT09IG51bWJlcik7XG5cdFx0XHRpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHQvLyBub3QgZm91bmRcblx0XHRcdFx0JChvYmopLmZpbmQoJy5leHRlbnNpb24tc3RhdHVzJykuaHRtbChleHRlbnNpb25zU3RhdHVzTG9vcFdvcmtlci5ncmV5KTtcblx0XHRcdH0gZWxzZSBpZiAocmVzdWx0WzBdLnN0YXRlLnRvVXBwZXJDYXNlKCkgPT09ICdPSycpIHtcblx0XHRcdFx0JChvYmopLmZpbmQoJy5leHRlbnNpb24tc3RhdHVzJykuaHRtbChleHRlbnNpb25zU3RhdHVzTG9vcFdvcmtlci5ncmVlbik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKG9iaikuZmluZCgnLmV4dGVuc2lvbi1zdGF0dXMnKS5odG1sKGV4dGVuc2lvbnNTdGF0dXNMb29wV29ya2VyLmdyZXkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxufTtcblxuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG5cdGV4dGVuc2lvbnNTdGF0dXNMb29wV29ya2VyLmluaXRpYWxpemUoKTtcbn0pOyJdfQ==