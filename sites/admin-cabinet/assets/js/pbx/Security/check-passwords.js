"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright © 2017-2022 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */
var checkPasswordWorker = {
  initialize: function initialize() {
    $(window).on('SecurityWarning', checkPasswordWorker.onWarning);
  },
  onWarning: function onWarning(event, data) {
    var needShow = false;
    $("#updatePasswordWindow div.miko-settings-container").hide();
    $.each(data.needUpdate, function (key, value) {
      $("#updatePasswordWindow #".concat(value, "-container")).show();
      needShow = true;
    });

    if (needShow) {
      $('#updatePasswordWindow #savePassword').on('click', checkPasswordWorker.cbOnClickSavePassword);
      var modalWindow = $('#updatePasswordWindow');
      modalWindow.on('keyup', function () {
        PasswordScore.checkPassStrength({
          pass: $("#updatePasswordWindow #WebAdminPassword").val(),
          bar: $('.WebAdminPassword-score'),
          section: modalWindow
        });
        PasswordScore.checkPassStrength({
          pass: $("#updatePasswordWindow #SSHPassword").val(),
          bar: $('.SSHPassword'),
          section: modalWindow
        });
      });
      modalWindow.modal({
        closable: false
      }).modal('show');
    }
  },

  /**
   * Отправка формы обновления паролей SSH и Web.
   */
  cbOnClickSavePassword: function cbOnClickSavePassword() {
    $('#updatePasswordWindowResult').hide();
    var errors = '';
    var params = {};
    $.each(['WebAdminPassword', 'SSHPassword'], function (key, value) {
      if (!$("#updatePasswordWindow #".concat(value)).is(":visible")) {
        return;
      }

      var pass = $("#updatePasswordWindow #".concat(value)).val();
      var passRep = $("#updatePasswordWindow #".concat(value, "Repeat")).val();

      if (pass !== passRep) {
        errors += '<li>' + globalTranslate["pass_Check".concat(value, "DontMatch")] + '</li>';
      } else if (pass.trim() === '') {
        errors += '<li>' + globalTranslate["pass_Check".concat(value, "Empty")] + '</li>';
      } else if (PasswordScore.scorePassword(pass) < 50) {
        errors += "<li>".concat(globalTranslate['pass_Check${value}Simple'], "</li>");
      } else {
        params[value] = pass;
      }
    });

    if (errors.trim() !== '') {
      errors = "<ul class=\"ui list\">".concat(errors, "</ul>");
      checkPasswordWorker.showPasswordError(globalTranslate['pass_CheckWebPassErrorChange'], errors);
    } else {
      checkPasswordWorker.savePasswords(params);
    }
  },
  savePasswords: function savePasswords(params) {
    $.post('/admin-cabinet/general-settings/save', params, function (data) {
      if (data.success === false) {
        var errors = '';

        if (typeof data.passwordCheckFail !== 'undefined') {
          $.each(data.passwordCheckFail, function (key, value) {
            errors += '<li>' + globalTranslate["pass_Check".concat(value, "Simple")] + '</li>';
          });
        } else {
          errors += '<li>' + globalTranslate['er_InternalServerError'] + '</li>';
        }

        if (errors.trim() !== '') {
          checkPasswordWorker.showPasswordError(globalTranslate['pass_CheckWebPassErrorChange'], errors);
        }
      } else {
        $('#updatePasswordWindow').modal({
          closable: false
        }).modal('hide');
        var event = document.createEvent('Event');
        event.initEvent('ConfigDataChanged', false, true);
        window.dispatchEvent(event);
      }
    });
  },
  showPasswordError: function showPasswordError(header, body) {
    $('#updatePasswordWindowResult div').html(header);
    $('#updatePasswordWindowResult p').html(body);
    $('#updatePasswordWindowResult').show();
  }
};
$(document).ready(function () {
  checkPasswordWorker.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZWN1cml0eS9jaGVjay1wYXNzd29yZHMuanMiXSwibmFtZXMiOlsiY2hlY2tQYXNzd29yZFdvcmtlciIsImluaXRpYWxpemUiLCIkIiwid2luZG93Iiwib24iLCJvbldhcm5pbmciLCJldmVudCIsImRhdGEiLCJuZWVkU2hvdyIsImhpZGUiLCJlYWNoIiwibmVlZFVwZGF0ZSIsImtleSIsInZhbHVlIiwic2hvdyIsImNiT25DbGlja1NhdmVQYXNzd29yZCIsIm1vZGFsV2luZG93IiwiUGFzc3dvcmRTY29yZSIsImNoZWNrUGFzc1N0cmVuZ3RoIiwicGFzcyIsInZhbCIsImJhciIsInNlY3Rpb24iLCJtb2RhbCIsImNsb3NhYmxlIiwiZXJyb3JzIiwicGFyYW1zIiwiaXMiLCJwYXNzUmVwIiwiZ2xvYmFsVHJhbnNsYXRlIiwidHJpbSIsInNjb3JlUGFzc3dvcmQiLCJzaG93UGFzc3dvcmRFcnJvciIsInNhdmVQYXNzd29yZHMiLCJwb3N0Iiwic3VjY2VzcyIsInBhc3N3b3JkQ2hlY2tGYWlsIiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJoZWFkZXIiLCJib2R5IiwiaHRtbCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxtQkFBbUIsR0FBRztBQUN4QkMsRUFBQUEsVUFEd0Isd0JBQ1g7QUFDVEMsSUFBQUEsQ0FBQyxDQUFDQyxNQUFELENBQUQsQ0FBVUMsRUFBVixDQUFhLGlCQUFiLEVBQWdDSixtQkFBbUIsQ0FBQ0ssU0FBcEQ7QUFDSCxHQUh1QjtBQUl4QkEsRUFBQUEsU0FKd0IscUJBSWRDLEtBSmMsRUFJUEMsSUFKTyxFQUlEO0FBQ25CLFFBQUlDLFFBQVEsR0FBRyxLQUFmO0FBQ0FOLElBQUFBLENBQUMsQ0FB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QWpDLEVBQXdERCxLQUF4RCxDQUE4RCxNQUE5RDtBQUNBLFlBQUlqQixLQUFLLEdBQUcrQixRQUFRLENBQUNDLFdBQVQsQ0FBcUIsT0FBckIsQ0FBWjtBQUNBaEMsUUFBQUEsS0FBSyxDQUFDaUMsU0FBTixDQUFnQixtQkFBaEIsRUFBcUMsS0FBckMsRUFBNEMsSUFBNUM7QUFDQXBDLFFBQUFBLE1BQU0sQ0FBQ3FDLGFBQVAsQ0FBcUJsQyxLQUFyQjtBQUNIO0FBQ0osS0FuQkQ7QUFvQkgsR0FqRnVCO0FBa0Z4QjBCLEVBQUFBLGlCQWxGd0IsNkJBa0ZOUyxNQWxGTSxFQWtGRUMsSUFsRkYsRUFrRk87QUFDM0J4QyxJQUFBQSxDQUFDLENBQUMsaUNBQUQsQ0FBRCxDQUFxQ3lDLElBQXJDLENBQTBDRixNQUExQztBQUNBdkMsSUFBQUEsQ0FBQyxDQUFDLCtCQUFELENBQUQsQ0FBbUN5QyxJQUFuQyxDQUF3Q0QsSUFBeEM7QUFDQXhDLElBQUFBLENBQUMsQ0FBQyw2QkFBRCxDQUFELENBQWlDWSxJQUFqQztBQUNIO0FBdEZ1QixDQUE1QjtBQTBGQVosQ0FBQyxDQUFDbUMsUUFBRCxDQUFELENBQVlPLEtBQVosQ0FBa0IsWUFBTTtBQUNwQjVDLEVBQUFBLG1CQUFtQixDQUFDQyxVQUFwQjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMiBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG5jb25zdCBjaGVja1Bhc3N3b3JkV29ya2VyID0ge1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgICQod2luZG93KS5vbignU2VjdXJpdHlXYXJuaW5nJywgY2hlY2tQYXNzd29yZFdvcmtlci5vbldhcm5pbmcpO1xuICAgIH0sXG4gICAgb25XYXJuaW5nKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIGxldCBuZWVkU2hvdyA9IGZhbHNlO1xuICAgICAgICAkKFwiI3VwZGF0ZVBhc3N3b3JkV2luZG93IGRpdi5taWtvLXNldHRpbmdzLWNvbnRhaW5lclwiKS5oaWRlKCk7XG4gICAgICAgICQuZWFjaChkYXRhLm5lZWRVcGRhdGUsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAkKGAjdXBkYXRlUGFzc3dvcmRXaW5kb3cgIyR7dmFsdWV9LWNvbnRhaW5lcmApLnNob3coKTtcbiAgICAgICAgICAgIG5lZWRTaG93ID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmKG5lZWRTaG93KXtcbiAgICAgICAgICAgICQoJyN1cGRhdGVQYXNzd29yZFdpbmRvdyAjc2F2ZVBhc3N3b3JkJykub24oJ2NsaWNrJywgY2hlY2tQYXNzd29yZFdvcmtlci5jYk9uQ2xpY2tTYXZlUGFzc3dvcmQpO1xuICAgICAgICAgICAgbGV0IG1vZGFsV2luZG93ID0gJCgnI3VwZGF0ZVBhc3N3b3JkV2luZG93Jyk7XG4gICAgICAgICAgICBtb2RhbFdpbmRvdy5vbigna2V5dXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgUGFzc3dvcmRTY29yZS5jaGVja1Bhc3NTdHJlbmd0aCh7XG4gICAgICAgICAgICAgICAgICAgIHBhc3M6ICQoYCN1cGRhdGVQYXNzd29yZFdpbmRvdyAjV2ViQWRtaW5QYXNzd29yZGApLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICBiYXI6ICQoJy5XZWJBZG1pblBhc3N3b3JkLXNjb3JlJyksXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb246IG1vZGFsV2luZG93LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFBhc3N3b3JkU2NvcmUuY2hlY2tQYXNzU3RyZW5ndGgoe1xuICAgICAgICAgICAgICAgICAgICBwYXNzOiAkKGAjdXBkYXRlUGFzc3dvcmRXaW5kb3cgI1NTSFBhc3N3b3JkYCkudmFsKCksXG4gICAgICAgICAgICAgICAgICAgIGJhcjogJCgnLlNTSFBhc3N3b3JkJyksXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb246IG1vZGFsV2luZG93LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtb2RhbFdpbmRvdy5tb2RhbCh7IGNsb3NhYmxlIDogZmFsc2UsIH0pLm1vZGFsKCdzaG93JylcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDQntGC0L/RgNCw0LLQutCwINGE0L7RgNC80Ysg0L7QsdC90L7QstC70LXQvdC40Y8g0L/QsNGA0L7Qu9C10LkgU1NIINC4IFdlYi5cbiAgICAgKi9cbiAgICBjYk9uQ2xpY2tTYXZlUGFzc3dvcmQoKXtcbiAgICAgICAgJCgnI3VwZGF0ZVBhc3N3b3JkV2luZG93UmVzdWx0JykuaGlkZSgpO1xuICAgICAgICBsZXQgZXJyb3JzID0gJyc7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICAgICAgJC5lYWNoKFsnV2ViQWRtaW5QYXNzd29yZCcsICdTU0hQYXNzd29yZCddLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYoISQoYCN1cGRhdGVQYXNzd29yZFdpbmRvdyAjJHt2YWx1ZX1gKS5pcyhcIjp2aXNpYmxlXCIpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGFzcyBcdD0gJChgI3VwZGF0ZVBhc3N3b3JkV2luZG93ICMke3ZhbHVlfWApLnZhbCgpO1xuICAgICAgICAgICAgbGV0IHBhc3NSZXAgXHQ9ICQoYCN1cGRhdGVQYXNzd29yZFdpbmRvdyAjJHt2YWx1ZX1SZXBlYXRgKS52YWwoKTtcbiAgICAgICAgICAgIGlmKCBwYXNzICE9PSBwYXNzUmVwKXtcbiAgICAgICAgICAgICAgICBlcnJvcnMrPSc8bGk+JytnbG9iYWxUcmFuc2xhdGVbYHBhc3NfQ2hlY2ske3ZhbHVlfURvbnRNYXRjaGBdKyc8L2xpPic7XG4gICAgICAgICAgICB9ZWxzZSBpZihwYXNzLnRyaW0oKSA9PT0gJycpe1xuICAgICAgICAgICAgICAgIGVycm9ycys9JzxsaT4nK2dsb2JhbFRyYW5zbGF0ZVtgcGFzc19DaGVjayR7dmFsdWV9RW1wdHlgXSsnPC9saT4nO1xuICAgICAgICAgICAgfWVsc2UgaWYoUGFzc3dvcmRTY29yZS5zY29yZVBhc3N3b3JkKHBhc3MpIDwgNTApe1xuICAgICAgICAgICAgICAgIGVycm9ycys9YDxsaT4ke2dsb2JhbFRyYW5zbGF0ZVsncGFzc19DaGVjayR7dmFsdWV9U2ltcGxlJ119PC9saT5gO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3ZhbHVlXSA9IHBhc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZihlcnJvcnMudHJpbSgpICE9PSAnJyl7XG4gICAgICAgICAgICBlcnJvcnMgPSBgPHVsIGNsYXNzPVwidWkgbGlzdFwiPiR7ZXJyb3JzfTwvdWw+YDtcbiAgICAgICAgICAgIGNoZWNrUGFzc3dvcmRXb3JrZXIuc2hvd1Bhc3N3b3JkRXJyb3IoZ2xvYmFsVHJhbnNsYXRlWydwYXNzX0NoZWNrV2ViUGFzc0Vycm9yQ2hhbmdlJ10sIGVycm9ycyk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgY2hlY2tQYXNzd29yZFdvcmtlci5zYXZlUGFzc3dvcmRzKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNhdmVQYXNzd29yZHMocGFyYW1zKXtcbiAgICAgICAgJC5wb3N0KCcvYWRtaW4tY2FiaW5ldC9nZW5lcmFsLXNldHRpbmdzL3NhdmUnLCBwYXJhbXMsIGZ1bmN0aW9uKCBkYXRhICkge1xuICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzID09PSBmYWxzZSl7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9ycyA9ICcnO1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBkYXRhLnBhc3N3b3JkQ2hlY2tGYWlsICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChkYXRhLnBhc3N3b3JkQ2hlY2tGYWlsLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzKz0nPGxpPicrZ2xvYmFsVHJhbnNsYXRlW2BwYXNzX0NoZWNrJHt2YWx1ZX1TaW1wbGVgXSsnPC9saT4nO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzKz0nPGxpPicrZ2xvYmFsVHJhbnNsYXRlWydlcl9JbnRlcm5hbFNlcnZlckVycm9yJ10rJzwvbGk+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoZXJyb3JzLnRyaW0oKSAhPT0gJycpe1xuICAgICAgICAgICAgICAgICAgICBjaGVja1Bhc3N3b3JkV29ya2VyLnNob3dQYXNzd29yZEVycm9yKGdsb2JhbFRyYW5zbGF0ZVsncGFzc19DaGVja1dlYlBhc3NFcnJvckNoYW5nZSddLCBlcnJvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICQoJyN1cGRhdGVQYXNzd29yZFdpbmRvdycpLm1vZGFsKHsgY2xvc2FibGUgOiBmYWxzZSwgfSkubW9kYWwoJ2hpZGUnKVxuICAgICAgICAgICAgICAgIGxldCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudCgnQ29uZmlnRGF0YUNoYW5nZWQnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHNob3dQYXNzd29yZEVycm9yKGhlYWRlciwgYm9keSl7XG4gICAgICAgICQoJyN1cGRhdGVQYXNzd29yZFdpbmRvd1Jlc3VsdCBkaXYnKS5odG1sKGhlYWRlcik7XG4gICAgICAgICQoJyN1cGRhdGVQYXNzd29yZFdpbmRvd1Jlc3VsdCBwJykuaHRtbChib2R5KTtcbiAgICAgICAgJCgnI3VwZGF0ZVBhc3N3b3JkV2luZG93UmVzdWx0Jykuc2hvdygpO1xuICAgIH0sXG59O1xuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgICBjaGVja1Bhc3N3b3JkV29ya2VyLmluaXRpYWxpemUoKTtcbn0pOyJdfQ==