"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl,globalTranslate, Form */
$.fn.form.settings.rules.ipaddr = function (value) {
  var result = true;
  var f = value.match(/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/);

  if (f === null) {
    result = false;
  } else {
    for (var i = 1; i < 5; i += 1) {
      var a = f[i];

      if (a > 255) {
        result = false;
      }
    }

    if (f[5] > 32) {
      result = false;
    }
  }

  return result;
};

var firewall = {
  $formObj: $('#firewall-form'),
  validateRules: {
    network: {
      identifier: 'network',
      rules: [{
        type: 'ipaddr',
        prompt: globalTranslate.fw_ValidatePermitAddress
      }]
    },
    description: {
      identifier: 'description',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.fw_ValidateRuleName
      }]
    }
  },
  initialize: function initialize() {
    $('#firewall-form .rules,#firewall-form .checkbox').checkbox();
    $('#firewall-form .dropdown').dropdown();
    firewall.initializeForm();
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = firewall.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {},
  initializeForm: function initializeForm() {
    Form.$formObj = firewall.$formObj;
    Form.url = "".concat(globalRootUrl, "firewall/save");
    Form.validateRules = firewall.validateRules;
    Form.cbBeforeSendForm = firewall.cbBeforeSendForm;
    Form.cbAfterSendForm = firewall.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  firewall.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9GaXJld2FsbC9maXJld2FsbC1tb2RpZnkuanMiXSwibmFtZXMiOlsiJCIsImZuIiwiZm9ybSIsInNldHRpbmdzIiwicnVsZXMiLCJpcGFkZHIiLCJ2YWx1ZSIsInJlc3VsdCIsImYiLCJtYXRjaCIsImkiLCJhIiwiZmlyZXdhbGwiLCIkZm9ybU9iaiIsInZhbGlkYXRlUnVsZXMiLCJuZXR3b3JrIiwiaWRlbnRpZmllciIsInR5cGUiLCJwcm9tcHQiLCJnbG9iYWxUcmFuc2xhdGUiLCJmd19WYWxpZGF0ZVBlcm1pdEFkZHJlc3MiLCJkZXNjcmlwdGlvbiIsImZ3X1ZhbGlkYXRlUnVsZU5hbWUiLCJpbml0aWFsaXplIiwiY2hlY2tib3giLCJkcm9wZG93biIsImluaXRpYWxpemVGb3JtIiwiY2JCZWZvcmVTZW5kRm9ybSIsImRhdGEiLCJjYkFmdGVyU2VuZEZvcm0iLCJGb3JtIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBQSxDQUFDLENBQUNDLEVBQUYsQ0FBS0MsSUFBTCxDQUFVQyxRQUFWLENBQW1CQyxLQUFuQixDQUF5QkMsTUFBekIsR0FBa0MsVUFBVUMsS0FBVixFQUFpQjtBQUNsRCxNQUFJQyxNQUFNLEdBQUcsSUFBYjtBQUNBLE1BQU1DLENBQUMsR0FBR0YsS0FBSyxDQUFDRyxLQUFOLENBQVksOENBQVosQ0FBVjs7QUFDQSxNQUFJRCxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNmRCxJQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBLEdBRkQsTUFFTztBQUNOLFNBQUssSUFBSUcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxJQUFJLENBQTVCLEVBQStCO0FBQzlCLFVBQU1DLENBQUMsR0FBR0gsQ0FBQyxDQUFDRSxDQUFELENBQVg7O0FBQ0EsVUFBSUMsQ0FBQyxHQUFHLEdBQVIsRUFBYTtBQUNaSixRQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7O0FBQ0QsUUFBSUMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPLEVBQVgsRUFBZTtBQUNkRCxNQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7O0FBQ0QsU0FBT0EsTUFBUDtBQUNBLENBakJEOztBQW1CQSxJQUFNSyxRQUFRLEdBQUc7QUFDaEJDLEVBQUFBLFFBQVEsRUFBRWIsQ0FBQyxDQUFDLGdCQUFELENBREs7QUFFaEJjLEVBQUFBLGFBQWEsRUFBRTtBQUNkQyxJQUFBQSxPQUFPLEVBQUU7QUFDUkMsTUFBQUEsVUFBVSxFQUFFLFNBREo7QUFFUlosTUFBQUEsS0FBSyxFQUFFLENBQ047QUFDQ2EsUUFBQUEsSUFBSSxFQUFFLFFBRFA7QUFFQ0MsUUFBQUEsTUFBTSxFQUFFQyxlQUFlLENBQUNDO0FBRnpCLE9BRE07QUFGQyxLQURLO0FBVWRDLElBQUFBLFdBQVcsRUFBRTtBQUNaTCxNQUFBQSxVQUFVLEVBQUUsYUFEQTtBQUVaWixNQUFBQSxLQUFLLEVBQUUsQ0FDTjtBQUNDYSxRQUFBQSxJQUFJLEVBQUUsT0FEUDtBQUVDQyxRQUFBQSxNQUFNLEVBQUVDLGVBQWUsQ0FBQ0c7QUFGekIsT0FETTtBQUZLO0FBVkMsR0FGQztBQXNCaEJDLEVBQUFBLFVBdEJnQix3QkFzQkg7QUFDWnZCLElBQUFBLENBQUMsQ0FBQyxnREFBRCxDQUFELENBQW9Ed0IsUUFBcEQ7QUFDQXhCLElBQUFBLENBQUMsQ0FBQywwQkFBRCxDQUFELENBQThCeUIsUUFBOUI7QUFFQWIsSUFBQUEsUUFBUSxDQUFDYyxjQUFUO0FBQ0EsR0EzQmU7QUE0QmhCQyxFQUFBQSxnQkE1QmdCLDRCQTRCQ3hCLFFBNUJELEVBNEJXO0FBQzFCLFFBQU1JLE1BQU0sR0FBR0osUUFBZjtBQUNBSSxJQUFBQSxNQUFNLENBQUNxQixJQUFQLEdBQWNoQixRQUFRLENBQUNDLFFBQVQsQ0FBa0JYLElBQWxCLENBQXVCLFlBQXZCLENBQWQ7QUFDQSxXQUFPSyxNQUFQO0FBQ0EsR0FoQ2U7QUFpQ2hCc0IsRUFBQUEsZUFqQ2dCLDZCQWlDRSxDQUVqQixDQW5DZTtBQW9DaEJILEVBQUFBLGNBcENnQiw0QkFvQ0M7QUFDaEJJLElBQUFBLElBQUksQ0FBQ2pCLFFBQUwsR0FBZ0JELFFBQVEsQ0FBQ0MsUUFBekI7QUFDQWlCLElBQUFBLElBQUksQ0FBQ0MsR0FBTCxhQUFjQyxhQUFkO0FBQ0FGLElBQUFBLElBQUksQ0FBQ2hCLGFBQUwsR0FBcUJGLFFBQVEsQ0FBQ0UsYUFBOUI7QUFDQWdCLElBQUFBLElBQUksQ0FBQ0gsZ0JBQUwsR0FBd0JmLFFBQVEsQ0FBQ2UsZ0JBQWpDO0FBQ0FHLElBQUFBLElBQUksQ0FBQ0QsZUFBTCxHQUF1QmpCLFFBQVEsQ0FBQ2lCLGVBQWhDO0FBQ0FDLElBQUFBLElBQUksQ0FBQ1AsVUFBTDtBQUNBO0FBM0NlLENBQWpCO0FBOENBdkIsQ0FBQyxDQUFDaUMsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QnRCLEVBQUFBLFFBQVEsQ0FBQ1csVUFBVDtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG4vKiBnbG9iYWwgZ2xvYmFsUm9vdFVybCxnbG9iYWxUcmFuc2xhdGUsIEZvcm0gKi9cblxuJC5mbi5mb3JtLnNldHRpbmdzLnJ1bGVzLmlwYWRkciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRsZXQgcmVzdWx0ID0gdHJ1ZTtcblx0Y29uc3QgZiA9IHZhbHVlLm1hdGNoKC9eKFxcZHsxLDN9KVxcLihcXGR7MSwzfSlcXC4oXFxkezEsM30pXFwuKFxcZHsxLDN9KSQvKTtcblx0aWYgKGYgPT09IG51bGwpIHtcblx0XHRyZXN1bHQgPSBmYWxzZTtcblx0fSBlbHNlIHtcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IDU7IGkgKz0gMSkge1xuXHRcdFx0Y29uc3QgYSA9IGZbaV07XG5cdFx0XHRpZiAoYSA+IDI1NSkge1xuXHRcdFx0XHRyZXN1bHQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGZbNV0gPiAzMikge1xuXHRcdFx0cmVzdWx0ID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBmaXJld2FsbCA9IHtcblx0JGZvcm1PYmo6ICQoJyNmaXJld2FsbC1mb3JtJyksXG5cdHZhbGlkYXRlUnVsZXM6IHtcblx0XHRuZXR3b3JrOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnbmV0d29yaycsXG5cdFx0XHRydWxlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2lwYWRkcicsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZndfVmFsaWRhdGVQZXJtaXRBZGRyZXNzLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdGRlc2NyaXB0aW9uOiB7XG5cdFx0XHRpZGVudGlmaWVyOiAnZGVzY3JpcHRpb24nLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdlbXB0eScsXG5cdFx0XHRcdFx0cHJvbXB0OiBnbG9iYWxUcmFuc2xhdGUuZndfVmFsaWRhdGVSdWxlTmFtZSxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0fSxcblx0aW5pdGlhbGl6ZSgpIHtcblx0XHQkKCcjZmlyZXdhbGwtZm9ybSAucnVsZXMsI2ZpcmV3YWxsLWZvcm0gLmNoZWNrYm94JykuY2hlY2tib3goKTtcblx0XHQkKCcjZmlyZXdhbGwtZm9ybSAuZHJvcGRvd24nKS5kcm9wZG93bigpO1xuXG5cdFx0ZmlyZXdhbGwuaW5pdGlhbGl6ZUZvcm0oKTtcblx0fSxcblx0Y2JCZWZvcmVTZW5kRm9ybShzZXR0aW5ncykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHNldHRpbmdzO1xuXHRcdHJlc3VsdC5kYXRhID0gZmlyZXdhbGwuJGZvcm1PYmouZm9ybSgnZ2V0IHZhbHVlcycpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cdGNiQWZ0ZXJTZW5kRm9ybSgpIHtcblxuXHR9LFxuXHRpbml0aWFsaXplRm9ybSgpIHtcblx0XHRGb3JtLiRmb3JtT2JqID0gZmlyZXdhbGwuJGZvcm1PYmo7XG5cdFx0Rm9ybS51cmwgPSBgJHtnbG9iYWxSb290VXJsfWZpcmV3YWxsL3NhdmVgO1xuXHRcdEZvcm0udmFsaWRhdGVSdWxlcyA9IGZpcmV3YWxsLnZhbGlkYXRlUnVsZXM7XG5cdFx0Rm9ybS5jYkJlZm9yZVNlbmRGb3JtID0gZmlyZXdhbGwuY2JCZWZvcmVTZW5kRm9ybTtcblx0XHRGb3JtLmNiQWZ0ZXJTZW5kRm9ybSA9IGZpcmV3YWxsLmNiQWZ0ZXJTZW5kRm9ybTtcblx0XHRGb3JtLmluaXRpYWxpemUoKTtcblx0fSxcbn07XG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblx0ZmlyZXdhbGwuaW5pdGlhbGl6ZSgpO1xufSk7XG5cbiJdfQ==