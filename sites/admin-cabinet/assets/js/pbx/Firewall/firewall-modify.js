"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl,globalTranslate, Form */
$.fn.form.settings.rules.ipaddr = function (value) {
  var result = true;
  var f = value.match(/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/);

  if (f === null) {
    result = false;
  } else {
    for (var i = 1; i < 5; i += 1) {
      var a = f[i];

      if (a > 255) {
        result = false;
      }
    }

    if (f[5] > 32) {
      result = false;
    }
  }

  return result;
};

var firewall = {
  $formObj: $('#firewall-form'),
  validateRules: {
    network: {
      identifier: 'network',
      rules: [{
        type: 'ipaddr',
        prompt: globalTranslate.fw_ValidatePermitAddress
      }]
    },
    description: {
      identifier: 'description',
      rules: [{
        type: 'empty',
        prompt: globalTranslate.fw_ValidateRuleName
      }]
    }
  },
  initialize: function initialize() {
    $('#firewall-form .rules,#firewall-form .checkbox').checkbox();
    $('#firewall-form .dropdown').dropdown();
    firewall.initializeForm();
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = firewall.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {},
  initializeForm: function initializeForm() {
    Form.$formObj = firewall.$formObj;
    Form.url = "".concat(globalRootUrl, "firewall/save");
    Form.validateRules = firewall.validateRules;
    Form.cbBeforeSendForm = firewall.cbBeforeSendForm;
    Form.cbAfterSendForm = firewall.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  firewall.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9GaXJld2FsbC9maXJld2FsbC1tb2RpZnkuanMiXSwibmFtZXMiOlsiJCIsImZuIiwiZm9ybSIsInNldHRpbmdzIiwicnVsZXMiLCJpcGFkZHIiLCJ2YWx1ZSIsInJlc3VsdCIsImYiLCJtYXRjaCIsImkiLCJhIiwiZmlyZXdhbGwiLCIkZm9ybU9iaiIsInZhbGlkYXRlUnVsZXMiLCJuZXR3b3JrIiwiaWRlbnRpZmllciIsInR5cGUiLCJwcm9tcHQiLCJnbG9iYWxUcmFuc2xhdGUiLCJmd19WYWxpZGF0ZVBlcm1pdEFkZHJlc3MiLCJkZXNjcmlwdGlvbiIsImZ3X1ZhbGlkYXRlUnVsZU5hbWUiLCJpbml0aWFsaXplIiwiY2hlY2tib3giLCJkcm9wZG93biIsImluaXRpYWxpemVGb3JtIiwiY2JCZWZvcmVTZW5kRm9ybSIsImRhdGEiLCJjYkFmdGVyU2VuZEZvcm0iLCJGb3JtIiwidXJsIiwiZ2xvYmFsUm9vdFVybCIsImRvY3VtZW50IiwicmVhZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBQSxDQUFDLENBQUNDLEVBQUYsQ0FBS0MsSUFBTCxDQUFVQyxRQUFWLENBQW1CQyxLQUFuQixDQUF5QkMsTUFBekIsR0FBa0MsVUFBVUMsS0FBVixFQUFpQjtBQUNsRCxNQUFJQyxNQUFNLEdBQUcsSUFBYjtBQUNBLE1BQU1DLENBQUMsR0FBR0YsS0FBSyxDQUFDRyxLQUFOLENBQVksOENBQVosQ0FBVjs7QUFDQSxNQUFJRCxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNmRCxJQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBLEdBRkQsTUFFTztBQUNOLFNBQUssSUFBSUcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxJQUFJLENBQTVCLEVBQStCO0FBQzlCLFVBQU1DLENBQUMsR0FBR0gsQ0FBQyxDQUFDRSxDQUFELENBQVg7O0FBQ0EsVUFBSUMsQ0FBQyxHQUFHLEdBQVIsRUFBYTtBQUNaSixRQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7O0FBQ0QsUUFBSUMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPLEVBQVgsRUFBZTtBQUNkRCxNQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7O0FBQ0QsU0FBT0EsTUFBUDtBQUNBLENBakJEOztBQW1CQSxJQUFNSyxRQUFRLEdBQUc7QUFDaEJDLEVBQUFBLFFBQVEsRUFBRWIsQ0FBQyxDQUFDLGdCQUFELENBREs7QUFFaEJjLEVBQUFBLGFBQWEsRUFBRTtBQUNkQyxJQUFBQSxPQUFPLEVBQUU7QUFDUkMsTUFBQUEsVUFBVSxFQUFFLFNBREo7QUFFUlosTUFBQUEsS0FBSyxFQUFFLENBQ047QUFDQ2EsUUFBQUEsSUFBSSxFQUFFLFFBRFA7QUFFQ0MsUUFBQUEsTUFBTSxFQUFFQyxlQUFlLENBQUNDO0FBRnpCLE9BRE07QUFGQyxLQURLO0FBVWRDLElBQUFBLFdBQVcsRUFBRTtBQUNaTCxNQUFBQSxVQUFVLEVBQUUsYUFEQTtBQUVaWixNQUFBQSxLQUFLLEVBQUUsQ0FDTjtBQUNDYSxRQUFBQSxJQUFJLEVBQUUsT0FEUDtBQUVDQyxRQUFBQSxNQUFNLEVBQUVDLGVBQWUsQ0FBQ0c7QUFGekIsT0FETTtBQUZLO0FBVkMsR0FGQztBQXNCaEJDLEVBQUFBLFVBdEJnQix3QkFzQkg7QUFDWnZCLElBQUFBLENBQUMsQ0FBQyxnREFBRCxDQUFELENBQW9Ed0IsUUFBcEQ7QUFDQXhCLElBQUFBLENBQUMsQ0FBQywwQkFBRCxDQUFELENBQThCeUIsUUFBOUI7QUFFQWIsSUFBQUEsUUFBUSxDQUFDYyxjQUFUO0FBQ0EsR0EzQmU7QUE0QmhCQyxFQUFBQSxnQkE1QmdCLDRCQTRCQ3hCLFFBNUJELEVBNEJXO0FBQzFCLFFBQU1JLE1BQU0sR0FBR0osUUFBZjtBQUNBSSxJQUFBQSxNQUFNLENBQUNxQixJQUFQLEdBQWNoQixRQUFRLENBQUNDLFFBQVQsQ0FBa0JYLElBQWxCLENBQXVCLFlBQXZCLENBQWQ7QUFDQSxXQUFPSyxNQUFQO0FBQ0EsR0FoQ2U7QUFpQ2hCc0IsRUFBQUEsZUFqQ2dCLDZCQWlDRSxDQUVqQixDQW5DZTtBQW9DaEJILEVBQUFBLGNBcENnQiw0QkFvQ0M7QUFDaEJJLElBQUFBLElBQUksQ0FBQ2pCLFFBQUwsR0FBZ0JELFFBQVEsQ0FBQ0MsUUFBekI7QUFDQWlCLElBQUFBLElBQUksQ0FBQ0MsR0FBTCxhQUFjQyxhQUFkO0FBQ0FGLElBQUFBLElBQUksQ0FBQ2hCLGFBQUwsR0FBcUJGLFFBQVEsQ0FBQ0UsYUFBOUI7QUFDQWdCLElBQUFBLElBQUksQ0FBQ0gsZ0JBQUwsR0FBd0JmLFFBQVEsQ0FBQ2UsZ0JBQWpDO0FBQ0FHLElBQUFBLElBQUksQ0FBQ0QsZUFBTCxHQUF1QmpCLFFBQVEsQ0FBQ2lCLGVBQWhDO0FBQ0FDLElBQUFBLElBQUksQ0FBQ1AsVUFBTDtBQUNBO0FBM0NlLENBQWpCO0FBOENBdkIsQ0FBQyxDQUFDaUMsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QnRCLEVBQUFBLFFBQVEsQ0FBQ1csVUFBVDtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMjMgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuLyogZ2xvYmFsIGdsb2JhbFJvb3RVcmwsZ2xvYmFsVHJhbnNsYXRlLCBGb3JtICovXG5cbiQuZm4uZm9ybS5zZXR0aW5ncy5ydWxlcy5pcGFkZHIgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0bGV0IHJlc3VsdCA9IHRydWU7XG5cdGNvbnN0IGYgPSB2YWx1ZS5tYXRjaCgvXihcXGR7MSwzfSlcXC4oXFxkezEsM30pXFwuKFxcZHsxLDN9KVxcLihcXGR7MSwzfSkkLyk7XG5cdGlmIChmID09PSBudWxsKSB7XG5cdFx0cmVzdWx0ID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCA1OyBpICs9IDEpIHtcblx0XHRcdGNvbnN0IGEgPSBmW2ldO1xuXHRcdFx0aWYgKGEgPiAyNTUpIHtcblx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChmWzVdID4gMzIpIHtcblx0XHRcdHJlc3VsdCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgZmlyZXdhbGwgPSB7XG5cdCRmb3JtT2JqOiAkKCcjZmlyZXdhbGwtZm9ybScpLFxuXHR2YWxpZGF0ZVJ1bGVzOiB7XG5cdFx0bmV0d29yazoge1xuXHRcdFx0aWRlbnRpZmllcjogJ25ldHdvcmsnLFxuXHRcdFx0cnVsZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdpcGFkZHInLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmZ3X1ZhbGlkYXRlUGVybWl0QWRkcmVzcyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fSxcblx0XHRkZXNjcmlwdGlvbjoge1xuXHRcdFx0aWRlbnRpZmllcjogJ2Rlc2NyaXB0aW9uJyxcblx0XHRcdHJ1bGVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZW1wdHknLFxuXHRcdFx0XHRcdHByb21wdDogZ2xvYmFsVHJhbnNsYXRlLmZ3X1ZhbGlkYXRlUnVsZU5hbWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0sXG5cdH0sXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0JCgnI2ZpcmV3YWxsLWZvcm0gLnJ1bGVzLCNmaXJld2FsbC1mb3JtIC5jaGVja2JveCcpLmNoZWNrYm94KCk7XG5cdFx0JCgnI2ZpcmV3YWxsLWZvcm0gLmRyb3Bkb3duJykuZHJvcGRvd24oKTtcblxuXHRcdGZpcmV3YWxsLmluaXRpYWxpemVGb3JtKCk7XG5cdH0sXG5cdGNiQmVmb3JlU2VuZEZvcm0oc2V0dGluZ3MpIHtcblx0XHRjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcblx0XHRyZXN1bHQuZGF0YSA9IGZpcmV3YWxsLiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZXMnKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXHRjYkFmdGVyU2VuZEZvcm0oKSB7XG5cblx0fSxcblx0aW5pdGlhbGl6ZUZvcm0oKSB7XG5cdFx0Rm9ybS4kZm9ybU9iaiA9IGZpcmV3YWxsLiRmb3JtT2JqO1xuXHRcdEZvcm0udXJsID0gYCR7Z2xvYmFsUm9vdFVybH1maXJld2FsbC9zYXZlYDtcblx0XHRGb3JtLnZhbGlkYXRlUnVsZXMgPSBmaXJld2FsbC52YWxpZGF0ZVJ1bGVzO1xuXHRcdEZvcm0uY2JCZWZvcmVTZW5kRm9ybSA9IGZpcmV3YWxsLmNiQmVmb3JlU2VuZEZvcm07XG5cdFx0Rm9ybS5jYkFmdGVyU2VuZEZvcm0gPSBmaXJld2FsbC5jYkFmdGVyU2VuZEZvcm07XG5cdFx0Rm9ybS5pbml0aWFsaXplKCk7XG5cdH0sXG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG5cdGZpcmV3YWxsLmluaXRpYWxpemUoKTtcbn0pO1xuXG4iXX0=