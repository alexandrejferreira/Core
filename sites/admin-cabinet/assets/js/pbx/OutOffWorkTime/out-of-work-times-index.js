"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl,$ */

/**
 * Object for managing the Out-of-Work Times table.
 *
 * @module OutOfWorkTimesTable
 */
var OutOfWorkTimesTable = {
  /**
   * Initializes the Out-of-Work Times table.
   */
  initialize: function initialize() {
    // Bind double-click event to table cells
    $('.frame-row td').on('dblclick', function (e) {
      var id = $(e.target).closest('tr').attr('id');
      window.location = "".concat(globalRootUrl, "out-off-work-time/modify/").concat(id);
    }); // Initialize DataTable

    $('#time-frames-table').DataTable({
      lengthChange: false,
      paging: false,
      columns: [{
        orderable: false
      }, {
        orderable: false
      }, {
        orderable: false
      }, null, null, {
        orderable: false
      }],
      autoWidth: false,
      language: SemanticLocalization.dataTableLocalisation,
      "drawCallback": function drawCallback(settings) {
        $("[data-content!=''][data-content]").popup();
      }
    }); // Move the "Add New" button to the first eight-column div

    $('#add-new-button').appendTo($('div.eight.column:eq(0)'));
    $('body').on('click', 'a.delete', function (e) {
      e.preventDefault();
      var id = $(e.target).closest('tr').attr('id');
      OutOfWorkTimesTable.deleteRule(id);
    }); // Initialize table drag-and-drop with the appropriate callbacks

    $('#time-frames-table').tableDnD({
      onDrop: OutOfWorkTimesTable.cbOnDrop,
      // Callback on dropping an item
      onDragClass: 'hoveringRow',
      // CSS class while dragging
      dragHandle: '.dragHandle' // Handle for dragging

    });
  },

  /**
   * Callback to execute after dropping an element
   */
  cbOnDrop: function cbOnDrop() {
    var priorityWasChanged = false;
    var priorityData = {};
    $('.frame-row').each(function (index, obj) {
      var ruleId = $(obj).attr('id');
      var oldPriority = parseInt($(obj).attr('data-value'), 10);
      var newPriority = obj.rowIndex;

      if (oldPriority !== newPriority) {
        priorityWasChanged = true;
        priorityData[ruleId] = newPriority;
      }
    });

    if (priorityWasChanged) {
      $.api({
        on: 'now',
        url: "".concat(globalRootUrl, "out-off-work-time/changePriority"),
        method: 'POST',
        data: priorityData
      });
    }
  },

  /**
   * Deletes an extension with the given ID.
   * @param {string} id - The ID of the rule to delete.
   */
  deleteRule: function deleteRule(id) {
    $('.message.ajax').remove();
    $.api({
      url: "".concat(globalRootUrl, "out-off-work-time/delete/").concat(id),
      on: 'now',
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0;
      },
      onSuccess: function onSuccess(response) {
        if (response.success === true) {
          $('#time-frames-table').find("tr[id=".concat(id, "]")).remove();
        } else {
          UserMessage.showError(response.message.error, globalTranslate.ex_ImpossibleToDeleteExtension);
        }
      }
    });
  }
};
/**
 *  Initialize out of work table on document ready
 */

$(document).ready(function () {
  OutOfWorkTimesTable.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,